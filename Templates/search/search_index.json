{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Checklists","text":"<ul> <li>architectureChecklist</li> <li>checklists</li> <li>codeReview</li> <li>debugging</li> <li>defects</li> <li>designChecklist</li> <li>dod</li> <li>dor</li> </ul>"},{"location":"#media","title":"media","text":""},{"location":"Checklists/architectureChecklist/","title":"Architecture Checklist","text":""},{"location":"Checklists/architectureChecklist/#general","title":"General","text":"<ul> <li>ARC-1      Does the architecture communicate an adequate vision of the system that will direct further design activities?</li> <li>ARC-2      Is the architecture well organized and provide a concise system overview, background information, constraints, and a clear organizational structure for all downstream designs?</li> <li>ARC-3      Is the architecture designed to accommodate likely changes?</li> <li>ARC-4      Does the architecture stay above detailed design and user interface design activities?</li> <li>ARC-5      Do the dependencies between different architectural views hold together?</li> </ul>"},{"location":"Checklists/architectureChecklist/#architecture-design","title":"Architecture Design","text":"<ul> <li>ARC-6      Is the system architecture, including the data flows, control flows, high-level elements, and interfaces, clearly represented?</li> <li>ARC-7      Are fine grain element details omitted and left to subsequent design artifacts?</li> <li>ARC-8    Does the architecture cleanly decompose the top-level elements of the system?</li> <li>ARC-9    To the extent possible, is the architecture independent of the technology that will use used to implement it?</li> <li>ARC-10    Does the architecture take into account technology or other constraints that cannot be avoided, i.e., can the architecture be implemented for the target environment?</li> <li>ARC-11    Have you used round-trip design, selecting the best of several attempts?  Are reasons listed for the discounted alternatives?</li> <li>ARC-12    Does the architecture differentiate between the problem-domain, the user-interface, task-management, and data-management? If not, is the lack explained and justified?</li> </ul>"},{"location":"Checklists/architectureChecklist/#architectural-features","title":"Architectural Features","text":"<ul> <li>ARC-13    Are external interfaces, including user interfaces, defined and justified?</li> <li>ARC-14    Is a level of robustness specified and justified?</li> <li>ARC-15    Is the architecture appropriately layered?</li> <li>ARC-16    Is the architecture loosely coupled and have good cohesion?</li> <li>ARC-17    Does the architecture set resource budgets for each element?</li> </ul>"},{"location":"Checklists/architectureChecklist/#strategies","title":"Strategies","text":"<ul> <li>ARC-18    Is an I/O strategy described and justified?</li> <li>ARC-19    Is an error-handling strategy described and justified?</li> <li>Project Level Support</li> <li>ARC-20    Does the architecture support the lifecycle selected by the project?</li> <li>ARC-21    Are the major system goals clearly stated?</li> <li>ARC-22    Is the system environment defined, including hardware, software, and external systems?</li> <li>ARC-23    Are necessary buy vs. build decisions included and justified?</li> </ul>"},{"location":"Checklists/checklists/","title":"checklists","text":""},{"location":"Checklists/codeReview/","title":"Code Review Checklist","text":"<p>The following is a basic checklist on items to consider when doing code reviews.</p> <p></p>"},{"location":"Checklists/codeReview/#functionality","title":"Functionality","text":"<ul> <li>F-1. Does the code match the design and the system requirements?</li> <li>F-2. Does the code do what it should be doing?</li> <li>F-3. Does the code do anything it should not be doing?</li> <li>F-4. Can the code be made simpler while still doing what it needs to do?</li> <li>F-5. Are available building blocks used when appropriate? (algorithms, data structures, types, templates, libraries, RTOS functions)</li> <li>F-6. Does the code use good patterns and abstractions? (e.g., state charts, no copy-and paste)</li> <li>F-7. Can this function be written with a single point of exit? (no returns in middle of function)</li> <li>F-8. Are all variables initialized before use?</li> <li>F-9. Are there unused variables?</li> <li>F-10. Is each function doing only one thing? (Does it make sense to break it down into smaller modules that each do something different?)</li> <li>F-11. Has reusable functionality been pulled out into utility functions?</li> </ul>"},{"location":"Checklists/codeReview/#style","title":"Style","text":"<ul> <li>S-1. Does the code follow the style guide? (e.g. formatting, commenting)</li> <li>S-2. Is the header information for each file and each function descriptive enough?</li> <li>S-3. Is there an appropriate amount of comments? (frequency, location, and level of detail)</li> <li>S-4. Is the code well structured? (typographically and functionally)</li> <li>S-5. Are the variable and function names descriptive and consistent in style?</li> <li>S-6. Are \\\"magic numbers\\\" avoided? (use named constants rather than numbers)</li> <li>S-7. Is there any \"dead code\" (commented out code or unreachable code) that should be removed?</li> <li>S-8. Is the code too complicated? (Did you have to think hard to understand what it does?)</li> <li>S-9. Did you have to ask the author what the code does? (code should be self-explanatory)</li> <li>S-10. Is there commented out code that should be removed?</li> <li>S-11. Are the compilation and/or Static Analysis checks 100% warning-free? (are warnings enabled?)</li> <li>S-12. Are there comments for saying what the code is doing rather than why it is doing it? (does it specify about any hacks, workaround and temporary fixes. Additionally, does it mention pending tasks in to-do comments, which can be tracked easily)</li> </ul>"},{"location":"Checklists/codeReview/#architecture","title":"Architecture","text":"<ul> <li>A-1. Is the function too long? (e.g., longer than fits on one printed page)</li> <li>A-2. Can this code be reused? Should it be reusing something else?</li> <li>A-3. Is there minimal use of global variables? Do all variables have minimum scope?</li> <li>A-4. Are classes and functions that are doing related things grouped appropriately? (cohesion)</li> <li>A-5. Is the code portable? (especially variable sizes, e.g., \"int32\" instead of \"long\")</li> <li>A-6. Are specific types used when possible? (e.g., \"unsigned\" and typedef, not just \\\"int\\\")</li> <li>A-7. Are there any if/else structures nested more than two deep? (consecutive \"else if\" is OK)</li> <li>A-8. Are there nested switch or case statements? (they should never be nested)</li> <li>A-9. Is there any hard coding of values? (use constants/configuration values)</li> <li>A-10. Has security been considered? (e.g SQL injections, Cross Site Scripting and API security)</li> </ul>"},{"location":"Checklists/codeReview/#exception-handling","title":"Exception handling","text":"<ul> <li>E-1. Are input parameters checked for proper values (sanity checking)?</li> <li>E-2. Are error return codes/exceptions generated and passed back up to the calling function?</li> <li>E-3. Are error return codes/exceptions handled by the calling function?</li> <li>E-4. Are null pointers and negative numbers handled properly?</li> <li>E-5. Do switch statements have a default clause used for error detection?</li> <li>E-6. Are arrays checked for out of range indexing? Are pointers similarly checked?</li> <li>E-7. Is garbage collection being done properly, especially for errors/exceptions?</li> <li>E-8. Is there a chance of mathematical overflow/underflow?</li> <li>E-9. Are error conditions checked and logged? Are the error messages/codes meaningful?</li> </ul>"},{"location":"Checklists/codeReview/#logging","title":"Logging","text":"<ul> <li>L-1. Are we logging relevant information ?</li> <li>L-2. Are we logging at the correct priority?</li> <li>L-3. Is the log message clear (i.e access to code is not required to understand it and it clearly describes what has occurred)?</li> </ul>"},{"location":"Checklists/codeReview/#timing","title":"Timing","text":"<ul> <li>T-1. Is the worst-case timing bounded? (no unbounded loops, no recursion)</li> <li>T-2. Are there any race conditions? (especially multi-byte variables modified by an interrupt) T-3. Is appropriate code thread safe and re-entrant?</li> <li>T-4. Are there any long-running ISRs? Are interrupts masked for more than a few clocks?</li> <li>T-5. Is priority inversion avoided or handled by the RTOS?</li> <li>T-6. Is the watchdog timer turned on? Is the watchdog kicked only if every task is executing?</li> <li>T-7. Has code readability been sacrificed for unnecessary optimization?</li> </ul>"},{"location":"Checklists/codeReview/#hardware","title":"Hardware","text":"<ul> <li>H-1. Do I/O operations put the hardware in correct state?</li> <li>H-2. Are min/max timing requirements met for the hardware interface?</li> <li>H-3. Are you sure that multi-byte hardware registers can't change during read/write?</li> <li>H-4. Does the software ensure that the system resets to a well-defined hardware system state?</li> <li>H-5. Have brownout and power loss been handled?</li> <li>H-6. Is the system correctly configured for entering/leaving sleep mode (e.g. timers)?</li> <li>H-7. Have unused interrupt vectors been directed to an error handler?</li> <li>H-8. Has care been taken to avoid EEPROM corruption? (e.g., power loss during write)</li> </ul>"},{"location":"Checklists/codeReview/#commit","title":"Commit","text":"<ul> <li>C-1. Do the commit comments explain what the change is and why?</li> <li>C-2. Do the commit comments reference the appropriate JIRA issue?</li> <li>C-3. Is the merge for one change only? (do not resolve multiple issues in one merge)</li> </ul>"},{"location":"Checklists/debugging/","title":"Debugging","text":""},{"location":"Checklists/debugging/#general-approach-to-debugging","title":"General approach to debugging","text":"<ul> <li>DBG-1      Have you set a maximum time for quick and dirty debugging?</li> <li>DBG-2      Do you research an issue to ensure an easy answer is not readily available?</li> <li>DBG-3      Do you use all available debugging tools? (e.g., warning messages, execution tracing and profiling, scaffolding, interactive debugging, etc.)</li> <li>DBG-4      Do you assume that errors are your fault?</li> <li>DBG-5      Do you avoid the trial-and-error, superstitious approach to debugging?</li> <li>DBG-6      Do you use several different techniques to find errors and alternate approaches?</li> <li>DBG-7      Do you get help when appropriate?</li> <li>DBG-8      If an issue appears that it will take longer to identify or fix than initially thought, do you notify project management as appropriate?</li> <li>DBG-9      Do you move on when appropriate?  </li> <li>DBG-10    Do you verify that the fix is correct?</li> <li>DBG-11    Do you use debugging as an opportunity to learn?</li> </ul>"},{"location":"Checklists/debugging/#techniques-for-finding-errors-have-you-tried-to","title":"Techniques for Finding Errors. Have you tried to","text":"<ul> <li>DBG-12    ... Use all the data available to form a hypothesis?</li> <li>DBG-13    ... Refine the test cases that produce the error?</li> <li>DBG-14    ... Reproduce the error several different ways?</li> <li>DBG-15    ... Generate more data to generate more hypotheses?</li> <li>DBG-16    ... Use results of negative tests?</li> <li>DBG-17    ... Brainstorm for possible hypotheses?</li> <li>DBG-18    ... Narrow the suspicious region of the code?</li> <li>DBG-19    ... Check code that's changed recently?</li> <li>DBG-20    ... Expand the suspicious region of the code?</li> <li>DBG-21    ... Integrate incrementally?</li> <li>DBG-22    ... Be suspicious of routines that have had errors before?</li> <li>DBG-23    ... Use brute force?</li> <li>DBG-24    ... Check for common errors?</li> <li>DBG-25    ... Use confessional debugging?</li> <li>DBG-26    ... Take a break from the problem?</li> </ul>"},{"location":"Checklists/debugging/#techniques-for-fixing-errors-have-you-tried-to","title":"Techniques for Fixing Errors. Have you tried to","text":"<ul> <li>DBG-27    ... Understand the problem?</li> <li>DBG-28    ... Check your work?</li> <li>DBG-29    \u2026Verify that the fix is correct?</li> <li>DBG-30    ... Relax?</li> <li>DBG-31    ... Confirm the error diagnosis?</li> <li>DBG-32    ... Save the original source code?</li> <li>DBG-33    ... Fix the problem, not the symptom?</li> <li>DBG-34    ... Change the code only for good reason?</li> <li>DBG-35    ... Understand the program as well as the problem?</li> <li>DBG-36    ... Make one change at a time?</li> <li>DBG-37    ... Look for similar errors?</li> <li>DBG-38    ... Have a break?</li> </ul>"},{"location":"Checklists/defects/","title":"Defects","text":""},{"location":"Checklists/defects/#defect-creation","title":"Defect Creation","text":"<p>DC-1 Define the defect</p> <p>State the platform and version</p> <p>Log in and examine data (client, patient, program selected)</p> <p>List any nonstandard configuration settings with values</p> <p>State the workflow direction through the application</p> <p>DC-2 Research to narrow down the root cause and get beyond the defect symptom</p> <p>Retest until you have the exact steps in the correct order to reproduce the defect</p> <p>Define the who, what, where, when, and how you found the defect</p> <p>Execute database queries</p> <p>Scan error logs</p> <p>If the defect is intermittent, say so</p> <p>DC-3 Add support documentation</p> <p>Screenshots</p> <p>Video</p> <p>Step recording files</p> <p>Error log data</p> <p>Database query results</p> <p>DC- 4Format all text for readability and easy understanding</p> <p>Stick to a known and familiar format when possible</p> <p>List using bulleted or numbered lists</p> <p>Keep textual descriptions succinct and direct</p> <p>Facts only; no opinion, no suggestions, no accusations, no blame</p>"},{"location":"Checklists/defects/#full-defect-report-example","title":"Full defect report example","text":"<p>The following is a full-text example of a defect report:</p> <p>Summary</p> <p>Allergy button not highlighted in red and user able to enter medication.</p> <p>Description</p> <p>Allergy button fails to highlight in red when an allergy is saved on the patient record. Additionally, allergy entry is configured to disallow medication entry of the interacting medication. User is able to enter and save the medication that to which the patient is allergic.</p> <p>Build/Platform</p> <p>Windows 10/IE 11.5.1 / OS X Yosemite/Safari 10.0.3</p> <p>Steps to reproduce</p> <ol> <li> <p>Setup: Set the allergy configuration to ALWAYS BLOCK and save.</p> </li> <li> <p>Log in as a MD user with full access.</p> </li> <li> <p>Select a patient with an existing, saved allergy to penicillin.</p> </li> <li> <p>View the Allergy alert button in the upper right corner.</p> </li> <li> <p>Enter a medication order for penicillin, q4h for 30 days. Save.</p> </li> </ol> <p>Actual results</p> <p>The allergy button doesn\\'t refresh and turn red to alert users to the presence of an allergy, and it allows the user to add the medication even though the allergy is on the patient record.</p> <p>Expected results</p> <p>The allergy button automatically refreshes anytime a new allergy is entered and saved. The button turns red to indicate an allergy exists for the patient. The MD user is blocked from saving a medication order on the patient record when the allergy is present. The configuration setting of ALWAYS BLOCK allows the medication order to be blocked regardless of the severity of the allergy.</p> <p>Evidence and supporting documentation</p> <p>See the red arrow in the sample screenshot below. The allergy button should be displaying where the red rectangle is drawn.</p> <p>NOTE: Configuration set to block medication entry when any related allergy exists on the patient record regardless of severity value. User is an MD with full access. Database table displays the correct allergy value on the patient. No errors generated in the error log. Defect Severity and Priority</p>"},{"location":"Checklists/defects/#severity","title":"Severity","text":"<p>A blocking bug affects the inoperability of a system, and as a result, proceed work with the application under test, or its essential functions become Functioning of a scheme can only be ensured by a solution of the problem.</p> <p>A critical error can be caused by malfunctioning key business logic, a security hole, an issue that resulted in a temporary disability of server or causing a part of the system to fail, without the ability to fix the bug applying input points. The solution of the problem is necessary for continuous operation of the essential functions of the system under test.</p> <p>A major defect happens when the piece of the business rationale is not working accurately. The bug is not critical unless there is a chance to proceed with the capacity being tested utilizing other input data.</p> <p>Such bug does not aggravate the rationale of tested part of the application. Usually, it is a prominent issue of the UI. S5 Trivial.</p> <p>It is an insignificant mistake that does not concern the business rationale of the application is an inadequately reproducible problem scarcely noticeable through the interface. This defect of third-party libraries or services does not have any effect on the quality of the product.</p> <p>Priority</p> <p>P1 High.</p> <p>The error has to be fixed the soonest way since its availability is essential for proper operability.</p> <p>P2 Medium.</p> <p>Elimination of the error is required, though its availability is not critical, but needs a binding elimination.</p> <p>P3 Low.</p> <p>The presence of a bug is not critical and does not require an urgent solution.</p>"},{"location":"Checklists/defects/#basic-understanding-between-bug-severity-and-priority","title":"Basic Understanding Between Bug Severity and Priority","text":""},{"location":"Checklists/defects/#1-severity","title":"1. Severity","text":"<p>Severity is how austere a bug is! The severity of a bug is derived based on the effect of that bug on the system. It indicates the level of threat that a bug can affect the system. Severity is divided into levels, such as-</p> <p></p> <p>Realizing the Severity of a bug is critical from risk assessment and management point of view.</p>"},{"location":"Checklists/defects/#2-priority","title":"2. Priority","text":"<p>Priority is how quickly a bug should be fixed and eradicated from the website. Bug priority indicates the sense of urgency for dealing with a bug on our website.</p> <p></p> <p>Buggy software or a website may severely infect the roster, which is a result, can lead to a re-evaluation of risk and priorities, which turn out to be more time, and resource consuming. This is why Shift-left testing is trending in order to evaluate the risk and bugs by testing a website as early as possible. In shift-left testing, you implement website testing right from the requirement gathering phase. That being said, prioritizing a bug in the right manner goes a long way in planning your SDLC(Software Development Lifecycle).</p>"},{"location":"Checklists/defects/#bug-severity-vs-priority","title":"Bug Severity vs Priority","text":"<p>Bug Severity is the degree of impact that a defect has on the system; whereas, Bug Priority is the order of severity which has impacted the system.</p> <p>Severity is related to standards and functionality of the system; whereas, Priority is related to scheduling.</p> <p>Depending upon the impact of the bug, Bug Severity examines whether the impact is serious or not. On the other hand, Bug Priority examines whether the bug should be resolved soon or can be delayed.</p> <p>Bug Severity is operated by functionality. On the other hand, bug priority is operated by business value.</p> <p>In the case of bug severity, the level of severity is less likely to change. However, bug priority may differ.</p> <p>Bug severity is assessed from a technical perspective of the web-application workflow. On the other hand, bug priority is assessed from a user-experience perspective on web-application usage.</p>"},{"location":"Checklists/defects/#defect-resolution","title":"Defect Resolution","text":"<ul> <li>DR-1 Ensure you have understanding in the area you are fixing</li> <li>DR-2 Clarify if the defect is a:</li> <li>Functional defect</li> <li>Integration related defect</li> <li>Architectural defect</li> <li>Requirement related defect</li> <li>DR-3 Detail what is wrong with the current implementation</li> <li>DR-4 Explain what you will change to resolve the defect</li> <li>DR-5 Summarise what tests you have done to ensure the defect is resolved</li> <li>DR-6 Ensure linkage between the code commits and the defect</li> </ul>"},{"location":"Checklists/designChecklist/","title":"Design Checklist","text":""},{"location":"Checklists/designChecklist/#general","title":"General","text":"<ul> <li>SD-1 Do individual elements of the design (e.g., a diagram) conform to appropriate checklists?</li> <li>SD-2 Does the design support both product and project goals?</li> <li>SD-3 Is the design feasible from a technology, cost, and schedule standpoint?</li> <li>SD-4 Have known design risks been identified, analyzed, and planned for or mitigated?</li> <li>SD-5 Are the methodologies, notations, etc. used to create and capture the design appropriate?</li> <li>SD-6 Does the level of formality match the project size, project goals, and engineer expertise?</li> <li>SD-7 Has the design been refined based on prototyping or implementation feedback?</li> <li>SD-8 If possible, were proven past designs reused?</li> <li>SD-9 Does the design support proceeding to the next development step?</li> </ul>"},{"location":"Checklists/designChecklist/#design-considerations","title":"Design Considerations","text":"<ul> <li>SD-10 Does the design have conceptual integrity? (i.e., does the whole thing hang together?)</li> <li>SD-11 Can the design be implemented within technology and environmental constraints?</li> <li>SD-12 Does the design use standard techniques and avoid exotic, hard-to-understand elements?</li> <li>SD-13 Does the design emphasizes simplicity over cleverness?</li> <li>SD-14 Is the design \u201cas simple as possible, but no simpler\u201d?</li> <li>SD-15 Is the design lean? (i.e., are all of its parts strictly necessary?)</li> <li>SD-16 If part of an evolutionary lifecycle or if change is expected in maintenance, do expected volatile areas of the design support expected changes or refactoring of the design? (e.g., have design for change principles been followed?)</li> <li>SD-17 Does the design create reusable components if appropriate?</li> <li>SD-18 Will the design be easy to port to another environment if appropriate?</li> <li>SD-19 Does the design have low complexity?</li> <li>SD-20 Is the design intellectually manageable?</li> <li>SD-21 Is the design robust?</li> </ul>"},{"location":"Checklists/designChecklist/#requirements-traceability","title":"Requirements Traceability","text":"<ul> <li>SD-22 Does the design address all issues from the requirements?</li> <li>SD-23 Does the design add features or functionality, which was not specified by the requirements? (i.e., are all parts of the design traceable back to requirements?)</li> <li>SD-24 If appropriate has requirements coverage been documented with a completed requirements traceability matrix?</li> </ul>"},{"location":"Checklists/designChecklist/#level-of-detail","title":"Level of Detail","text":"<ul> <li>SD-25 Is the level of detail appropriate for this design artifact?</li> <li>SD-26 Has sufficient detail been included to allow the downstream consumer of the design to produce their artifacts (design, databases, code, test plan, etc.)?</li> </ul>"},{"location":"Checklists/designChecklist/#completeness","title":"Completeness","text":"<ul> <li>SD-27 Are all of the assumptions, constraints, design decisions, and dependencies documented?</li> <li>SD-28 Has a risk plan been made for the parts of the design that may not be feasible?</li> <li>SD-29 Are assumptions made due to missing information been documented?</li> <li>SD-30 Have all reasonable alternative designs been considered, including not automating some processes in software?</li> <li>SD-31 Have all goals, tradeoffs, and decisions been described?</li> </ul>"},{"location":"Checklists/designChecklist/#consistency","title":"Consistency","text":"<ul> <li>SD-32 Is the design consistent with its upstream and downstream artifacts?</li> <li>SD-33 Does the design adequately address issues that were identified and deferred at previous upstream levels?</li> <li>SD-34 Have the impacts of all \u2018To-Be-Determined\u2019 (TBD) issues in the upstream artifacts been assessed and addressed?</li> <li>SD-35 Does the design make sense both from the top down and the bottom up?  SD-36       Is the design consistent with related artifacts? (i.e. other modules, designs, etc.)  SD-37       Is the design consistent with the development and operating environments?</li> </ul>"},{"location":"Checklists/designChecklist/#performance","title":"Performance","text":"<ul> <li>SD-38 Are all performance attributes, assumptions, and constraints clearly defined?</li> <li>SD-39 If appropriate are there justifications for design performance? (e.g., prototyping critical areas or reusing an existing design proven in the same context)</li> </ul>"},{"location":"Checklists/designChecklist/#maintainability","title":"Maintainability","text":"<ul> <li>SD-40 Does the design allow for ease of maintenance?</li> <li>SD-41 If reusable parts of other designs are being used, has their effect on design and integration been stated?</li> <li>SD-42 Does the design account for future extensions to the program?</li> <li>SD-43 Does the design resists erosion in the correctness of its content over time?</li> </ul>"},{"location":"Checklists/designChecklist/#compliance","title":"Compliance","text":"<ul> <li>SD-44 Does the design follow all standards necessary for the system? (e.g., date standards)</li> </ul>"},{"location":"Checklists/dod/","title":"Definition of Done","text":"<ul> <li>DoD-1 Code builds without warnings</li> <li>DoD-2 Code developer tested</li> <li>DoD-3 Code is QA tested</li> <li>DoD-4 Documentation updated</li> <li>DoD-5 Code reviewed</li> <li>DoD-6 Code meets code review checklist</li> <li>DoD-7 Any technical Debt is recorded</li> <li>DoD-8 CI build is complete</li> </ul>"},{"location":"Checklists/dor/","title":"Definition of Ready","text":"<ul> <li>DoR-1 Design specs provided</li> <li>DoR-2 User story is clear</li> <li>DoR-3 Architecture understood</li> <li>DoR-4 Acceptance criteria agreed</li> <li>DoR-5 Meets INVEST</li> <li>DoR-5 Non-functional requirements are understood</li> </ul>"},{"location":"Checklists/dor/#invest","title":"INVEST","text":"<ul> <li>I-1 Immediately actionable   a team can begin work on the item right away</li> <li>I-2 Negotiable   the team can discuss details about the PBI and how it is to be accomplished.</li> <li>I-3 Value   the PBI produces value to customers/stakeholders.</li> <li>I-4 Estimable   the team can estimate how much effort it will take to complete.</li> <li>I-5 Small   the work can be accomplished in a single Sprint.</li> <li>I-6 Testable the increment can be tested</li> </ul>"}]}