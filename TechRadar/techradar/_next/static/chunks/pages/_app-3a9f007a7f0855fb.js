(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[888],{6840:function(e,t,a){(window.__NEXT_P=window.__NEXT_P||[]).push(["/_app",function(){return a(3941)}])},8342:function(e,t,a){"use strict";let i=a(6513),n=i.basePath&&"/"!==i.basePath?i.basePath:"";e.exports={basePath:n,output:"export",trailingSlash:!0,reactStrictMode:!0}},9108:function(e,t,a){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e,t){for(var a in t)Object.defineProperty(e,a,{enumerable:!0,get:t[a]})}(t,{ReadonlyURLSearchParams:function(){return d.ReadonlyURLSearchParams},RedirectType:function(){return d.RedirectType},ServerInsertedHTMLContext:function(){return c.ServerInsertedHTMLContext},notFound:function(){return d.notFound},permanentRedirect:function(){return d.permanentRedirect},redirect:function(){return d.redirect},useParams:function(){return f},usePathname:function(){return u},useRouter:function(){return p},useSearchParams:function(){return l},useSelectedLayoutSegment:function(){return m},useSelectedLayoutSegments:function(){return g},useServerInsertedHTML:function(){return c.useServerInsertedHTML}});let i=a(7294),n=a(5716),r=a(7353),s=a(8575),o=a(4565),d=a(8670),c=a(4439);function l(){let e=(0,i.useContext)(r.SearchParamsContext);return(0,i.useMemo)(()=>e?new d.ReadonlyURLSearchParams(e):null,[e])}function u(){return(0,i.useContext)(r.PathnameContext)}function p(){let e=(0,i.useContext)(n.AppRouterContext);if(null===e)throw Error("invariant expected app router to be mounted");return e}function f(){return(0,i.useContext)(r.PathParamsContext)}function g(e){void 0===e&&(e="children");let t=(0,i.useContext)(n.LayoutRouterContext);return t?function e(t,a,i,n){let r;if(void 0===i&&(i=!0),void 0===n&&(n=[]),i)r=t[1][a];else{var d;let e=t[1];r=null!=(d=e.children)?d:Object.values(e)[0]}if(!r)return n;let c=r[0],l=(0,s.getSegmentValue)(c);return!l||l.startsWith(o.PAGE_SEGMENT_KEY)?n:(n.push(l),e(r,a,!1,n))}(t.tree,e):null}function m(e){void 0===e&&(e="children");let t=g(e);if(!t||0===t.length)return null;let a="children"===e?t[0]:t[t.length-1];return a===o.DEFAULT_SEGMENT_KEY?null:a}("function"==typeof t.default||"object"==typeof t.default&&null!==t.default)&&void 0===t.default.__esModule&&(Object.defineProperty(t.default,"__esModule",{value:!0}),Object.assign(t.default,t),e.exports=t.default)},8670:function(e,t,a){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e,t){for(var a in t)Object.defineProperty(e,a,{enumerable:!0,get:t[a]})}(t,{ReadonlyURLSearchParams:function(){return s},RedirectType:function(){return i.RedirectType},notFound:function(){return n.notFound},permanentRedirect:function(){return i.permanentRedirect},redirect:function(){return i.redirect}});let i=a(8384),n=a(5403);class r extends Error{constructor(){super("Method unavailable on `ReadonlyURLSearchParams`. Read more: https://nextjs.org/docs/app/api-reference/functions/use-search-params#updating-searchparams")}}class s extends URLSearchParams{append(){throw new r}delete(){throw new r}set(){throw new r}sort(){throw new r}}("function"==typeof t.default||"object"==typeof t.default&&null!==t.default)&&void 0===t.default.__esModule&&(Object.defineProperty(t.default,"__esModule",{value:!0}),Object.assign(t.default,t),e.exports=t.default)},5403:function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e,t){for(var a in t)Object.defineProperty(e,a,{enumerable:!0,get:t[a]})}(t,{isNotFoundError:function(){return n},notFound:function(){return i}});let a="NEXT_NOT_FOUND";function i(){let e=Error(a);throw e.digest=a,e}function n(e){return"object"==typeof e&&null!==e&&"digest"in e&&e.digest===a}("function"==typeof t.default||"object"==typeof t.default&&null!==t.default)&&void 0===t.default.__esModule&&(Object.defineProperty(t.default,"__esModule",{value:!0}),Object.assign(t.default,t),e.exports=t.default)},1109:function(e,t){"use strict";var a,i;Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"RedirectStatusCode",{enumerable:!0,get:function(){return a}}),(i=a||(a={}))[i.SeeOther=303]="SeeOther",i[i.TemporaryRedirect=307]="TemporaryRedirect",i[i.PermanentRedirect=308]="PermanentRedirect",("function"==typeof t.default||"object"==typeof t.default&&null!==t.default)&&void 0===t.default.__esModule&&(Object.defineProperty(t.default,"__esModule",{value:!0}),Object.assign(t.default,t),e.exports=t.default)},8384:function(e,t,a){"use strict";var i,n;Object.defineProperty(t,"__esModule",{value:!0}),function(e,t){for(var a in t)Object.defineProperty(e,a,{enumerable:!0,get:t[a]})}(t,{RedirectType:function(){return i},getRedirectError:function(){return c},getRedirectStatusCodeFromError:function(){return m},getRedirectTypeFromError:function(){return g},getURLFromRedirectError:function(){return f},isRedirectError:function(){return p},permanentRedirect:function(){return u},redirect:function(){return l}});let r=a(5714),s=a(1747),o=a(1109),d="NEXT_REDIRECT";function c(e,t,a){void 0===a&&(a=o.RedirectStatusCode.TemporaryRedirect);let i=Error(d);i.digest=d+";"+t+";"+e+";"+a+";";let n=r.requestAsyncStorage.getStore();return n&&(i.mutableCookies=n.mutableCookies),i}function l(e,t){void 0===t&&(t="replace");let a=s.actionAsyncStorage.getStore();throw c(e,t,(null==a?void 0:a.isAction)?o.RedirectStatusCode.SeeOther:o.RedirectStatusCode.TemporaryRedirect)}function u(e,t){void 0===t&&(t="replace");let a=s.actionAsyncStorage.getStore();throw c(e,t,(null==a?void 0:a.isAction)?o.RedirectStatusCode.SeeOther:o.RedirectStatusCode.PermanentRedirect)}function p(e){if("object"!=typeof e||null===e||!("digest"in e)||"string"!=typeof e.digest)return!1;let[t,a,i,n]=e.digest.split(";",4),r=Number(n);return t===d&&("replace"===a||"push"===a)&&"string"==typeof i&&!isNaN(r)&&r in o.RedirectStatusCode}function f(e){return p(e)?e.digest.split(";",3)[2]:null}function g(e){if(!p(e))throw Error("Not a redirect error");return e.digest.split(";",2)[1]}function m(e){if(!p(e))throw Error("Not a redirect error");return Number(e.digest.split(";",4)[3])}(n=i||(i={})).push="push",n.replace="replace",("function"==typeof t.default||"object"==typeof t.default&&null!==t.default)&&void 0===t.default.__esModule&&(Object.defineProperty(t.default,"__esModule",{value:!0}),Object.assign(t.default,t),e.exports=t.default)},8575:function(e,t){"use strict";function a(e){return Array.isArray(e)?e[1]:e}Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"getSegmentValue",{enumerable:!0,get:function(){return a}}),("function"==typeof t.default||"object"==typeof t.default&&null!==t.default)&&void 0===t.default.__esModule&&(Object.defineProperty(t.default,"__esModule",{value:!0}),Object.assign(t.default,t),e.exports=t.default)},6101:function(e,t){"use strict";var a,i,n,r;Object.defineProperty(t,"__esModule",{value:!0}),function(e,t){for(var a in t)Object.defineProperty(e,a,{enumerable:!0,get:t[a]})}(t,{ACTION_FAST_REFRESH:function(){return u},ACTION_NAVIGATE:function(){return o},ACTION_PREFETCH:function(){return l},ACTION_REFRESH:function(){return s},ACTION_RESTORE:function(){return d},ACTION_SERVER_ACTION:function(){return p},ACTION_SERVER_PATCH:function(){return c},PrefetchCacheEntryStatus:function(){return i},PrefetchKind:function(){return a},isThenable:function(){return f}});let s="refresh",o="navigate",d="restore",c="server-patch",l="prefetch",u="fast-refresh",p="server-action";function f(e){return e&&("object"==typeof e||"function"==typeof e)&&"function"==typeof e.then}(n=a||(a={})).AUTO="auto",n.FULL="full",n.TEMPORARY="temporary",(r=i||(i={})).fresh="fresh",r.reusable="reusable",r.expired="expired",r.stale="stale",("function"==typeof t.default||"object"==typeof t.default&&null!==t.default)&&void 0===t.default.__esModule&&(Object.defineProperty(t.default,"__esModule",{value:!0}),Object.assign(t.default,t),e.exports=t.default)},7670:function(e,t,a){"use strict";function i(e,t,a,i){return!1}Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"getDomainLocale",{enumerable:!0,get:function(){return i}}),a(1297),("function"==typeof t.default||"object"==typeof t.default&&null!==t.default)&&void 0===t.default.__esModule&&(Object.defineProperty(t.default,"__esModule",{value:!0}),Object.assign(t.default,t),e.exports=t.default)},4116:function(e,t,a){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"default",{enumerable:!0,get:function(){return w}});let i=a(8754),n=a(5893),r=i._(a(7294)),s=a(9975),o=a(2712),d=a(8547),c=a(4350),l=a(8109),u=a(4494),p=a(5716),f=a(388),g=a(7670),m=a(6220),h=a(6101),y=new Set;function v(e,t,a,i,n,r){if(r||(0,o.isLocalURL)(t)){if(!i.bypassPrefetchedCheck){let n=t+"%"+a+"%"+(void 0!==i.locale?i.locale:"locale"in e?e.locale:void 0);if(y.has(n))return;y.add(n)}(async()=>r?e.prefetch(t,n):e.prefetch(t,a,i))().catch(e=>{})}}function b(e){return"string"==typeof e?e:(0,d.formatUrl)(e)}let w=r.default.forwardRef(function(e,t){let a,i;let{href:d,as:y,children:w,prefetch:q=null,passHref:k,replace:x,shallow:I,scroll:T,locale:_,onClick:j,onMouseEnter:C,onTouchStart:S,legacyBehavior:A=!1,...P}=e;a=w,A&&("string"==typeof a||"number"==typeof a)&&(a=(0,n.jsx)("a",{children:a}));let M=r.default.useContext(u.RouterContext),z=r.default.useContext(p.AppRouterContext),R=null!=M?M:z,O=!M,E=!1!==q,L=null===q?h.PrefetchKind.AUTO:h.PrefetchKind.FULL,{href:D,as:N}=r.default.useMemo(()=>{if(!M){let e=b(d);return{href:e,as:y?b(y):e}}let[e,t]=(0,s.resolveHref)(M,d,!0);return{href:e,as:y?(0,s.resolveHref)(M,y):t||e}},[M,d,y]),B=r.default.useRef(D),F=r.default.useRef(N);A&&(i=r.default.Children.only(a));let G=A?i&&"object"==typeof i&&i.ref:t,[U,V,H]=(0,f.useIntersection)({rootMargin:"200px"}),W=r.default.useCallback(e=>{(F.current!==N||B.current!==D)&&(H(),F.current=N,B.current=D),U(e),G&&("function"==typeof G?G(e):"object"==typeof G&&(G.current=e))},[N,G,D,H,U]);r.default.useEffect(()=>{R&&V&&E&&v(R,D,N,{locale:_},{kind:L},O)},[N,D,V,_,E,null==M?void 0:M.locale,R,O,L]);let Q={ref:W,onClick(e){A||"function"!=typeof j||j(e),A&&i.props&&"function"==typeof i.props.onClick&&i.props.onClick(e),R&&!e.defaultPrevented&&function(e,t,a,i,n,s,d,c,l){let{nodeName:u}=e.currentTarget;if("A"===u.toUpperCase()&&(function(e){let t=e.currentTarget.getAttribute("target");return t&&"_self"!==t||e.metaKey||e.ctrlKey||e.shiftKey||e.altKey||e.nativeEvent&&2===e.nativeEvent.which}(e)||!l&&!(0,o.isLocalURL)(a)))return;e.preventDefault();let p=()=>{let e=null==d||d;"beforePopState"in t?t[n?"replace":"push"](a,i,{shallow:s,locale:c,scroll:e}):t[n?"replace":"push"](i||a,{scroll:e})};l?r.default.startTransition(p):p()}(e,R,D,N,x,I,T,_,O)},onMouseEnter(e){A||"function"!=typeof C||C(e),A&&i.props&&"function"==typeof i.props.onMouseEnter&&i.props.onMouseEnter(e),R&&(E||!O)&&v(R,D,N,{locale:_,priority:!0,bypassPrefetchedCheck:!0},{kind:L},O)},onTouchStart:function(e){A||"function"!=typeof S||S(e),A&&i.props&&"function"==typeof i.props.onTouchStart&&i.props.onTouchStart(e),R&&(E||!O)&&v(R,D,N,{locale:_,priority:!0,bypassPrefetchedCheck:!0},{kind:L},O)}};if((0,c.isAbsoluteUrl)(N))Q.href=N;else if(!A||k||"a"===i.type&&!("href"in i.props)){let e=void 0!==_?_:null==M?void 0:M.locale,t=(null==M?void 0:M.isLocaleDomain)&&(0,g.getDomainLocale)(N,e,null==M?void 0:M.locales,null==M?void 0:M.domainLocales);Q.href=t||(0,m.addBasePath)((0,l.addLocale)(N,e,null==M?void 0:M.defaultLocale))}return A?r.default.cloneElement(i,Q):(0,n.jsx)("a",{...P,...Q,children:a})});("function"==typeof t.default||"object"==typeof t.default&&null!==t.default)&&void 0===t.default.__esModule&&(Object.defineProperty(t.default,"__esModule",{value:!0}),Object.assign(t.default,t),e.exports=t.default)},388:function(e,t,a){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"useIntersection",{enumerable:!0,get:function(){return d}});let i=a(7294),n=a(460),r="function"==typeof IntersectionObserver,s=new Map,o=[];function d(e){let{rootRef:t,rootMargin:a,disabled:d}=e,c=d||!r,[l,u]=(0,i.useState)(!1),p=(0,i.useRef)(null),f=(0,i.useCallback)(e=>{p.current=e},[]);return(0,i.useEffect)(()=>{if(r){if(c||l)return;let e=p.current;if(e&&e.tagName)return function(e,t,a){let{id:i,observer:n,elements:r}=function(e){let t;let a={root:e.root||null,margin:e.rootMargin||""},i=o.find(e=>e.root===a.root&&e.margin===a.margin);if(i&&(t=s.get(i)))return t;let n=new Map;return t={id:a,observer:new IntersectionObserver(e=>{e.forEach(e=>{let t=n.get(e.target),a=e.isIntersecting||e.intersectionRatio>0;t&&a&&t(a)})},e),elements:n},o.push(a),s.set(a,t),t}(a);return r.set(e,t),n.observe(e),function(){if(r.delete(e),n.unobserve(e),0===r.size){n.disconnect(),s.delete(i);let e=o.findIndex(e=>e.root===i.root&&e.margin===i.margin);e>-1&&o.splice(e,1)}}}(e,e=>e&&u(e),{root:null==t?void 0:t.current,rootMargin:a})}else if(!l){let e=(0,n.requestIdleCallback)(()=>u(!0));return()=>(0,n.cancelIdleCallback)(e)}},[c,a,t,l,p.current]),[f,l,(0,i.useCallback)(()=>{u(!1)},[])]}("function"==typeof t.default||"object"==typeof t.default&&null!==t.default)&&void 0===t.default.__esModule&&(Object.defineProperty(t.default,"__esModule",{value:!0}),Object.assign(t.default,t),e.exports=t.default)},4439:function(e,t,a){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e,t){for(var a in t)Object.defineProperty(e,a,{enumerable:!0,get:t[a]})}(t,{ServerInsertedHTMLContext:function(){return n},useServerInsertedHTML:function(){return r}});let i=a(1757)._(a(7294)),n=i.default.createContext(null);function r(e){let t=(0,i.useContext)(n);t&&t(e)}},8011:function(e,t,a){"use strict";var i=a(5893);a(7294),t.Z=e=>(0,i.jsx)("svg",{xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 16 16",...e,children:(0,i.jsx)("rect",{width:12,height:12,x:2,y:2,rx:3,transform:"rotate(-45 8 8)"})})},5956:function(e,t,a){"use strict";var i=a(5893);a(7294),t.Z=e=>(0,i.jsx)("svg",{xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 16 16",...e,children:(0,i.jsx)("circle",{cx:8,cy:8,r:6})})},9327:function(e,t,a){"use strict";var i=a(5893);a(7294),t.Z=e=>(0,i.jsx)("svg",{xmlns:"http://www.w3.org/2000/svg",...e,children:(0,i.jsx)("path",{d:"m.247 10.212 5.02-8.697a2 2 0 0 1 3.465 0l5.021 8.697a2 2 0 0 1-1.732 3H1.98a2 2 0 0 1-1.732-3z"})})},8699:function(e,t,a){"use strict";var i=a(5893);a(7294),t.Z=e=>(0,i.jsx)("svg",{xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 22 22",...e,children:(0,i.jsx)("path",{fillRule:"evenodd",d:"m18.7 1.4-7.68 7.73-7.67-7.72c-.54-.54-1.4-.54-1.89 0-.54.54-.54 1.41 0 1.89l7.67 7.73L1.4 18.7c-.54.54-.54 1.41 0 1.89.54.54 1.41.54 1.89 0l7.73-7.68 7.68 7.68c.54.54 1.41.54 1.89 0 .49-.54.54-1.41 0-1.89l-7.68-7.68 7.68-7.67c.54-.54.54-1.4 0-1.89-.48-.54-1.35-.54-1.89-.06"})})},5917:function(e,t,a){"use strict";var i=a(5893);a(7294),t.Z=e=>(0,i.jsx)("svg",{xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 22 22",...e,children:(0,i.jsx)("path",{fillRule:"evenodd",d:"M5.67 1C4.22 1 3 2.22 3 3.67v15.11C3 20.01 4 21 5.22 21h13.11c.35 0 .67-.32.67-.67V5.67c0-.39-.29-.67-.67-.67C17.69 5 17 4.31 17 3.67s.69-1.33 1.33-1.33c.35 0 .67-.31.67-.67S18.69 1 18.33 1H5.66Zm0 1.33h10.37c-.23.39-.37.85-.37 1.33s.14.94.37 1.33H5.67c-.64 0-1.33-.69-1.33-1.33s.69-1.33 1.33-1.33M4.34 5.96c.39.23.85.37 1.33.37h12v13.33H5.22a.88.88 0 0 1-.89-.86V5.97Zm2.44 2.81c-.37.01-.65.32-.64.69.01.35.29.63.64.64h8.44c.37-.01.65-.32.64-.69a.66.66 0 0 0-.64-.64zm0 3.56a.67.67 0 0 0 0 1.34h8.44a.67.67 0 0 0 0-1.34zm0 3.56c-.37.01-.65.32-.64.69.01.35.29.63.64.64h8.44c.37-.01.65-.32.64-.69a.66.66 0 0 0-.64-.64z"})})},1429:function(e,t,a){"use strict";var i=a(5893);a(7294),t.Z=e=>(0,i.jsx)("svg",{xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 22 22",...e,children:(0,i.jsx)("path",{fillRule:"evenodd",d:"M9.71.38h-.64v2.61C4.22 3.32.38 7.36.38 12.29s4.19 9.33 9.33 9.33 8.97-3.84 9.3-8.69h2.61v-.64C21.62 5.72 16.28.38 9.71.38m0 19.95c-4.44 0-8.05-3.61-8.05-8.05s3.26-7.69 7.4-8.02v8.66h8.66c-.33 4.14-3.8 7.4-8.02 7.4Zm9.33-8.69h-8.69V1.69c5.34.32 9.63 4.61 9.95 9.96h-1.27Z"})})},6611:function(e,t,a){"use strict";var i=a(5893);a(7294),t.Z=e=>(0,i.jsxs)("svg",{xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 22 22",...e,children:[(0,i.jsx)("path",{d:"M11 22C4.9 22 0 17 0 11S4.9 0 11 0c6 0 11 4.9 11 11s-5 11-11 11m0-20.5c-5.2 0-9.5 4.2-9.5 9.5s4.2 9.5 9.5 9.5 9.5-4.2 9.5-9.5-4.3-9.5-9.5-9.5"}),(0,i.jsx)("path",{fillRule:"evenodd",d:"M11 16.65c-.7 0-1.2-.5-1.2-1.2s.6-1.2 1.2-1.2 1.2.6 1.2 1.2-.5 1.2-1.2 1.2m2.8-6.9c-.1.2-.3.4-.4.5l-.4.4c-.2.1-.3.3-.4.4l-.3.3c-.2.3-.3.6-.3 1v.7h-1.8v-1c0-.3 0-.6.2-.9s.4-.6.7-.8l1.1-1.1c.2-.3.4-.6.4-1s-.1-.7-.4-.9-.6-.4-1-.4-.7.1-1 .4-.4.6-.5 1h-2c.1-.8.5-1.6 1.1-2.2.7-.5 1.5-.8 2.3-.8s1.6.2 2.3.8q.9.75.9 2.1c0 .5-.2 1-.5 1.5"})]})},3018:function(e,t,a){"use strict";var i=a(5893);a(7294),t.Z=e=>(0,i.jsx)("svg",{xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 22 22",...e,children:(0,i.jsx)("path",{fillRule:"evenodd",d:"m20.6 18.31-4.01-4.01c2.44-3.37 2.15-8.11-.89-11.14A8.55 8.55 0 0 0 9.61.64c-2.28 0-4.48.91-6.09 2.52-3.36 3.36-3.36 8.82 0 12.18a8.55 8.55 0 0 0 6.09 2.52c1.78 0 3.55-.55 5.05-1.64l4.01 4.01c.26.26.61.4.96.4.75 0 1.36-.61 1.36-1.36 0-.36-.14-.71-.4-.96ZM4.87 13.99a6.71 6.71 0 0 1 0-9.49 6.7 6.7 0 0 1 4.74-1.97c1.79 0 3.48.7 4.74 1.97a6.71 6.71 0 0 1 0 9.49 6.7 6.7 0 0 1-4.74 1.97c-1.78 0-3.49-.7-4.74-1.97"})})},1087:function(e,t,a){"use strict";var i=a(5893);a(7294),t.Z=e=>(0,i.jsx)("svg",{xmlns:"http://www.w3.org/2000/svg",xmlSpace:"preserve",viewBox:"0 0 30 30",...e,children:(0,i.jsx)("path",{d:"M23 3h-6a2 2 0 0 0-1.414.586l-12 12a2 2 0 0 0 0 2.828l8 8a2 2 0 0 0 2.828 0l12-12A2 2 0 0 0 27 13V7a4 4 0 0 0-4-4m0 6a2 2 0 1 1-.001-3.999A2 2 0 0 1 23 9"})})},3291:function(e,t,a){"use strict";a.d(t,{ln:function(){return n},I8:function(){return r},rj:function(){return s},yx:function(){return o},Tp:function(){return d},bL:function(){return c},zU:function(){return l},V7:function(){return u},CR:function(){return p},PC:function(){return f}});var i=a(5893);a(7294);var n=e=>(0,i.jsx)("svg",{xmlns:"http://www.w3.org/2000/svg",fill:"none",viewBox:"0 0 24 24",...e,children:(0,i.jsx)("path",{d:"M12.846 5.211a1 1 0 0 0-1.691 0L2.783 18.466A1 1 0 0 0 3.63 20H20.37a1 1 0 0 0 .846-1.534zM9.464 4.143c1.177-1.864 3.895-1.864 5.073 0l8.37 13.255C24.17 19.396 22.735 22 20.372 22H3.63c-2.363 0-3.798-2.604-2.537-4.602zM13 17a1 1 0 1 1-2 0 1 1 0 0 1 2 0m-2.306-6.836.724 4.343a.59.59 0 0 0 1.164 0l.724-4.343A1 1 0 0 0 12.32 9h-.64a1 1 0 0 0-.986 1.164",clipRule:"evenodd"})});a(8011),a(5956),a(9327),a(8699);var r=e=>(0,i.jsxs)("svg",{xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 24 24",...e,children:[(0,i.jsx)("path",{d:"m18.988 2.012 3 3L19.701 7.3l-3-3zM8 16h3l7.287-7.287-3-3L8 13z"}),(0,i.jsx)("path",{d:"M19 19H8.158c-.026 0-.053.01-.079.01-.033 0-.066-.009-.1-.01H5V5h6.847l2-2H5c-1.103 0-2 .896-2 2v14c0 1.104.897 2 2 2h14a2 2 0 0 0 2-2v-8.668l-2 2z"})]});a(5917),a(1429),a(6611),a(3018);var s=e=>(0,i.jsx)("svg",{xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 320 512",...e,children:(0,i.jsx)("path",{d:"m279.14 288 14.22-92.66h-88.91v-60.13c0-25.35 12.42-50.06 52.24-50.06h40.42V6.26S260.43 0 225.36 0c-73.22 0-121.08 44.38-121.08 124.72v70.62H22.89V288h81.39v224h100.17V288z"})}),o=e=>(0,i.jsx)("svg",{xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 496 512",...e,children:(0,i.jsx)("path",{d:"M165.9 397.4c0 2-2.3 3.6-5.2 3.6-3.3.3-5.6-1.3-5.6-3.6 0-2 2.3-3.6 5.2-3.6 3-.3 5.6 1.3 5.6 3.6m-31.1-4.5c-.7 2 1.3 4.3 4.3 4.9 2.6 1 5.6 0 6.2-2s-1.3-4.3-4.3-5.2c-2.6-.7-5.5.3-6.2 2.3m44.2-1.7c-2.9.7-4.9 2.6-4.6 4.9.3 2 2.9 3.3 5.9 2.6 2.9-.7 4.9-2.6 4.6-4.6-.3-1.9-3-3.2-5.9-2.9M244.8 8C106.1 8 0 113.3 0 252c0 110.9 69.8 205.8 169.5 239.2 12.8 2.3 17.3-5.6 17.3-12.1 0-6.2-.3-40.4-.3-61.4 0 0-70 15-84.7-29.8 0 0-11.4-29.1-27.8-36.6 0 0-22.9-15.7 1.6-15.4 0 0 24.9 2 38.6 25.8 21.9 38.6 58.6 27.5 72.9 20.9 2.3-16 8.8-27.1 16-33.7-55.9-6.2-112.3-14.3-112.3-110.5 0-27.5 7.6-41.3 23.6-58.9-2.6-6.5-11.1-33.3 2.6-67.9 20.9-6.5 69 27 69 27 20-5.6 41.5-8.5 62.8-8.5s42.8 2.9 62.8 8.5c0 0 48.1-33.6 69-27 13.7 34.7 5.2 61.4 2.6 67.9 16 17.7 25.8 31.5 25.8 58.9 0 96.5-58.9 104.2-114.8 110.5 9.2 7.9 17 22.9 17 46.4 0 33.7-.3 75.4-.3 83.6 0 6.5 4.6 14.4 17.3 12.1C428.2 457.8 496 362.9 496 252 496 113.3 383.5 8 244.8 8M97.2 352.9c-1.3 1-1 3.3.7 5.2 1.6 1.6 3.9 2.3 5.2 1 1.3-1 1-3.3-.7-5.2-1.6-1.6-3.9-2.3-5.2-1m-10.8-8.1c-.7 1.3.3 2.9 2.3 3.9 1.6 1 3.6.7 4.3-.7.7-1.3-.3-2.9-2.3-3.9-2-.6-3.6-.3-4.3.7m32.4 35.6c-1.6 1.3-1 4.3 1.3 6.2 2.3 2.3 5.2 2.6 6.5 1 1.3-1.3.7-4.3-1.3-6.2-2.2-2.3-5.2-2.6-6.5-1m-11.4-14.7c-1.6 1-1.6 3.6 0 5.9s4.3 3.3 5.6 2.3c1.6-1.3 1.6-3.9 0-6.2-1.4-2.3-4-3.3-5.6-2"})}),d=e=>(0,i.jsx)("svg",{xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 496 512",...e,children:(0,i.jsx)("path",{d:"m487.75 200.06-.7-1.78-67.5-176.19a17.63 17.63 0 0 0-6.95-8.37c-6.44-4-14.69-3.55-20.66 1.11a18.07 18.07 0 0 0-5.99 9.09l-45.58 139.46H155.79L110.2 23.93c-.99-3.59-3.09-6.78-5.99-9.12a18.08 18.08 0 0 0-20.66-1.11 17.8 17.8 0 0 0-6.95 8.37L8.96 198.18l-.67 1.78c-19.96 52.17-3.01 111.25 41.58 144.89l.23.18.62.44 102.84 77.01 50.88 38.51 30.99 23.4a20.84 20.84 0 0 0 25.21 0l30.99-23.4 50.88-38.51L445.97 345l.26-.21c44.49-33.64 61.41-92.62 41.53-144.73Z"})}),c=e=>(0,i.jsx)("svg",{xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 448 512",...e,children:(0,i.jsx)("path",{d:"M224.1 141c-63.6 0-114.9 51.3-114.9 114.9s51.3 114.9 114.9 114.9S339 319.5 339 255.9 287.7 141 224.1 141m0 189.6c-41.1 0-74.7-33.5-74.7-74.7s33.5-74.7 74.7-74.7 74.7 33.5 74.7 74.7-33.6 74.7-74.7 74.7m146.4-194.3c0 14.9-12 26.8-26.8 26.8-14.9 0-26.8-12-26.8-26.8s12-26.8 26.8-26.8 26.8 12 26.8 26.8m76.1 27.2c-1.7-35.9-9.9-67.7-36.2-93.9-26.2-26.2-58-34.4-93.9-36.2-37-2.1-147.9-2.1-184.9 0-35.8 1.7-67.6 9.9-93.9 36.1s-34.4 58-36.2 93.9c-2.1 37-2.1 147.9 0 184.9 1.7 35.9 9.9 67.7 36.2 93.9s58 34.4 93.9 36.2c37 2.1 147.9 2.1 184.9 0 35.9-1.7 67.7-9.9 93.9-36.2 26.2-26.2 34.4-58 36.2-93.9 2.1-37 2.1-147.8 0-184.8M398.8 388c-7.8 19.6-22.9 34.7-42.6 42.6-29.5 11.7-99.5 9-132.1 9s-102.7 2.6-132.1-9c-19.6-7.8-34.7-22.9-42.6-42.6-11.7-29.5-9-99.5-9-132.1s-2.6-102.7 9-132.1c7.8-19.6 22.9-34.7 42.6-42.6 29.5-11.7 99.5-9 132.1-9s102.7-2.6 132.1 9c19.6 7.8 34.7 22.9 42.6 42.6 11.7 29.5 9 99.5 9 132.1s2.7 102.7-9 132.1"})}),l=e=>(0,i.jsx)("svg",{xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 448 512",...e,children:(0,i.jsx)("path",{d:"M100.28 448H7.4V148.9h92.88zM53.79 108.1C24.09 108.1 0 83.5 0 53.8a53.79 53.79 0 0 1 107.58 0c0 29.7-24.1 54.3-53.79 54.3M447.9 448h-92.68V302.4c0-34.7-.7-79.2-48.29-79.2-48.29 0-55.69 37.7-55.69 76.7V448h-92.78V148.9h89.08v40.8h1.3c12.4-23.5 42.69-48.3 87.88-48.3 94 0 111.28 61.9 111.28 142.3V448z"})}),u=e=>(0,i.jsx)("svg",{xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 16 16",...e,children:(0,i.jsx)("path",{d:"M12.6.75h2.454l-5.36 6.142L16 15.25h-4.937l-3.867-5.07-4.425 5.07H.316l5.733-6.57L0 .75h5.063l3.495 4.633L12.601.75Zm-.86 13.028h1.36L4.323 2.145H2.865z"})}),p=e=>(0,i.jsx)("svg",{xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 384 512",...e,children:(0,i.jsx)("path",{d:"M162.7 210c-1.8 3.3-25.2 44.4-70.1 123.5-4.9 8.3-10.8 12.5-17.7 12.5H9.8c-7.7 0-12.1-7.5-8.5-14.4l69-121.3q.3 0 0-.3l-43.9-75.6c-4.3-7.8.3-14.1 8.5-14.1H100c7.3 0 13.3 4.1 18 12.2zM382.6 46.1l-144 253v.3L330.2 466c3.9 7.1.2 14.1-8.5 14.1h-65.2c-7.6 0-13.6-4-18-12.2l-92.4-168.5c3.3-5.8 51.5-90.8 144.8-255.2 4.6-8.1 10.4-12.2 17.5-12.2h65.7c8 0 12.3 6.7 8.5 14.1"})}),f=e=>(0,i.jsx)("svg",{xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 576 512",...e,children:(0,i.jsx)("path",{d:"M549.655 124.083c-6.281-23.65-24.787-42.276-48.284-48.597C458.781 64 288 64 288 64S117.22 64 74.629 75.486c-23.497 6.322-42.003 24.947-48.284 48.597-11.412 42.867-11.412 132.305-11.412 132.305s0 89.438 11.412 132.305c6.281 23.65 24.787 41.5 48.284 47.821C117.22 448 288 448 288 448s170.78 0 213.371-11.486c23.497-6.321 42.003-24.171 48.284-47.821 11.412-42.867 11.412-132.305 11.412-132.305s0-89.438-11.412-132.305m-317.51 213.508V175.185l142.739 81.205z"})});a(1087)},9284:function(e,t,a){"use strict";a.d(t,{PO:function(){return p},f6:function(){return m},Hr:function(){return x},r0:function(){return y},L6:function(){return h},H1:function(){return j},rV:function(){return C},kk:function(){return _},uW:function(){return g},id:function(){return c},OW:function(){return f},VM:function(){return T},ie:function(){return I},pS:function(){return w},VU:function(){return b},TX:function(){return v},OY:function(){return u},dv:function(){return q},NJ:function(){return k},mE:function(){return l},B4:function(){return P},Y6:function(){return A},J7:function(){return S}});var i=JSON.parse('{"yN":["2025-01-08"],"pJ":["API-design","C","C++","IDE","IoT","IoT-security","agile","agile-practices","api-design","api-specification","architecture","architecture-diagrams","architecture-evaluation","architecture-pattern","asynchronous","authentication","automation","best-practices","cloud","cloud-computing","code-editor","code-quality","coding-guidelines","coding-standard","coding-standards","collaboration","collaborative-design","compiler","concurrency","configuration","containerization","cost-benefit-analysis","cost-efficiency","cross-platform","cybersecurity-standards","data-fetching","data-interchange","data-management","data-serialization","decision-making","design","design-pattern","design-patterns","design-principle","developer-productivity","devops","diagramming","distributed-systems","documentation","domain-driven-design","edge-computing","editor","efficiency","embedded-database","embedded-systems","enterprise-architecture","evaluation","event-driven","event-driven-architecture","flexibility","framework","high-level","integration-patterns","internet-standards","interoperability","knowledge-management","lightweight-database","lightweight-format","linux","markup-language","memory-safety","messaging-protocol","microservices","microsoft-ecosystem","modeling","networking","object-oriented","open-source","performance","performance-critical","programming-language","project-management","python","reactive-programming","real-time-data","real-time-operating-system","real-time-processing","remote-procedure-call","resilience","safety-critical","scalability","security","serialization","service-oriented-architecture","simplicity","software-architecture","software-design","software-design-principle","software-development","software-quality","standards","static-analysis","system-architecture","systems-programming","team-collaboration","testing","versatile","version-control","visualization","web-architecture","workflow-optimization"],"ev":[{"id":"adrs","release":"2025-01-08","title":"ADRs","ring":"adopt","quadrant":"methods-and-patterns","body":"<p>Architectural Decision Records (ADRs) are a proven method for capturing important architectural decisions made during a project. By documenting these decisions, teams can ensure that the rationale behind key architectural choices is recorded for future reference. This practice enhances communication among team members and stakeholders, providing a clear historical context that aids in understanding the evolution of a system&#39;s architecture.</p>\\n<p>ADRs are particularly useful in agile environments where decisions are made frequently and need to be communicated efficiently. They help in maintaining a lightweight and accessible record of decisions, which is crucial for onboarding new team members or revisiting past decisions when the context or requirements change.</p>\\n<p>The adoption of ADRs is recommended in the methods-and-patterns quadrant as it reflects a mature approach to managing architectural complexity through structured documentation. As teams increasingly recognize the value of maintaining decision logs, ADRs have become a standard practice in many organizations, emphasizing their relevance in the adopt ring.</p>\\n","featured":true,"flag":"default","tags":["documentation","decision-making"],"position":[465,251]},{"id":"agile","release":"2025-01-08","title":"Agile","ring":"adopt","quadrant":"methods-and-patterns","body":"<p>Agile is a set of principles and practices for software development that emphasizes flexibility, collaboration, and customer satisfaction. It involves iterative development, where requirements and solutions evolve through the collaborative efforts of cross-functional teams. Agile methodologies, such as Scrum and Kanban, focus on delivering small, incremental changes quickly, allowing for frequent reassessment and adjustment. This approach enhances the ability to respond to change effectively, making it a valuable method in dynamic and complex environments. In the methods-and-patterns quadrant, Agile is placed in the adopt ring due to its widespread acceptance and proven success in improving project outcomes and fostering innovation across various industries.</p>\\n","featured":true,"flag":"default","tags":["software-development","project-management"],"position":[551,300]},{"id":"arc42","release":"2025-01-08","title":"arc42","ring":"adopt","quadrant":"methods-and-patterns","body":"<p>arc42 is a template for documenting software and system architectures. It is designed to help architects efficiently communicate design decisions and structural concepts without being overly prescriptive. The template is structured to cover all relevant aspects of an architecture, including requirements, constraints, quality goals, and the rationale behind architectural decisions.</p>\\n<p>arc42 is particularly useful for ensuring consistency and clarity in architectural documentation, making it easier for teams to understand and work with complex systems. Given its flexibility and comprehensive nature, it has become a widely adopted standard in the industry for architecture documentation, which is why it resides in the &quot;adopt&quot; ring.</p>\\n<p>In the &quot;methods-and-patterns&quot; quadrant, arc42 is relevant because it provides a structured approach to documenting architectures, which is an essential part of the architectural process. By adopting arc42, organizations can improve communication across teams and stakeholders, facilitating better understanding and collaboration in software development projects.</p>\\n","featured":true,"flag":"default","tags":["software-architecture","documentation"],"position":[577,360]},{"id":"asyncapi","release":"2025-01-08","title":"AsyncAPI","ring":"adopt","quadrant":"methods-and-patterns","body":"<p>AsyncAPI is an open-source initiative that provides a specification for defining event-driven architectures. Similar to how OpenAPI specifies RESTful APIs, AsyncAPI focuses on asynchronous APIs, allowing developers to standardize the communication between microservices and other components in distributed systems. It is highly useful for creating a clear, machine-readable contract for services that utilize messaging systems such as Kafka, MQTT, or RabbitMQ.</p>\\n<p>The relevance of AsyncAPI in the methods-and-patterns quadrant stems from its ability to enhance the design and documentation processes of complex, event-driven systems. By adopting AsyncAPI, organizations can improve collaboration between different teams, streamline integration processes, and ensure consistency across their asynchronous communication channels. Its adoption is growing as event-driven architectures become more prevalent in systems requiring scalable and resilient communication patterns.</p>\\n","featured":true,"flag":"default","tags":["event-driven-architecture","api-specification"],"position":[462,303]},{"id":"barr_group_coding_guidelines","release":"2025-01-08","title":"Barr Group Coding Guidelines","ring":"adopt","quadrant":"methods-and-patterns","body":"<p>The Barr Group Coding Guidelines are a set of coding standards specifically designed for the development of embedded system software. These guidelines emphasize the importance of writing clear, maintainable, and reliable code to ensure the safety and efficiency of embedded systems, which are often used in critical applications like automotive, medical devices, and industrial control systems.</p>\\n<p>Adopting the Barr Group Coding Guidelines is beneficial as they provide best practices for avoiding common programming pitfalls and enhancing code quality. Key areas of focus include naming conventions, commenting, and the use of assertions and error handling. By following these guidelines, developers can produce more robust and less error-prone software, which is crucial in environments where failure could lead to significant harm or damage.</p>\\n<p>The relevance of these guidelines in the &quot;methods-and-patterns&quot; quadrant stems from their role in shaping the way developers think and approach coding in embedded systems. In the &quot;adopt&quot; ring, they represent a mature and widely-accepted practice that can significantly improve the quality and reliability of software in the embedded systems domain.</p>\\n","featured":true,"flag":"default","tags":["embedded-systems","safety-critical"],"position":[519,272]},{"id":"c","release":"2025-01-08","title":"C","ring":"adopt","quadrant":"languages-and-frameworks","body":"<p>C is a general-purpose, procedural programming language that has been a cornerstone of software development since its creation in the early 1970s. Known for its efficiency and control over system resources, C is particularly useful for system programming, such as operating systems, device drivers, and embedded systems. Its syntax and structure have influenced many other languages, making it a foundational language for software engineers.</p>\\n<p>In the languages-and-frameworks quadrant, C&#39;s relevance is undeniable due to its widespread adoption for performance-critical applications. The &quot;adopt&quot; ring reflects its mature status and the industry&#39;s continued reliance on it for developing robust, high-performance systems. Despite the emergence of higher-level languages, C remains a vital tool for developers needing fine-grained control over hardware and resources. Its ongoing utility in systems programming and embedded development underscores its enduring importance in the tech landscape.</p>\\n","featured":true,"flag":"default","tags":["systems-programming","embedded-systems","performance"],"position":[296,273]},{"id":"c#","release":"2025-01-08","title":"C#","ring":"adopt","quadrant":"languages-and-frameworks","body":"<p>C# is a modern, object-oriented programming language developed by Microsoft as part of its .NET initiative. It is designed for building a wide range of applications, from web and mobile apps to enterprise software and cloud-based solutions. C# is known for its ease of use, safety, and versatility, making it a popular choice among developers.</p>\\n<p>In the &quot;languages-and-frameworks&quot; quadrant, C# stands out due to its robust feature set, including strong typing, automatic memory management, and extensive libraries. It is particularly well-suited for developing applications within the Microsoft ecosystem, but it also supports cross-platform development with the advent of .NET Core and .NET 5/6, allowing applications to run on Windows, Linux, and macOS.</p>\\n<p>Adopting C# is recommended because of its mature tooling, strong community support, and continuous evolution aligned with modern software development needs. Its integration with Azure and other cloud services further enhances its relevance in today&#39;s technology landscape, making it a strategic choice for organizations looking to build scalable, maintainable, and efficient applications.</p>\\n","featured":true,"flag":"default","tags":["object-oriented","cross-platform","microsoft-ecosystem"],"position":[235,360]},{"id":"c++","release":"2025-01-08","title":"C++","ring":"adopt","quadrant":"languages-and-frameworks","body":"<p>C++ is a general-purpose programming language known for its high performance and efficiency. It supports object-oriented, procedural, and generic programming, making it versatile for a wide range of applications. C++ is particularly useful for systems programming, game development, and applications requiring real-time processing or resource-constrained environments, such as embedded systems. Its ability to directly manipulate hardware resources, coupled with extensive libraries and frameworks, makes it an essential language in areas where performance is critical.</p>\\n<p>In the context of languages and frameworks, C++ remains highly relevant as it continually evolves with new standards, such as C++20 and the upcoming C++23, which introduce modern features and improvements. Its adoption is crucial for projects where performance and fine-grained control over system resources are paramount, supporting complex systems and large-scale applications with high reliability and efficiency.</p>\\n","featured":true,"flag":"default","tags":["object-oriented","performance-critical","systems-programming"],"position":[335,240]},{"id":"c4","release":"2025-01-08","title":"C4","ring":"adopt","quadrant":"methods-and-patterns","body":"<p>The C4 model is a framework for visualizing the architecture of software systems. It provides a set of hierarchical diagrams, namely Context, Container, Component, and Code, that help teams understand and communicate the structure and design of their software. By using these diagrams, teams can ensure that everyone—from developers to stakeholders—has a clear and consistent understanding of how the system is structured and how its components interact.</p>\\n<p>C4 is particularly useful because it strikes a balance between simplicity and detail, making it easier for teams to maintain and use over time compared to more complex architectural frameworks. Its relevance in the &quot;methods-and-patterns&quot; quadrant reflects its role as a best practice for documenting and designing software architecture. The &quot;adopt&quot; ring indicates that it is a mature and widely accepted approach in the industry, recommended for use in most projects to enhance clarity and communication.</p>\\n","featured":true,"flag":"default","tags":["software-architecture","documentation","modeling"],"position":[543,362]},{"id":"c4-model","release":"2025-01-08","title":"C4 Model","ring":"adopt","quadrant":"methods-and-patterns","body":"<p>C4 Model provides a simple, hierarchical way to visualize architecture.</p>\\n","featured":true,"flag":"default","tags":["architecture"],"position":[494,247]},{"id":"certc","release":"2025-01-08","title":"CertC","ring":"assess","quadrant":"languages-and-frameworks","body":"<p>CertC is a programming language extension and a set of guidelines designed to enhance the safety and reliability of C code, particularly in safety-critical and embedded system environments. Its main purpose is to address common pitfalls in C programming, such as buffer overflows and undefined behaviors, which can lead to catastrophic failures in critical systems. By providing stricter rules and additional checks, CertC helps developers write more robust and predictable code.</p>\\n<p>The relevance of CertC in the languages-and-frameworks quadrant is significant due to its focus on improving code safety in environments where errors can have severe consequences. In the assess ring, it indicates that while it shows promise and is being explored for its potential benefits, widespread adoption may still be forthcoming as the industry evaluates its integration into existing workflows and toolchains.</p>\\n","featured":true,"flag":"default","tags":["safety-critical","embedded-systems"],"position":[286,113]},{"id":"cicd","release":"2025-01-08","title":"CICD","ring":"adopt","quadrant":"methods-and-patterns","body":"<p>Continuous Integration and Continuous Deployment (CICD) is a set of practices aimed at improving the software development lifecycle by automating the process of integrating code changes and deploying them to production. It is particularly useful for ensuring that software is consistently built, tested, and deployed, reducing the risk of human error and speeding up the delivery of new features and bug fixes.</p>\\n<p>In the &quot;methods-and-patterns&quot; quadrant, CICD represents a best practice pattern that integrates seamlessly into modern DevOps strategies. It is categorized under the &quot;adopt&quot; ring, indicating that it is a mature and widely accepted practice that organizations should incorporate into their development processes to improve efficiency and collaboration between development and operations teams.</p>\\n<p>By automating the build, test, and deployment phases, CICD helps teams to detect issues early, reduce integration problems, and deliver higher quality software. This approach aligns with agile methodologies, enabling iterative development and continuous feedback, crucial for maintaining competitive advantage in fast-paced markets.</p>\\n","featured":true,"flag":"default","tags":["automation","devops","software-development"],"position":[408,357]},{"id":"cloudevents","release":"2025-01-08","title":"CloudEvents","ring":"assess","quadrant":"platforms-and-operations","body":"<p>CloudEvents is a specification for describing event data in a common way, aiming to simplify event-driven systems and improve interoperability between different services and platforms. By standardizing the structure and metadata of events, CloudEvents enables easier integration and processing across diverse environments, reducing the complexity of event-driven architectures.</p>\\n<p>In the platforms-and-operations quadrant, CloudEvents is significant as it facilitates seamless communication and coordination between distributed systems, cloud services, and microservices. As organizations increasingly adopt cloud-native architectures and event-driven patterns, assessing CloudEvents can provide insights into its potential to standardize event handling and enhance the scalability and resilience of applications.</p>\\n<p>CloudEvents is positioned in the &quot;assess&quot; ring because it is gaining traction and shows promise, but organizations should evaluate its integration and performance in their specific use cases before broader adoption.</p>\\n","featured":true,"flag":"default","tags":["event-driven","interoperability"],"position":[143,542]},{"id":"coverity","release":"2025-01-08","title":"Coverity","ring":"assess","quadrant":"tools","body":"<p>Coverity is a static analysis tool used for identifying defects in software codebases. It is particularly useful for detecting a wide range of issues such as security vulnerabilities, resource leaks, and concurrency defects before they manifest in production environments. Coverity is relevant in the &quot;tools&quot; quadrant because it provides developers and development teams with a robust mechanism to improve code quality and maintainability through automated code review processes. In the &quot;assess&quot; ring, it reflects its growing importance as organizations increasingly prioritize integrating security and quality assurance early in the software development lifecycle, aligning with practices like DevSecOps. As the landscape of software development continues to evolve, tools like Coverity are integral in ensuring software reliability and security compliance.</p>\\n","featured":true,"flag":"default","tags":["static-analysis","code-quality","security"],"position":[591,645]},{"id":"cqrs","release":"2025-01-08","title":"CQRS","ring":"assess","quadrant":"methods-and-patterns","body":"<p>Command Query Responsibility Segregation (CQRS) is a design pattern that separates the read and write operations of a data store into distinct models. This separation is useful in systems that require scalability and have complex business logic, as it allows for optimized query performance and simplifies the management of complex domain logic. CQRS is particularly relevant in the methods-and-patterns quadrant because it provides a strategic approach to handling data operations in software architecture. It is placed in the assess ring, indicating that while it shows promise and can address specific architectural challenges, it should be evaluated carefully for suitability within the context of a project&#39;s requirements. CQRS can be especially beneficial when combined with Event Sourcing to provide a complete history of changes to the system’s state.</p>\\n","featured":true,"flag":"default","tags":["architecture","design-pattern"],"position":[698,272]},{"id":"di\xe1taxis","release":"2025-01-08","title":"Di\xe1taxis","ring":"adopt","quadrant":"methods-and-patterns","body":"<p>Di\xe1taxis is a systematic framework for organizing and writing technical documentation, aimed at improving the clarity and usability of documentation by categorizing content into four distinct types: tutorials, how-to guides, technical references, and explanations. This method helps writers and developers create comprehensive and user-friendly documentation, ensuring that users can find the right information at the right time.</p>\\n<p>By adopting Di\xe1taxis, organizations can enhance the effectiveness of their documentation, leading to better user experiences and reduced support costs. Its relevance in the methods-and-patterns quadrant lies in its structured approach to knowledge management, making it an essential practice for teams looking to innovate and optimize their documentation processes. As the industry increasingly recognizes the importance of good documentation, Di\xe1taxis stands out as a best practice, thus earning its place in the adopt ring.</p>\\n","featured":true,"flag":"default","tags":["documentation","knowledge-management"],"position":[517,328]},{"id":"docker","release":"2025-01-08","title":"Docker","ring":"adopt","quadrant":"platforms-and-operations","body":"<p>Docker is a platform that allows developers to automate the deployment of applications inside lightweight, portable containers. These containers include everything needed to run an application, which ensures consistency across different development and production environments. Docker is particularly useful for streamlining development workflows and simplifying operations by providing a consistent environment for running applications.</p>\\n<p>In the platforms-and-operations quadrant, Docker plays a crucial role in modern DevOps practices by enabling continuous integration and continuous deployment (CI/CD) pipelines. It facilitates microservices architecture by allowing developers to break down applications into smaller, manageable services that can be developed, tested, and deployed independently.</p>\\n<p>Docker has reached the adopt ring due to its widespread acceptance and proven benefits in enhancing efficiency, scalability, and reliability within software development processes. Its relevance continues to grow as more organizations embrace cloud-native development and seek to modernize their application delivery processes.</p>\\n","featured":true,"flag":"default","tags":["containerization","devops","microservices"],"position":[323,561]},{"id":"docs_as_code","release":"2025-01-08","title":"Docs as code","ring":"adopt","quadrant":"methods-and-patterns","body":"<p>Docs as code is a methodology that applies software development practices to documentation. This approach involves using tools such as version control systems (e.g., Git) to manage and collaborate on documentation in the same way developers work on code. It encourages the use of plain text formats, such as Markdown or reStructuredText, which can be easily tracked, reviewed, and modified.</p>\\n<p>This method is particularly useful as it promotes collaboration between developers and technical writers, ensuring documentation is up-to-date and accurate. It also allows for better integration with CI/CD pipelines, enabling automated checks and deployments of documentation alongside the software it describes.</p>\\n<p>In the methods-and-patterns quadrant, adopting docs as code represents a shift towards more efficient, scalable, and reliable documentation processes. As organizations increasingly recognize the importance of high-quality documentation, this approach has become a best practice in the industry, fitting well within the &quot;adopt&quot; ring.</p>\\n","featured":true,"flag":"default","tags":["documentation","collaboration","version-control"],"position":[543,342]},{"id":"dod","release":"2025-01-08","title":"DoD","ring":"adopt","quadrant":"methods-and-patterns","body":"<p>The Definition of Done (DoD) is a key concept in Agile methodologies that refers to a shared understanding among the team about what it means for a piece of work to be considered complete. It is useful because it ensures that everyone has clarity on the quality criteria and the necessary steps to achieve that quality, which helps in delivering consistent and predictable outcomes. In the methods-and-patterns quadrant, DoD is crucial as it provides a framework to guide the development process, ensuring alignment and reducing ambiguity. By adopting DoD, teams can improve their collaboration, enhance the quality of deliverables, and increase stakeholder satisfaction.</p>\\n","featured":true,"flag":"default","tags":["software-development","agile"],"position":[489,327]},{"id":"domain-driven_design","release":"2025-01-08","title":"Domain-driven design","ring":"adopt","quadrant":"methods-and-patterns","body":"<p>Domain-driven design (DDD) is a strategic approach to software development that emphasizes collaboration between technical and domain experts to create a model that reflects the business domain. It focuses on understanding the core domain, creating a shared language (ubiquitous language), and structuring the codebase around the business concepts to improve alignment between software design and business needs.</p>\\n<p>DDD is useful because it helps teams produce software that is more maintainable, flexible, and aligned with business goals. It encourages breaking down complex systems into bounded contexts, which can be developed, tested, and deployed independently, fostering agility and scalability.</p>\\n<p>In the Tech Radar, DDD is placed in the &quot;adopt&quot; ring of the &quot;methods-and-patterns&quot; quadrant. This placement reflects its maturity and proven effectiveness in numerous real-world applications. It is widely recognized as a best practice for developing complex systems where understanding and evolving the business domain is crucial. With its focus on collaboration and communication, DDD has become increasingly relevant in today&#39;s fast-paced and ever-changing business environments.</p>\\n","featured":true,"flag":"default","tags":["software-architecture","design-patterns"],"position":[503,288]},{"id":"dor","release":"2025-01-08","title":"DoR","ring":"assess","quadrant":"methods-and-patterns","body":"<p>The Definition of Ready (DoR) is a critical concept in agile project management that ensures a backlog item is prepared for execution by the development team. It sets a checklist of conditions that must be met before work can begin on a particular task, thereby reducing ambiguities and improving the chances of successful delivery. In the context of methods and patterns, DoR plays a significant role in enhancing workflow efficiency and team alignment. By assessing the DoR, teams can ensure that they have a clear understanding of the requirements, acceptance criteria, and necessary resources, ultimately leading to more predictable and manageable development cycles. This makes it an essential practice for teams striving to improve their agile processes and deliver high-quality software consistently.</p>\\n","featured":true,"flag":"default","tags":["agile","project-management"],"position":[604,175]},{"id":"dry_(don\'t_repeat_yourself)","release":"2025-01-08","title":"DRY (Don\'t Repeat Yourself)","ring":"adopt","quadrant":"methods-and-patterns","body":"<p>DRY (Don&#39;t Repeat Yourself) is a fundamental software design principle aimed at reducing the repetition of code and logic within a system. By emphasizing the elimination of redundancy, DRY encourages developers to create more maintainable, scalable, and efficient codebases. It is particularly useful in preventing the proliferation of bugs, as updates and changes only need to be made in a single location rather than multiple places. This principle is especially relevant in the &quot;methods-and-patterns&quot; quadrant, as it pertains to the overall approach to structuring and organizing code. Being in the &quot;adopt&quot; ring highlights its established importance and widespread acceptance in modern software development practices. DRY&#39;s emphasis on clean and maintainable code aligns with best practices for improving code quality and long-term sustainability of software projects.</p>\\n","featured":true,"flag":"default","tags":["software-design-principle","code-quality"],"position":[422,287]},{"id":"edge_architectures_for_iot","release":"2025-01-08","title":"Edge Architectures for IoT","ring":"adopt","quadrant":"methods-and-patterns","body":"<p>Edge Architectures for IoT involve deploying computational resources closer to the data source in IoT ecosystems, rather than relying solely on centralized cloud data centers. This approach aims to reduce latency, improve bandwidth efficiency, and enhance data privacy by processing data locally or at the edge of the network. As IoT devices proliferate, generating vast amounts of data, edge architectures become crucial for real-time analytics and decision-making. By adopting edge architectures, organizations can ensure more responsive and reliable IoT systems, making it a vital method and pattern in the modern technological landscape. The adoption ring signifies its growing importance and maturity in the industry, as businesses increasingly look to optimize their IoT deployments for performance and cost-effectiveness.</p>\\n","featured":true,"flag":"default","tags":["edge-computing","IoT","distributed-systems"],"position":[496,269]},{"id":"etsi_en_303_645","release":"2025-01-08","title":"ETSI EN 303 645","ring":"adopt","quadrant":"methods-and-patterns","body":"<p>ETSI EN 303 645 is a cybersecurity standard developed by the European Telecommunications Standards Institute (ETSI) for consumer Internet of Things (IoT) devices. It establishes a set of baseline requirements to ensure devices are secure by design, addressing key areas such as data protection, software updates, and vulnerability reporting. This standard is useful as it provides manufacturers with a clear framework to mitigate security risks, enhancing consumer trust and protecting user data. In the methods-and-patterns quadrant, ETSI EN 303 645 is particularly relevant as it sets fundamental guidelines for developing secure IoT devices, emphasizing the need for security considerations during the design phase. The adoption of this standard is encouraged due to the increasing prevalence of IoT devices and the associated security challenges, making it crucial for organizations involved in IoT development to prioritize security best practices.</p>\\n","featured":true,"flag":"default","tags":["IoT-security","cybersecurity-standards"],"position":[444,235]},{"id":"event_driven","release":"2025-01-08","title":"Event Driven","ring":"adopt","quadrant":"methods-and-patterns","body":"<p>Event Driven architecture is a design paradigm that emphasizes the production, detection, consumption, and reaction to events. An event can be defined as a significant change in the state of a system, and this approach is particularly useful for building scalable and decoupled systems. By adopting an Event Driven approach, systems can achieve greater responsiveness and flexibility, as components can operate independently and asynchronously, reacting to changes as they occur.</p>\\n<p>This method is especially relevant in today&#39;s microservices and cloud-native environments, where systems benefit from being loosely coupled and highly responsive. In the methods-and-patterns quadrant, Event Driven is a critical pattern that supports modern software architecture needs, enabling systems to handle complex workflows and data processing tasks efficiently. Its placement in the &quot;adopt&quot; ring indicates that it is a mature approach that organizations should incorporate into their architecture to enhance agility and scalability.</p>\\n","featured":true,"flag":"default","tags":["asynchronous","scalability","reactive-programming"],"position":[454,352]},{"id":"event_sourcing","release":"2025-01-08","title":"Event Sourcing","ring":"assess","quadrant":"methods-and-patterns","body":"<p>Event Sourcing is a method of capturing all changes to the state of an application as a sequence of events. Instead of storing just the current state, every change is recorded as an immutable event, which can be replayed to reconstruct past states or derive new information. This approach is useful for maintaining a clear audit trail, enabling system scalability, and supporting complex business logic by reconstructing states at any point in time.</p>\\n<p>In the &quot;methods-and-patterns&quot; quadrant, Event Sourcing offers a strategic approach to handling state management and data consistency across distributed systems. It is especially relevant in the &quot;assess&quot; ring as organizations explore its potential benefits and challenges before full adoption. Its application can lead to improved traceability, easier debugging, and better alignment with domain-driven design principles. However, like any architectural choice, it comes with trade-offs, such as increased complexity in data management and potential challenges in system performance.</p>\\n","featured":true,"flag":"default","tags":["data-management","system-architecture"],"position":[532,121]},{"id":"event_storming","release":"2025-01-08","title":"Event storming","ring":"adopt","quadrant":"methods-and-patterns","body":"<p>Event storming is a workshop-based method used to quickly explore complex business domains by focusing on domain events. It is particularly useful for building a shared understanding among cross-functional teams, including developers, domain experts, and stakeholders. By identifying key events that occur within a system, teams can collaboratively map out processes and uncover insights that lead to better software design and implementation.</p>\\n<p>Event storming is relevant in the &quot;methods-and-patterns&quot; quadrant as it provides a structured approach to domain-driven design (DDD), allowing teams to visually represent workflows and interactions in a manner that&#39;s easy to grasp. Positioned in the &quot;adopt&quot; ring, event storming has proven its effectiveness in fostering communication and aligning technical solutions with business goals. Its ability to simplify complex systems and enhance team collaboration makes it a valuable technique for organizations aiming to improve their design and development processes.</p>\\n","featured":true,"flag":"default","tags":["collaborative-design","domain-driven-design"],"position":[471,282]},{"id":"event_streaming","release":"2025-01-08","title":"Event Streaming","ring":"adopt","quadrant":"methods-and-patterns","body":"<p>Event Streaming is a data processing paradigm that treats data as a continuous stream of events, allowing for real-time data processing and analysis. This approach is particularly useful for applications that require immediate insights from data, such as fraud detection, real-time analytics, and monitoring systems. By adopting event streaming, organizations can build scalable and responsive systems that react to data changes in real-time, rather than processing data in batches.</p>\\n<p>In the methods-and-patterns quadrant, event streaming represents a shift from traditional data processing methods, enabling more dynamic and responsive architectures. Its adoption is increasingly relevant as businesses demand quicker and more efficient ways to handle large volumes of data. This method not only enhances scalability and performance but also supports the growing need for distributed systems that can manage data across various sources. As such, event streaming is a crucial tool in the modern software architecture toolkit, facilitating the creation of robust, high-performance applications.</p>\\n","featured":true,"flag":"default","tags":["real-time-data","scalability","distributed-systems"],"position":[455,385]},{"id":"event-driven_architecture_(eda)","release":"2025-01-08","title":"Event-Driven Architecture (EDA)","ring":"adopt","quadrant":"methods-and-patterns","body":"<p>Event-Driven Architecture (EDA) is a design paradigm in which decoupled systems communicate through the production and consumption of events. It is particularly useful for building scalable and responsive systems, as it allows for real-time data processing and asynchronous communication. EDA is increasingly relevant in the methods-and-patterns quadrant due to its ability to handle high volumes of data and its fit with modern distributed systems. By adopting EDA, organizations can create systems that are more agile and responsive to changes, facilitating innovation and improving user experiences. Its relevance in the &quot;adopt&quot; ring suggests that it is a well-established and effective approach that is recommended for widespread use across various industries.</p>\\n","featured":true,"flag":"default","tags":["scalability","real-time-processing"],"position":[505,368]},{"id":"freertos","release":"2025-01-08","title":"FreeRTOS","ring":"adopt","quadrant":"platforms-and-operations","body":"<p>FreeRTOS is a real-time operating system kernel designed for embedded devices and microcontrollers. It provides a lightweight and robust platform that supports a wide range of hardware architectures, making it ideal for resource-constrained environments common in IoT (Internet of Things) applications. FreeRTOS enables developers to create reliable, real-time applications with features like task management, inter-task communication, and memory management, all while maintaining a small footprint.</p>\\n<p>The decision to place FreeRTOS in the &quot;adopt&quot; ring reflects its widespread acceptance and proven stability in the industry. It is a mature and well-supported option that has been adopted by numerous organizations worldwide for both commercial and open-source projects. In the &quot;platforms-and-operations&quot; quadrant, FreeRTOS is highly relevant due to its role in operating system management for embedded systems, providing essential operational capabilities in real-time environments. Its versatility and ease of integration make it a valuable asset for projects aiming to leverage the growing landscape of connected devices and smart applications.</p>\\n","featured":true,"flag":"default","tags":["real-time-operating-system","embedded-systems","IoT"],"position":[282,440]},{"id":"gcc","release":"2025-01-08","title":"gcc","ring":"adopt","quadrant":"tools","body":"<p>The GNU Compiler Collection (gcc) is a comprehensive and widely-used set of compilers for various programming languages, most notably C, C++, and Fortran. As an open-source project under the GNU umbrella, gcc is highly valued for its robustness, performance, and cross-platform capabilities. It serves as a critical tool in software development, enabling the translation of high-level code into executable machine code across various architectures. In the tools quadrant and adopt ring, gcc is an essential part of the development toolchain for many organizations and projects due to its maturity, extensive community support, and continuous updates. Its relevance spans from education to enterprise applications, making it a staple in both learning environments and professional software engineering practices.</p>\\n","featured":true,"flag":"default","tags":["compiler","open-source","C","C++"],"position":[564,440]},{"id":"go_(golang)","release":"2025-01-08","title":"Go (golang)","ring":"adopt","quadrant":"languages-and-frameworks","body":"<p>Go, also known as golang, is a statically typed, compiled programming language designed by Google. It is renowned for its simplicity, efficiency, and strong support for concurrent programming, making it a popular choice for developing scalable and high-performance applications. Go&#39;s syntax is clean and concise, which reduces the complexity associated with managing large codebases. Its garbage collection, strict dependency management, and built-in testing capabilities enhance developer productivity and code reliability.</p>\\n<p>In the languages-and-frameworks quadrant, Go sits in the adopt ring because it has proven itself in production environments across various industries. Its robust standard library and vibrant ecosystem of third-party packages make it an excellent choice for building web servers, networking tools, and cloud services. The language&#39;s ability to compile to a single binary without dependencies further simplifies deployment and distribution.</p>\\n<p>Go&#39;s concurrency model, based on goroutines and channels, allows developers to efficiently utilize multicore processors, which is crucial for modern applications demanding high performance. This feature, combined with its simplicity and speed, underscores its relevance and adoption in the software development landscape.</p>\\n","featured":true,"flag":"default","tags":["concurrency","performance","simplicity"],"position":[293,323]},{"id":"google-cloud-platform","release":"2025-01-08","title":"Google Cloud Platform","ring":"adopt","quadrant":"platforms-and-operations","body":"<p>GCP provides scalable cloud solutions for modern architectures.</p>\\n","featured":true,"flag":"default","tags":["cloud"],"position":[320,446]},{"id":"graphql","release":"2025-01-08","title":"GraphQL","ring":"adopt","quadrant":"languages-and-frameworks","body":"<p>GraphQL is a query language for your APIs and a runtime for executing those queries by using a type system you define for your data. It provides an alternative to REST, enabling clients to request exactly the data they need, in the shape they need it. This approach reduces over-fetching and under-fetching of data, a common problem with traditional REST APIs.</p>\\n<p>In the &quot;languages-and-frameworks&quot; quadrant, GraphQL stands out due to its ability to streamline and optimize data interactions between clients and servers, making it extremely useful for applications with complex data requirements. Its flexibility and efficiency have led to its adoption by many organizations seeking to improve their API performance and developer experience.</p>\\n<p>Placed in the &quot;adopt&quot; ring, GraphQL has proven its reliability and effectiveness, with robust community support and widespread use in production environments. It has become a go-to choice for developers looking to implement efficient, flexible, and scalable API solutions.</p>\\n","featured":true,"flag":"default","tags":["api-design","data-fetching","flexibility"],"position":[373,381]},{"id":"grpc","release":"2025-01-08","title":"gRPC","ring":"adopt","quadrant":"methods-and-patterns","body":"<p>gRPC is a high-performance, open-source universal remote procedure call (RPC) framework developed by Google. It uses HTTP/2 for transport, Protocol Buffers as the interface description language, and provides features such as authentication, load balancing, and more. gRPC is particularly useful in microservices architectures, where it enables efficient and language-agnostic communication between services. Its ability to support multiple languages makes it a versatile choice for distributed systems.</p>\\n<p>In the &quot;methods-and-patterns&quot; quadrant, gRPC stands out due to its strong support for service-to-service communication, making it a preferred pattern for modern cloud-native applications. By placing it in the &quot;adopt&quot; ring, we&#39;re indicating that gRPC is a mature and stable technology that organizations can confidently implement to improve the performance and scalability of their service-oriented architectures.</p>\\n","featured":true,"flag":"default","tags":["remote-procedure-call","microservices"],"position":[473,339]},{"id":"iso_30141","release":"2025-01-08","title":"ISO 30141","ring":"assess","quadrant":"methods-and-patterns","body":"<p>ISO 30141 is an international standard that provides a reference architecture for the Internet of Things (IoT). It offers a framework to design IoT systems with a focus on interoperability, connectivity, and security. This standard is useful because it establishes a common understanding and approach to developing IoT solutions, which is crucial given the increasing complexity and scale of IoT deployments.</p>\\n<p>The relevance of ISO 30141 in the methods-and-patterns quadrant lies in its ability to guide architects and developers in designing robust IoT systems. By adopting this reference architecture, organizations can ensure that their IoT solutions are built on a foundation of best practices, promoting system reliability and scalability. In the assess ring, ISO 30141 is evaluated for its potential to streamline IoT development processes and its applicability to various industry sectors.</p>\\n","featured":true,"flag":"default","tags":["IoT","architecture","standards"],"position":[629,179]},{"id":"json","release":"2025-01-08","title":"JSON","ring":"adopt","quadrant":"languages-and-frameworks","body":"<p>JSON (JavaScript Object Notation) is a lightweight data interchange format that is easy for humans to read and write and easy for machines to parse and generate. It is language-independent but uses conventions that are familiar to programmers of the C family of languages, including C, C++, C#, Java, JavaScript, Perl, Python, and many others. JSON is widely adopted due to its simplicity and flexibility in representing data structures, making it a staple in web development and various APIs.</p>\\n<p>In the context of languages and frameworks, JSON serves as a universal medium for data interchange between systems, providing a straightforward way to serialize and deserialize data. Its adoption is crucial for developing modern web applications, enabling seamless communication between client-side and server-side components. JSON&#39;s relevance in this quadrant and its placement in the &quot;adopt&quot; ring highlight its established role as a foundational technology that continues to be integral in software architecture and development practices.</p>\\n","featured":true,"flag":"default","tags":["data-interchange","lightweight-format"],"position":[299,364]},{"id":"kanban","release":"2025-01-08","title":"Kanban","ring":"adopt","quadrant":"methods-and-patterns","body":"<p>Kanban is a popular workflow management method designed to help visualize work, maximize efficiency, and improve continuously. It is widely adopted in various industries, especially in software development, as part of Agile methodologies. Kanban uses visual cues—typically through a board divided into columns that represent different stages of a process—to track work items as they progress. This visualization allows teams to manage work by balancing demands with available capacity and identifying bottlenecks in the workflow.</p>\\n<p>The reason Kanban is categorized under the &quot;adopt&quot; ring in the &quot;methods-and-patterns&quot; quadrant is due to its proven effectiveness in optimizing workflow and enhancing team collaboration. It is not only useful for managing tasks in software development but also adaptable to other types of project management scenarios. By adopting Kanban, organizations can achieve greater flexibility and improved productivity, making it a significant method for modern project management practices.</p>\\n","featured":true,"flag":"default","tags":["agile","project-management","workflow-optimization"],"position":[425,328]},{"id":"kiss_(keep_it_simple,_stupid)","release":"2025-01-08","title":"KISS (Keep It Simple, Stupid)","ring":"adopt","quadrant":"methods-and-patterns","body":"<p>KISS, an acronym for &quot;Keep It Simple, Stupid,&quot; is a design principle that emphasizes simplicity in design and implementation. It advocates for avoiding unnecessary complexity, suggesting that systems function best if they are kept simple rather than made complicated. This principle is applicable across various fields, including software development, engineering, and user interface design.</p>\\n<p>In the context of software architecture, KISS is invaluable as it encourages developers to design solutions that are easy to understand, maintain, and scale. This simplicity can lead to increased productivity, fewer bugs, and easier onboarding for new team members. By adopting KISS in the &quot;methods-and-patterns&quot; quadrant, organizations can streamline their processes and enhance the overall quality of their software products. The principle&#39;s relevance is underscored by its widespread acceptance and proven effectiveness in improving both the development lifecycle and user experience.</p>\\n","featured":true,"flag":"default","tags":["simplicity","efficiency","design-principle"],"position":[473,374]},{"id":"layered_architecture","release":"2025-01-08","title":"Layered Architecture","ring":"adopt","quadrant":"methods-and-patterns","body":"<p>Layered Architecture is a widely used architectural pattern in software design that organizes the system into a series of layers, each with a distinct responsibility. This pattern typically includes layers such as presentation, business logic, and data access. The primary advantage of Layered Architecture is its ability to separate concerns, making systems more modular, maintainable, and scalable. Each layer can be developed, tested, and maintained independently, allowing teams to work on different parts of the system simultaneously without significant interference.</p>\\n<p>In the methods-and-patterns quadrant, Layered Architecture is crucial as it provides a foundational structure for building robust and organized solutions. Its adoption across various industries signifies its reliability and effectiveness in addressing complex software requirements. This architecture is especially beneficial for enterprise applications where clarity and separation of concerns are paramount. By adopting Layered Architecture, organizations can ensure that their applications are easier to manage and evolve over time, thus aligning with modern software development practices.</p>\\n","featured":true,"flag":"default","tags":["architecture-pattern","software-design"],"position":[485,299]},{"id":"lightweight_architecture_evaluations","release":"2025-01-08","title":"Lightweight Architecture Evaluations","ring":"adopt","quadrant":"methods-and-patterns","body":"<p>Lightweight Architecture Evaluations refer to a streamlined approach to assessing and reviewing software architecture. Unlike traditional, exhaustive architectural reviews, this method focuses on agility, enabling teams to quickly evaluate architectural decisions without extensive documentation or formal processes. This approach is especially useful in agile and fast-paced development environments, where time and resources for detailed analysis may be limited. In the &quot;methods-and-patterns&quot; quadrant, Lightweight Architecture Evaluations help teams stay responsive to change and ensure that architectural decisions align with evolving project needs. The &quot;adopt&quot; ring suggests that this practice has proven benefits and should be considered a standard approach for teams seeking to maintain agility while ensuring sound architectural principles.</p>\\n","featured":true,"flag":"default","tags":["architecture","evaluation","agile"],"position":[563,345]},{"id":"markdown","release":"2025-01-08","title":"Markdown","ring":"adopt","quadrant":"languages-and-frameworks","body":"<p>Markdown is a lightweight markup language that allows users to format plain text using a simple syntax. It is widely used for creating formatted text using a plain text editor, making it a popular choice for documentation, readme files, blog posts, and more. Its simplicity and ease of use make it accessible to users who may not have extensive technical knowledge, while still being powerful enough for more complex formatting needs.</p>\\n<p>In the context of languages and frameworks, Markdown stands out as a versatile tool that integrates seamlessly with various platforms and services, including GitHub, where it is commonly used for project documentation. The language&#39;s ability to convert plain text into HTML makes it incredibly useful for web content creation and management.</p>\\n<p>Markdown&#39;s widespread adoption and support across numerous platforms underscore its importance in modern software development environments. Its role in improving documentation quality and accessibility aligns with current best practices, justifying its placement in the &#39;adopt&#39; ring of the Tech Radar.</p>\\n","featured":true,"flag":"default","tags":["documentation","markup-language"],"position":[329,302]},{"id":"mermaid (2)","release":"2025-01-08","title":"Mermaid","ring":"adopt","quadrant":"tools","body":"<p>Mermaid is a JavaScript-based diagramming and charting tool that enables developers and content creators to create complex diagrams from simple text definitions. It is particularly useful for generating flowcharts, sequence diagrams, Gantt charts, and more, using a straightforward syntax that integrates seamlessly into various documentation systems, such as Markdown and static site generators like Jekyll and Docusaurus.</p>\\n<p>Mermaid has gained traction due to its ease of use, which allows users to focus on content rather than the intricacies of drawing tools. It is relevant in the tools quadrant as it enhances documentation workflows, offering a programmatic method to include visual content directly in textual documentation. In the adopt ring, Mermaid is recognized for its maturity and broad adoption, indicating it is a reliable choice for organizations looking to improve their documentation capabilities. Its integration with platforms like GitHub and GitLab further underscores its utility in collaborative environments, making it a natural fit for teams aiming to enhance communication and understanding through visual aids.</p>\\n","featured":true,"flag":"default","tags":["diagramming","visualization","documentation"],"position":[530,501]},{"id":"mermaid","release":"2025-01-08","title":"Mermaid Diagrams","ring":"trial","quadrant":"tools","body":"<p>Mermaid is a JavaScript-based diagramming and charting tool that allows for dynamic, code-based visualizations. It&#39;s particularly useful for architecture diagrams, flowcharts, and Gantt charts in technical documentation. Mermaid syntax integrates seamlessly into Markdown files for inline visualization.</p>\\n<h3>Example Mermaid Diagram</h3>\\n<p>Below is an example of a simple Mermaid flowchart:</p>\\n<pre><code class=\\"hljs language-mermaid\\">sequenceDiagram\\n    Alice-&gt;&gt;+John: Hello John, how are you?\\n    Alice-&gt;&gt;+John: John, can you hear me?\\n    John--&gt;&gt;-Alice: Hi Alice, I can hear you!\\n    John--&gt;&gt;-Alice: I feel great!\\n</code></pre><p>will produce</p>\\n<p><img src=\\"/TechRadar/techradar/images/mermaid.png\\" alt=\\"Mermaid Image\\"></p>\\n","featured":true,"flag":"default","tags":["visualization","documentation"],"position":[593,523]},{"id":"microservices","release":"2025-01-08","title":"Microservices","ring":"adopt","quadrant":"methods-and-patterns","body":"<p>Microservices is an architectural style that structures an application as a collection of loosely coupled services, each of which implements a business capability. This approach enhances flexibility and scalability, allowing for the independent deployment of services, which can be developed, tested, and deployed independently by different teams.</p>\\n<p>The microservices architecture is particularly useful in large, complex applications where the agility and speed of deployment are crucial. It allows organizations to scale specific components of an application without impacting the entire system, improving resource utilization and resilience.</p>\\n<p>In the methods-and-patterns quadrant of the Tech Radar, microservices are classified in the adopt ring, indicating that they are a well-established practice with proven benefits. Many organizations have successfully utilized microservices to achieve greater modularity, fault isolation, and faster time-to-market, making it a crucial pattern in modern software development.</p>\\n","featured":true,"flag":"default","tags":["architecture","scalability","resilience"],"position":[465,228]},{"id":"misra_c","release":"2025-01-08","title":"MISRA C","ring":"adopt","quadrant":"methods-and-patterns","body":"<p>MISRA C is a set of software development guidelines for the C programming language, developed by the Motor Industry Software Reliability Association (MISRA). It is widely adopted in industries where safety and reliability are paramount, such as automotive, aerospace, and medical devices. The guidelines aim to facilitate code safety, portability, and reliability in the embedded systems environment by imposing restrictions on the use of certain C language features that can lead to unsafe or unpredictable behavior.</p>\\n<p>MISRA C is particularly relevant in the &quot;methods-and-patterns&quot; quadrant because it provides a structured approach to writing robust and maintainable C code. The guidelines are not just applicable to critical systems but are also useful for any software development process that prioritizes code quality and long-term maintainability.</p>\\n<p>The &quot;adopt&quot; ring reflects its mature status and widespread acceptance across industries that require stringent compliance with safety standards. By adhering to MISRA C, organizations can ensure that their software meets rigorous safety requirements, reducing the risk of defects and enhancing overall system reliability.</p>\\n","featured":true,"flag":"default","tags":["safety-critical","coding-standard"],"position":[427,383]},{"id":"misra_c++","release":"2025-01-08","title":"MISRA C++","ring":"assess","quadrant":"languages-and-frameworks","body":"<p>MISRA C++ is a set of guidelines designed to facilitate the safe and secure use of the C++ programming language in critical systems. Originally developed for the automotive industry, it has been widely adopted in other sectors, such as aerospace and industrial automation, where software reliability is paramount. MISRA C++ provides a collection of best practices that help developers avoid common pitfalls and undefined behaviors in C++ programming, which are crucial in environments where software failure can have severe consequences.</p>\\n<p>The &quot;assess&quot; ring indicates that organizations should evaluate the potential benefits and challenges of adopting MISRA C++ guidelines in their projects. Its relevance in the &quot;languages-and-frameworks&quot; quadrant underscores its role in shaping how C++ is used in developing robust and dependable software systems. Given the increasing reliance on software in safety-critical applications, MISRA C++ is becoming increasingly relevant as organizations strive to enhance their software quality and reliability.</p>\\n","featured":true,"flag":"default","tags":["safety-critical","coding-guidelines"],"position":[83,338]},{"id":"modular_monolith","release":"2025-01-08","title":"Modular Monolith","ring":"adopt","quadrant":"methods-and-patterns","body":"<p>The Modular Monolith is a software architecture pattern that emphasizes structuring a monolithic application into distinct modules, each encapsulating a specific domain or functionality. Unlike traditional monoliths, where all components are intertwined, a Modular Monolith promotes a high degree of modularity within a single deployable unit. This approach allows for clearer boundaries, easier maintenance, and the possibility of gradually transitioning to a microservices architecture if needed.</p>\\n<p>Adopting a Modular Monolith can be highly advantageous for organizations that require a balance between the simplicity of monolithic applications and the modularity of microservices. It is particularly useful in scenarios where the complexity of microservices is not justified or the team is not yet ready to manage the operational overhead associated with distributed systems.</p>\\n<p>In the methods-and-patterns quadrant, the Modular Monolith is a valuable architectural strategy, offering scalability and flexibility without the immediate need to fully commit to a microservices approach. As such, it has been placed in the adopt ring, indicating that it is a recommended practice for teams looking to efficiently manage their software architecture while maintaining the option for future architectural evolution.</p>\\n","featured":true,"flag":"default","tags":["architecture","software-design","scalability"],"position":[445,256]},{"id":"mqtt","release":"2025-01-08","title":"MQTT","ring":"adopt","quadrant":"platforms-and-operations","body":"<p>MQTT (Message Queuing Telemetry Transport) is a lightweight, publish-subscribe network protocol commonly used for machine-to-machine (M2M) communication and is a cornerstone in the Internet of Things (IoT) ecosystems. It is designed for connections with remote locations where a small code footprint is required, or the network bandwidth is limited. MQTT is particularly useful for its simplicity and efficiency in constrained environments, making it ideal for IoT applications where devices need to communicate reliably over potentially unreliable networks.</p>\\n<p>MQTT&#39;s relevance in the platforms-and-operations quadrant stems from its role in enabling efficient, real-time communication across distributed systems. Its ability to handle thousands of lightweight clients and its minimal use of bandwidth make it an attractive choice for operations that require scalable and efficient messaging solutions. Given its widespread adoption and proven reliability, MQTT is placed in the &quot;adopt&quot; ring, signifying its maturity and readiness for use in production environments across various industries.</p>\\n","featured":true,"flag":"default","tags":["IoT","messaging-protocol"],"position":[363,536]},{"id":"oauth2","release":"2025-01-08","title":"oauth2","ring":"adopt","quadrant":"methods-and-patterns","body":"<p>OAuth2 is an open standard for access delegation commonly used to grant websites or applications limited access to user information on another website without exposing the user&#39;s credentials. It is particularly significant in the realm of authentication and authorization protocols, making it a pivotal method in securing web applications and APIs. By enabling secure token-based authentication, OAuth2 allows developers to build robust security layers, enhancing user privacy and data protection.</p>\\n<p>Its adoption in the &quot;methods-and-patterns&quot; quadrant reflects its widespread usage and maturity as a standard practice in software development. OAuth2 provides a flexible framework that supports various authentication flows, catering to both web and mobile applications, which is why it is a critical component in modern application architecture. The adoption ring indicates that it&#39;s a well-established practice recommended for use in most relevant projects, ensuring secure and scalable authentication strategies.</p>\\n","featured":true,"flag":"default","tags":["authentication","security"],"position":[430,360]},{"id":"openapi","release":"2025-01-08","title":"OpenAPI","ring":"adopt","quadrant":"tools","body":"<p>OpenAPI is a specification for building APIs that provides a standard, language-agnostic interface describing RESTful APIs. It&#39;s widely adopted in the industry due to its ability to streamline API development processes. By using OpenAPI, developers can automate the generation of API documentation, client libraries, and server stubs, which reduces the likelihood of errors and accelerates development timelines.</p>\\n<p>Within the &quot;tools&quot; quadrant, OpenAPI is especially relevant as it enhances collaboration across teams by providing a clear, shared understanding of API functionalities. Being in the &quot;adopt&quot; ring signifies that OpenAPI is a mature, stable solution that offers significant value to organizations looking to optimize their API development and management practices. The specification&#39;s ability to improve interoperability and facilitate the integration of various systems makes it a crucial asset in modern software architecture.</p>\\n","featured":true,"flag":"default","tags":["API-design","documentation"],"position":[491,510]},{"id":"owasp","release":"2025-01-08","title":"OWASP","ring":"adopt","quadrant":"methods-and-patterns","body":"<p>The Open Web Application Security Project (OWASP) is an essential resource in the field of web application security. It is a non-profit foundation that works to improve the security of software through community-driven open-source software projects, hundreds of local chapters worldwide, tens of thousands of members, and leading educational and training conferences. OWASP is renowned for its comprehensive resources such as the OWASP Top Ten, a regularly updated list of the most critical security risks to web applications.</p>\\n<p>Adopting OWASP&#39;s methodologies and guidelines is crucial for organizations aiming to enhance their security posture. It provides developers and security professionals with the tools and knowledge needed to identify and mitigate vulnerabilities effectively. The emphasis on practical, up-to-date best practices makes OWASP highly relevant in the &quot;methods-and-patterns&quot; quadrant, and its widespread acceptance and utility across industries justify its placement in the &quot;adopt&quot; ring. By integrating OWASP principles, organizations can ensure that they are implementing robust security measures to protect their web applications against emerging threats.</p>\\n","featured":true,"flag":"default","tags":["security","best-practices"],"position":[418,307]},{"id":"pep_8","release":"2025-01-08","title":"PEP 8","ring":"adopt","quadrant":"methods-and-patterns","body":"<p>PEP 8 is the style guide for Python code, providing conventions on how to format Python code for maximum readability. It is widely adopted in the Python community, ensuring consistency across diverse codebases. PEP 8 covers various aspects, including indentation, naming conventions, and best practices for writing clear and maintainable code.</p>\\n<p>Its relevance in the &quot;methods-and-patterns&quot; quadrant stems from its role in defining coding patterns that improve code quality and collaboration. Being in the &quot;adopt&quot; ring indicates that PEP 8 is a mature and essential standard that should be fully integrated into Python development practices. Adhering to PEP 8 not only enhances readability but also facilitates better teamwork and reduces the likelihood of errors.</p>\\n","featured":true,"flag":"default","tags":["coding-standards","python"],"position":[526,308]},{"id":"plantuml","release":"2025-01-08","title":"PlantUML","ring":"adopt","quadrant":"tools","body":"<p>PlantUML is an open-source tool that allows users to create UML diagrams from a plain text language. It is widely appreciated for its simplicity and the ease with which complex diagrams can be generated without needing to use graphical editing tools. PlantUML supports a variety of UML diagrams, including sequence diagrams, use case diagrams, class diagrams, and more, making it a versatile choice for software architects and developers.</p>\\n<p>The tool is particularly beneficial in agile environments where rapid iteration and clear communication are key. By using text files to describe diagrams, PlantUML integrates seamlessly with version control systems, allowing teams to track changes and collaborate efficiently. Its ability to be embedded in wikis and integrated with popular tools like Visual Studio Code enhances its utility in maintaining up-to-date documentation.</p>\\n<p>In the context of &#39;tools&#39;, PlantUML is placed in the &#39;adopt&#39; ring because it represents a mature technology that has been proven effective in production environments. Its ability to streamline the documentation process and improve collaboration makes it a valuable asset for teams committed to maintaining clear and accessible software documentation.</p>\\n","featured":true,"flag":"default","tags":["diagramming","visualization","documentation"],"position":[497,441]},{"id":"protobuf","release":"2025-01-08","title":"protobuf","ring":"adopt","quadrant":"languages-and-frameworks","body":"<p>Protocol Buffers (protobuf) is a language-neutral, platform-neutral, extensible mechanism for serializing structured data. Developed by Google, it is widely adopted for its efficiency in data serialization, especially in scenarios where performance and portability are crucial. Protobuf offers a compact binary format, which reduces the size of the payload and improves the speed of data transmission compared to traditional text-based formats like JSON or XML.</p>\\n<p>In the context of the Tech Radar, protobuf is placed in the &quot;adopt&quot; ring under the &quot;languages-and-frameworks&quot; quadrant. This positioning reflects its maturity and widespread use in production environments where developers need a reliable, performant solution for data interchange between microservices, APIs, and other cross-platform systems. It provides strong typing, backward compatibility, and is supported by numerous programming languages, making it a versatile tool in modern software development.</p>\\n","featured":true,"flag":"default","tags":["serialization","cross-platform","performance"],"position":[353,296]},{"id":"python","release":"2025-01-08","title":"Python","ring":"adopt","quadrant":"languages-and-frameworks","body":"<p>Python is a high-level, interpreted programming language known for its simplicity and readability, making it an excellent choice for beginners and experienced developers alike. Its extensive standard library and vibrant ecosystem of third-party packages enable rapid development in various domains, including web development, data analysis, artificial intelligence, and scientific computing.</p>\\n<p>Python&#39;s versatility and ease of use have made it a staple in software development, data science, and academic research. Its community-driven nature ensures continuous improvement and innovation, helping it remain relevant in the fast-evolving tech landscape.</p>\\n<p>In the context of languages and frameworks, Python&#39;s wide adoption across multiple industries and its role as a foundational tool in emerging technologies like machine learning and data analytics justify its placement in the &#39;adopt&#39; ring. Its impact on productivity and its role in fostering an inclusive programming environment further solidify its standing as a must-have language for modern software development.</p>\\n","featured":true,"flag":"default","tags":["programming-language","high-level","versatile"],"position":[331,334]},{"id":"rest","release":"2025-01-08","title":"REST","ring":"adopt","quadrant":"methods-and-patterns","body":"<p>REST (Representational State Transfer) is an architectural style that is widely used for designing networked applications. It leverages standard HTTP methods, such as GET, POST, PUT, and DELETE, to facilitate communication between clients and servers. RESTful services are stateless and typically return data in formats like JSON or XML, making them highly interoperable and scalable.</p>\\n<p>REST is a crucial pattern in the methods-and-patterns quadrant due to its simplicity and effectiveness in building web APIs. It enables developers to create efficient, reliable, and easy-to-use interfaces that are integral to modern web services. Its adoption is widespread, thanks to its clear conventions and the ease with which it integrates into existing web technologies, making it a cornerstone of contemporary web architecture.</p>\\n","featured":true,"flag":"default","tags":["web-architecture","api-design"],"position":[443,290]},{"id":"rfc9457","release":"2025-01-08","title":"RFC9457","ring":"assess","quadrant":"methods-and-patterns","body":"<p>RFC9457 is a significant document in the realm of Internet standards, focusing on improving security protocols within networking systems. It provides a comprehensive framework for enhancing secure communications across different platforms and operations. RFC9457 is essential for developers and network architects who need to ensure their systems are compliant with modern security standards, particularly in an era where cyber threats are increasingly sophisticated.</p>\\n<p>This document is placed in the &quot;assess&quot; ring because it is relatively new and requires thorough evaluation by organizations to determine its applicability and potential benefits. The &quot;methods-and-patterns&quot; quadrant is appropriate as RFC9457 outlines systematic approaches to implementing enhanced security protocols. Its relevance is especially critical for teams tasked with safeguarding data transmission over the internet, making it a valuable resource for organizations aiming to advance their security measures.</p>\\n","featured":true,"flag":"default","tags":["networking","security","internet-standards"],"position":[661,208]},{"id":"rrpc","release":"2025-01-08","title":"rRPC","ring":"assess","quadrant":"methods-and-patterns","body":"<p>rRPC, or Reactive Remote Procedure Call, is an emerging method that enhances the traditional RPC model by incorporating reactive programming principles. This approach is particularly useful in systems where responsiveness and scalability are critical, such as microservices architectures. By leveraging a non-blocking, event-driven paradigm, rRPC enables more efficient use of system resources and improves the overall performance of distributed applications.</p>\\n<p>The &quot;assess&quot; ring indicates that rRPC is a promising technology worth exploring, but it may still be maturing or not yet widely adopted. It belongs in the &quot;methods-and-patterns&quot; quadrant because it represents an innovative approach to designing communication patterns in software architecture. As organizations increasingly adopt microservices for their scalability and flexibility, exploring advanced techniques like rRPC can provide significant benefits in terms of system efficiency and responsiveness.</p>\\n","featured":true,"flag":"default","tags":["remote-procedure-call","microservices"],"position":[709,331]},{"id":"rust","release":"2025-01-08","title":"Rust","ring":"adopt","quadrant":"languages-and-frameworks","body":"<p>Rust is a systems programming language that aims to provide memory safety without sacrificing performance. It is designed to compete with traditional languages like C and C++ by offering powerful abstractions while ensuring safety through its unique ownership model. Rust is particularly useful in contexts requiring high performance and safety, such as embedded systems, operating systems, and game engines. Its rich type system and emphasis on concurrency make it an excellent choice for developing robust and efficient applications.</p>\\n<p>Rust&#39;s importance in the languages-and-frameworks quadrant is underscored by its rapidly growing ecosystem and adoption by major tech companies. The language&#39;s ability to prevent common programming errors such as null pointer dereferencing, buffer overflows, and data races makes it a compelling option for developers looking to build reliable software. Given its strengths and increasing popularity, Rust is positioned in the &quot;adopt&quot; ring, indicating that it is mature and ready for widespread use in production environments.</p>\\n","featured":true,"flag":"default","tags":["systems-programming","memory-safety","concurrency"],"position":[276,272]},{"id":"scrum","release":"2025-01-08","title":"Scrum","ring":"adopt","quadrant":"methods-and-patterns","body":"<p>Scrum is an agile framework for managing complex projects, primarily focused on software development. It facilitates a flexible, iterative approach where work is broken down into sprints, typically lasting two to four weeks. Scrum emphasizes collaboration, accountability, and continuous improvement, making it an essential tool for teams aiming to deliver high-quality software efficiently. The framework includes defined roles (such as Scrum Master and Product Owner), events (such as daily stand-ups and sprint reviews), and artifacts (like product backlogs) to ensure transparency and enhance productivity.</p>\\n<p>In the context of the methods-and-patterns quadrant, Scrum is highly relevant due to its structured yet adaptable approach to project management. It is positioned in the adopt ring because it has proven to be highly effective across various industries and is widely recognized as a best practice for agile teams. By adopting Scrum, organizations can improve their responsiveness to change, foster greater team collaboration, and ultimately deliver more value to their customers.</p>\\n","featured":true,"flag":"default","tags":["agile","project-management","team-collaboration"],"position":[543,320]},{"id":"sei_atam","release":"2025-01-08","title":"SEI ATAM","ring":"assess","quadrant":"methods-and-patterns","body":"<p>The Software Engineering Institute&#39;s Architecture Tradeoff Analysis Method (SEI ATAM) is a systematic approach used for evaluating software architectures. It is particularly useful in identifying architectural risks early in the development process and provides a framework for understanding how well an architecture meets its quality attribute requirements, such as performance, modifiability, and security.</p>\\n<p>ATAM involves stakeholders in a series of structured workshops to capture various perspectives, which helps in uncovering potential trade-offs and critical issues. By focusing on quality attributes and their interactions, it facilitates informed decision-making about architectural strategies.</p>\\n<p>In the methods-and-patterns quadrant, ATAM stands out as a critical tool for organizations looking to enhance their architecture assessment processes. Positioned in the assess ring, it is recommended for teams wanting to evaluate the robustness and risk factors of their architectural choices, especially before committing substantial resources to full-scale development. This makes it an essential practice for organizations aiming to improve the quality and effectiveness of their software systems.</p>\\n","featured":true,"flag":"default","tags":["architecture-evaluation","software-quality"],"position":[512,113]},{"id":"sei_cbam","release":"2025-01-08","title":"SEI CBAM","ring":"assess","quadrant":"methods-and-patterns","body":"<p>The SEI Cost Benefit Analysis Method (CBAM) is a structured approach designed to help software architects and decision-makers evaluate the trade-offs among various architectural decisions. By integrating economic considerations with architectural needs, CBAM allows teams to assess the potential costs and benefits associated with different design options. This method is especially relevant in the methods-and-patterns quadrant as it provides a systematic approach to evaluating and justifying architectural choices, ensuring that they align with business goals and constraints.</p>\\n<p>In the assess ring, SEI CBAM is valuable for organizations seeking to incorporate more quantitative approaches in their decision-making processes. It is particularly useful in scenarios where multiple stakeholders are involved, and architectural decisions have a significant impact on business value. By evaluating potential architectural investments and their anticipated return, CBAM supports informed decision-making and prioritization, making it an essential tool for organizations aiming to optimize their software architecture in alignment with strategic objectives.</p>\\n","featured":true,"flag":"default","tags":["architecture-evaluation","cost-benefit-analysis"],"position":[641,202]},{"id":"serverless","release":"2025-01-08","title":"Serverless","ring":"adopt","quadrant":"platforms-and-operations","body":"<p>Serverless computing is a cloud-computing execution model where the cloud provider dynamically manages the allocation and provisioning of servers. By allowing developers to run code in response to events without the complexity of managing infrastructure, serverless abstracts away the server management, enabling teams to focus more on writing code and less on server maintenance. This approach can lead to significant cost savings, as it inherently scales with demand and charges are based only on the compute time consumed.</p>\\n<p>In the platforms-and-operations quadrant, serverless is highly relevant due to its operational efficiency and ability to accelerate deployment cycles. Its capability to automatically scale and handle high concurrency makes it an attractive choice for modern application architectures. With major cloud providers offering robust serverless platforms, such as AWS Lambda, Azure Functions, and Google Cloud Functions, the adoption of serverless architectures in production environments has become increasingly viable. As organizations look to enhance agility and reduce operational overhead, serverless is becoming a key pillar in cloud-native strategies.</p>\\n","featured":true,"flag":"default","tags":["cloud-computing","scalability","cost-efficiency"],"position":[247,462]},{"id":"soa","release":"2025-01-08","title":"SOA","ring":"assess","quadrant":"methods-and-patterns","body":"<p>Service-Oriented Architecture (SOA) is a design pattern where distinct services are provided to other components by application components through a communication protocol over a network. SOA&#39;s primary goal is to allow easy integration between different applications and to facilitate business processes by making these services reusable and interoperable. This architecture style is particularly useful for organizations aiming to create complex systems that are agile and can be modified or extended with minimal impact on existing services.</p>\\n<p>SOA is relevant in the &quot;methods-and-patterns&quot; quadrant because it provides a framework for structuring and organizing software components that can be reused across different projects and solutions. The &quot;assess&quot; ring is appropriate as organizations are continuously evaluating how best to integrate SOA with modern microservices architectures, considering cloud-native approaches and the need for more dynamic, scalable solutions. As technology evolves, businesses are assessing whether traditional SOA implementations meet their needs or if new patterns are required to adapt to the changing landscape.</p>\\n","featured":true,"flag":"default","tags":["service-oriented-architecture","integration-patterns"],"position":[589,141]},{"id":"sqlite","release":"2025-01-08","title":"SQLite","ring":"adopt","quadrant":"tools","body":"<p>SQLite is a C-language library that implements a small, fast, self-contained, high-reliability, full-featured, SQL database engine. It is the most widely deployed database engine in the world, embedded into all sorts of applications. Its simplicity and ease of use make it an ideal choice for embedded database needs, mobile apps, and small to medium-sized applications that do not require the overhead of a full-scale database server.</p>\\n<p>In the tools quadrant, SQLite is categorized in the adopt ring because it has been proven as a reliable and mature technology. It offers zero-configuration, which means no setup or administration is needed, making it an excellent choice for developers seeking a hassle-free database solution. Its ability to handle most SQL queries and its support for ACID transactions make it relevant for a wide range of applications. SQLite&#39;s lightweight nature also contributes to its adoption in environments where resources are constrained. This makes it a versatile tool in a developer&#39;s toolkit.</p>\\n","featured":true,"flag":"default","tags":["embedded-database","lightweight-database"],"position":[480,420]},{"id":"structurizr","release":"2025-01-08","title":"Structurizr","ring":"assess","quadrant":"tools","body":"<p>Structurizr is a tool designed for creating software architecture diagrams based on the C4 model, which emphasizes clarity and simplicity in visualizing software architecture. It is particularly useful for software architects and developers who need to communicate complex systems effectively. Structurizr allows users to define their architecture models using code, enabling version control and integration with existing development workflows. In the tools quadrant, Structurizr stands out as a modern approach to diagramming that aligns with agile methodologies and continuous integration practices. In the assess ring, it is recommended for evaluation as it can potentially enhance documentation and understanding of software systems within organizations, especially those adopting cloud-native technologies.</p>\\n","featured":true,"flag":"default","tags":["architecture-diagrams","software-design","cloud"],"position":[478,710]},{"id":"togaf","release":"2025-01-08","title":"TOGAF","ring":"adopt","quadrant":"methods-and-patterns","body":"<p>TOGAF, which stands for The Open Group Architecture Framework, is a comprehensive framework used for developing and managing enterprise architecture. It is widely adopted by organizations to improve business efficiency and ensure that IT aligns with business objectives. As a key player in the methods-and-patterns quadrant, TOGAF provides a structured approach for organizing and governing information technology infrastructure.</p>\\n<p>Its utility lies in its ability to help organizations optimize and standardize processes, reduce redundancy, and ensure interoperability across systems. By adopting TOGAF, enterprises can better manage the complexity of IT systems, reduce costs, and support business transformation initiatives. Its relevance is underscored by its flexibility and the vast community that supports it, making it a robust choice for enterprises looking to implement best practices in architecture development.</p>\\n","featured":true,"flag":"default","tags":["enterprise-architecture","best-practices"],"position":[524,378]},{"id":"uml-modeling","release":"2025-01-08","title":"UML Modeling","ring":"adopt","quadrant":"methods-and-patterns","body":"<p>Unified Modeling Language (UML) is a standard way to visualize software architecture.</p>\\n","featured":true,"flag":"default","tags":["design"],"position":[564,325]},{"id":"v-model","release":"2025-01-08","title":"V-Model","ring":"assess","quadrant":"methods-and-patterns","body":"<p>The V-Model, also known as the Verification and Validation model, is a software development process that emphasizes the importance of testing at each stage of development. It extends the traditional waterfall model by associating a testing phase with each corresponding development stage. This ensures that validation and verification are integral parts of the development lifecycle, leading to early detection and correction of defects.</p>\\n<p>The V-Model is useful because it provides a structured approach to software development, where each phase must be completed before the next begins, ensuring clarity and order. It is particularly beneficial in environments where compliance and quality are critical, such as in safety-critical systems and regulated industries.</p>\\n<p>In the methods-and-patterns quadrant, the V-Model is assessed because while it offers a disciplined and organized approach, its rigidity may not suit all projects, especially those requiring rapid iteration or agile methodologies. Nevertheless, understanding and potentially integrating the principles of the V-Model can enhance a team&#39;s ability to manage projects with stringent quality and testing requirements.</p>\\n","featured":true,"flag":"default","tags":["software-development","testing","project-management"],"position":[661,237]},{"id":"visual-studio-code","release":"2025-01-08","title":"Visual Studio Code","ring":"adopt","quadrant":"tools","body":"<p>VS Code is a popular editor for development with rich plugin support.</p>\\n","featured":true,"flag":"default","tags":["editor"],"position":[534,429]},{"id":"vs_code","release":"2025-01-08","title":"VS code","ring":"adopt","quadrant":"tools","body":"<p>Visual Studio Code (VS Code) is a widely-used, open-source code editor developed by Microsoft. It provides developers with an efficient, lightweight, and highly customizable environment to write and debug code across various programming languages. VS Code is particularly appreciated for its rich extension ecosystem, enabling users to enhance functionality with plugins for specific languages, integrations, and developer tools.</p>\\n<p>As a tool, VS Code is invaluable for its speed, intuitive user interface, and built-in features such as IntelliSense, debugging support, and Git integration. Its relevance in the &quot;adopt&quot; ring signifies broad acceptance and trust in its capabilities among development teams, making it a go-to choice for many coding projects. The tool&#39;s adaptability across different operating systems and robust community support further solidify its position in aiding developer productivity and collaboration.</p>\\n","featured":true,"flag":"default","tags":["code-editor","IDE","developer-productivity"],"position":[420,424]},{"id":"waterfall","release":"2025-01-08","title":"Waterfall","ring":"hold","quadrant":"methods-and-patterns","body":"<p>Waterfall is a traditional software development methodology that follows a linear and sequential approach, akin to a cascading waterfall. Each phase—such as requirements gathering, design, implementation, testing, and maintenance—must be completed before the next one begins. This method is useful in projects where requirements are well-understood and unlikely to change, as it emphasizes thorough documentation and a clear project roadmap.</p>\\n<p>Despite its structured approach, Waterfall is placed in the &quot;hold&quot; ring because contemporary software development often demands flexibility to accommodate changing requirements and iterative improvements, which are better supported by agile methodologies. In the &quot;methods-and-patterns&quot; quadrant, Waterfall serves as a historical reference point that helps understand the evolution of software development practices. It remains relevant for certain industries like aerospace and construction, where rigorous adherence to specifications is critical.</p>\\n","featured":true,"flag":"default","tags":["project-management","software-development"],"position":[759,268]},{"id":"yagni_(you_aren’t_gonna_need_it)","release":"2025-01-08","title":"YAGNI (You Aren’t Gonna Need It)","ring":"adopt","quadrant":"methods-and-patterns","body":"<p>YAGNI (You Aren’t Gonna Need It) is a fundamental principle of agile software development that encourages developers to avoid adding functionality until it is necessary. By adhering to YAGNI, teams can maintain a lean codebase, reduce complexity, and focus on delivering features that provide immediate value to the user. This principle is particularly useful in iterative development environments where requirements can change rapidly, and maintaining flexibility is crucial. Within the methods-and-patterns quadrant, YAGNI is a foundational practice, promoting efficient workflow and resource use. It is recommended for adoption as it aligns with the modern emphasis on agility and responsiveness in software development. Implementing YAGNI can help organizations avoid over-engineering and concentrate efforts on current needs, ensuring that development remains focused and productive.</p>\\n","featured":true,"flag":"default","tags":["software-development","agile-practices"],"position":[446,332]},{"id":"yaml","release":"2025-01-08","title":"YAML","ring":"adopt","quadrant":"languages-and-frameworks","body":"<p>YAML, which stands for &quot;YAML Ain&#39;t Markup Language,&quot; is a human-readable data serialization standard that is commonly used for configuration files and data interchange between programming languages. Its concise and easy-to-read syntax makes it an excellent choice for configuration files and data serialization, particularly in environments where developers and system administrators need to work closely together, such as in DevOps practices.</p>\\n<p>YAML&#39;s relevance in the &quot;languages-and-frameworks&quot; quadrant stems from its widespread adoption across various technologies and platforms. It is supported by many programming languages and is the preferred format for configuration files in numerous frameworks and tools, such as Docker Compose, Ansible, and Kubernetes.</p>\\n<p>In terms of the &quot;adopt&quot; ring, YAML has already proven its value and stability in production environments across different domains, making it a reliable choice for organizations looking to streamline their configuration management and data serialization processes. Its simplicity and readability have contributed to its popularity, cementing its place as a key component in modern software development and deployment practices.</p>\\n","featured":true,"flag":"default","tags":["data-serialization","configuration"],"position":[277,307]},{"id":"yocto-project","release":"2025-01-08","title":"Yocto Project","ring":"adopt","quadrant":"platforms-and-operations","body":"<p>Yocto Project helps build custom Linux-based systems for embedded applications.</p>\\n","featured":true,"flag":"default","tags":["linux"],"position":[234,439]},{"id":"zachman_framework","release":"2025-01-08","title":"Zachman Framework","ring":"assess","quadrant":"methods-and-patterns","body":"<p>The Zachman Framework is a comprehensive enterprise architecture framework for organizing and categorizing the various perspectives involved in enterprise architecture. It provides a structured way to view and define an enterprise&#39;s architecture by considering different aspects like data, functionality, network, people, time, and motivation across multiple perspectives, such as business owner, architect, designer, builder, and user.</p>\\n<p>The framework is particularly useful for ensuring that all aspects of an enterprise&#39;s architecture are considered and integrated effectively, promoting consistency and communication across different departments and stakeholders. Its relevance in the &quot;methods-and-patterns&quot; quadrant stems from its systematic approach to enterprise architecture, allowing organizations to assess and plan their architectural strategies comprehensively.</p>\\n<p>Placing it in the &quot;assess&quot; ring indicates that while the framework is well-established and valuable for certain organizations, it&#39;s essential to evaluate its fit for your specific context and needs before adoption. The tags highlight its role in enterprise architecture and its nature as a framework guiding organizational structure and processes.</p>\\n","featured":true,"flag":"default","tags":["enterprise-architecture","framework"],"position":[472,99]}]}'),n=JSON.parse('{"basePath":"/techradar","baseUrl":"","editUrl":"https://github.dev/personal-techradar/radar/{release}/{id}.md","logoFile":"logo.svg","jsFile":"","toggles":{"showChart":true,"showTagFilter":true,"showQuadrantList":true,"showEmptyRings":false},"sections":["radar","tags","list"],"colors":{"foreground":"#f7f7f7","background":"#112233","highlight":"#ffcc00","content":"#ffffff","text":"#333333","link":"#0066cc","border":"rgba(255, 255, 255, 0.1)","tag":"rgba(0, 102, 204, 0.2)"},"quadrants":[{"id":"languages-and-frameworks","title":"Languages & Frameworks","description":"Programming languages and frameworks for developing embedded systems and architectural solutions.","color":"#ff9999"},{"id":"methods-and-patterns","title":"Methods & Patterns","description":"Key practices and design patterns for software architecture and development workflows.","color":"#99ccff"},{"id":"platforms-and-operations","title":"Platforms & Operations","description":"Technologies for managing embedded systems and scalable cloud infrastructure.","color":"#66cc66"},{"id":"tools","title":"Tools","description":"Development and debugging tools tailored for embedded software and architecture design.","color":"#ffcc66"}],"rings":[{"id":"adopt","title":"Adopt","description":"Technologies that are highly reliable and actively used in projects.","color":"#33cc33","radius":0.5,"strokeWidth":5},{"id":"trial","title":"Trial","description":"Technologies currently being tested for potential adoption.","color":"#ffcc00","radius":0.69,"strokeWidth":3},{"id":"assess","title":"Assess","description":"Emerging technologies under evaluation for future use.","color":"#ff6600","radius":0.85,"strokeWidth":2},{"id":"hold","title":"Hold","description":"Technologies not currently recommended for use or deprioritized.","color":"#ff0000","radius":1,"strokeWidth":0.75}],"flags":{"new":{"color":"#00ccff","title":"New","titleShort":"N","description":"New in this version"},"changed":{"color":"#ffaa00","title":"Changed","titleShort":"C","description":"Recently changed"},"default":{"description":"Unchanged."}},"chart":{"size":800,"blipSize":12},"social":[{"href":"https://github.com/personal-techradar","icon":"github"}],"imprint":"","labels":{"title":"Personal Technology Radar","imprint":"Personal Radar","quadrant":"Quadrant","quadrantOverview":"Quadrant Overview","zoomIn":"Zoom in","filterByTag":"Filter by Tag","footer":"This personal radar reflects my journey in architecture and embedded software development.","notUpdated":"This item was not updated in the last three versions of the radar. Its relevance might vary based on context and time.","notFound":"404 - Page not found","pageAbout":"About My Technology Radar","pageOverview":"Technologies Overview","pageSearch":"Search","searchPlaceholder":"Search for a technology...","metaDescription":"My personal technology radar focused on architecture and embedded software."}}'),r=a(6513);let s={...n,...r};r.colors&&(s.colors={...n.colors,...r.colors}),r.labels&&(s.labels={...n.labels,...r.labels}),r.toggles&&(s.toggles={...n.toggles,...r.toggles});var o=a(390),d=a(1492);function c(e){return s.labels[e]||""}function l(e){return s.toggles[e]||!1}function u(){return s.sections}function p(){return c("title")}function f(){return(0,d.p)(s.logoFile)}function g(){return s.jsFile?(0,d.p)(s.jsFile):""}function m(){return s.chart}function h(){return s.flags}function y(e){return s.flags[e]}function v(){return s.rings}function b(e){return v().find(t=>t.id===e)}function w(){return i.yN}function q(){return s.social}function k(){return i.pJ}function x(e){return s.editUrl?(0,o.WU)(s.editUrl,e):""}function I(){return s.quadrants.map((e,t)=>({...e,position:t+1}))}function T(e){return I().find(t=>t.id===e)}function _(e,t){return i.ev.filter(a=>(!e||a.quadrant===e)&&!(t&&!a.featured))}function j(){return s.imprint}function C(e){return i.ev.find(t=>t.id===e)}let S=(e,t)=>Number(t.featured)-Number(e.featured)||e.title.localeCompare(t.title),A=e=>{let t=l("showEmptyRings");return v().reduce((a,i)=>{let n=e.filter(e=>e.ring===i.id);return(n.length||t)&&(a[i.id]=n),a},{})},P=e=>I().reduce((t,a)=>{let i=e.filter(e=>e.quadrant===a.id);return i.length&&(t[a.id]=i),t},{})},390:function(e,t,a){"use strict";a.d(t,{Ui:function(){return r},WU:function(){return n},vf:function(){return s}});var i=a(9284);function n(e,t){return e.replace(/{(\w+)}/g,(e,a)=>t[a]||e)}function r(){for(var e=arguments.length,t=Array(e),a=0;a<e;a++)t[a]=arguments[a];return[...t,(0,i.PO)()].join(" | ")}function s(e){return new Date(e).toLocaleDateString("en-US",{month:"long",year:"numeric"})}},1492:function(e,t,a){"use strict";a.d(t,{p:function(){return s},cn:function(){return r}});var i=a(8342),n=a.n(i);function r(){for(var e=arguments.length,t=Array(e),a=0;a<e;a++)t[a]=arguments[a];return function(){for(var e,t,a=0,i="",n=arguments.length;a<n;a++)(e=arguments[a])&&(t=function e(t){var a,i,n="";if("string"==typeof t||"number"==typeof t)n+=t;else if("object"==typeof t){if(Array.isArray(t)){var r=t.length;for(a=0;a<r;a++)t[a]&&(i=e(t[a]))&&(n&&(n+=" "),n+=i)}else for(i in t)t[i]&&(n&&(n+=" "),n+=i)}return n}(e))&&(i&&(i+=" "),i+=t);return i}(t)}function s(e){return/^https?:/.test(e)||!n().basePath?e:(e.startsWith("/")||(e="/"+e),"".concat(n().basePath).concat(e))}},3941:function(e,t,a){"use strict";a.r(t),a.d(t,{default:function(){return R}});var i=a(5893),n=a(9008),r=a.n(n),s=a(4298),o=a.n(s),d=a(2090),c=a.n(d),l=a(4769),u=a.n(l),p=a(6999),f=a.n(p),g=a(4578),m=a.n(g),h=a(3291),y=a(9284),v=a(1492);function b(e){let{className:t}=e,a=(0,y.dv)();return(0,i.jsx)("ul",{className:(0,v.cn)(m().links,t),children:a.map((e,t)=>{let a=function(e){switch(e.toLowerCase()){case"facebook":return h.rj;case"github":return h.yx;case"gitlab":return h.Tp;case"instagram":return h.bL;case"linkedin":return h.zU;case"x":return h.V7;case"xing":return h.CR;case"youtube":return h.PC;default:return null}}(e.icon);return a&&(0,i.jsx)("li",{children:(0,i.jsx)("a",{href:e.href,className:m().link,target:"_blank",rel:"noopener noreferrer",children:(0,i.jsx)(a,{className:m().icon})})},t)})})}function w(){let e=(0,y.OW)();return(0,i.jsxs)("div",{className:f().footer,children:[(0,i.jsxs)("div",{className:f().branding,children:[(0,i.jsx)("img",{src:e,className:f().logo,alt:(0,y.PO)()}),(0,i.jsx)("p",{className:f().description,children:(0,y.id)("footer")}),(0,i.jsx)(b,{className:f().socialLinks})]}),(0,i.jsx)("a",{href:(0,y.H1)(),className:f().imprint,target:"_blank",children:(0,y.id)("imprint")})]})}var q=a(1664),k=a.n(q),x=a(9332),I=a(2232),T=a.n(I);function _(){let e=(0,x.usePathname)(),t=(0,y.PO)(),a=(0,y.OW)();return(0,i.jsxs)(k(),{href:"/",className:(0,v.cn)(T().logo,"/"!=e&&T().small),children:[(0,i.jsx)("img",{src:a,className:(0,v.cn)(T().src),alt:t}),(0,i.jsx)("span",{className:T().subline,children:t})]})}var j=a(6223),C=a.n(j),S=a(5917),A=a(6611);function P(){return(0,i.jsx)("nav",{className:C().nav,children:(0,i.jsxs)("ul",{className:C().list,children:[(0,i.jsx)("li",{className:C().item,children:(0,i.jsxs)(k(),{href:"/help-and-about-tech-radar",children:[(0,i.jsx)(A.Z,{className:C().icon}),(0,i.jsx)("span",{className:C().label,children:(0,y.id)("pageAbout")})]})}),(0,i.jsx)("li",{className:C().item,children:(0,i.jsxs)(k(),{href:"/overview",children:[(0,i.jsx)(S.Z,{className:C().icon}),(0,i.jsx)("span",{className:C().label,children:(0,y.id)("pageOverview")})]})})]})})}let M=e=>{let{children:t,layoutClass:a="default"}=e;return(0,i.jsxs)("div",{id:"layout",className:(0,v.cn)(u().layout,c().className,u()[a]),children:[(0,i.jsxs)("header",{className:(0,v.cn)(u().container,u().header),children:[(0,i.jsx)(_,{}),(0,i.jsx)(P,{})]}),(0,i.jsx)("main",{className:(0,v.cn)(u().content),children:t}),(0,i.jsx)("footer",{className:(0,v.cn)(u().container,u().footer),children:(0,i.jsx)(w,{})})]})};var z=a(390);function R(e){let{Component:t,pageProps:a,router:n}=e,s=(0,y.uW)();return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(r(),{children:[(0,i.jsx)("title",{children:(0,z.Ui)()}),(0,i.jsx)("meta",{name:"viewport",content:"width=device-width, initial-scale=1"}),(0,i.jsx)("link",{rel:"icon",href:(0,v.p)("/favicon.ico")})]}),(0,i.jsxs)(M,{layoutClass:t.layoutClass,children:[(0,i.jsx)(t,{...a}),s&&(0,i.jsx)(o(),{src:s})]})]})}a(2534),a(8053),a(7236)},2534:function(){},8053:function(){},7236:function(){},2090:function(e){e.exports={style:{fontFamily:"'__Roboto_f7e240', '__Roboto_Fallback_f7e240'",fontStyle:"normal"},className:"__className_f7e240"}},6999:function(e){e.exports={branding:"Footer_branding__feBRv",logo:"Footer_logo__C9vo8",description:"Footer_description__s_1Tl",imprint:"Footer_imprint__j5hGH",socialLinks:"Footer_socialLinks__22g9N"}},4769:function(e){e.exports={layout:"Layout_layout__fvRCC",container:"Layout_container__BVtmP",header:"Layout_header__WZgfV",default:"Layout_default__M3545",content:"Layout_content__PrPCk"}},2232:function(e){e.exports={logo:"Logo_logo__c5nVK",src:"Logo_src__xX_cm",subline:"Logo_subline__E9VoF",small:"Logo_small__JDg_A"}},6223:function(e){e.exports={list:"Navigation_list__VIGxa",icon:"Navigation_icon__uPnQs",label:"Navigation_label__QlTT7"}},4578:function(e){e.exports={links:"SocialLinks_links__P5z2P",icon:"SocialLinks_icon__9QZfU",link:"SocialLinks_link__Y7mGD"}},9008:function(e,t,a){e.exports=a(7219)},1664:function(e,t,a){e.exports=a(4116)},9332:function(e,t,a){e.exports=a(9108)},4298:function(e,t,a){e.exports=a(69)},8293:function(e,t,a){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"actionAsyncStorage",{enumerable:!0,get:function(){return i}});let i=(0,a(6713).createAsyncLocalStorage)();("function"==typeof t.default||"object"==typeof t.default&&null!==t.default)&&void 0===t.default.__esModule&&(Object.defineProperty(t.default,"__esModule",{value:!0}),Object.assign(t.default,t),e.exports=t.default)},1747:function(e,t,a){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"actionAsyncStorage",{enumerable:!0,get:function(){return i.actionAsyncStorage}});let i=a(8293);("function"==typeof t.default||"object"==typeof t.default&&null!==t.default)&&void 0===t.default.__esModule&&(Object.defineProperty(t.default,"__esModule",{value:!0}),Object.assign(t.default,t),e.exports=t.default)},6713:function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"createAsyncLocalStorage",{enumerable:!0,get:function(){return r}});let a=Error("Invariant: AsyncLocalStorage accessed in runtime where it is not available");class i{disable(){throw a}getStore(){}run(){throw a}exit(){throw a}enterWith(){throw a}}let n=globalThis.AsyncLocalStorage;function r(){return n?new n:new i}("function"==typeof t.default||"object"==typeof t.default&&null!==t.default)&&void 0===t.default.__esModule&&(Object.defineProperty(t.default,"__esModule",{value:!0}),Object.assign(t.default,t),e.exports=t.default)},38:function(e,t,a){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"requestAsyncStorage",{enumerable:!0,get:function(){return i}});let i=(0,a(6713).createAsyncLocalStorage)();("function"==typeof t.default||"object"==typeof t.default&&null!==t.default)&&void 0===t.default.__esModule&&(Object.defineProperty(t.default,"__esModule",{value:!0}),Object.assign(t.default,t),e.exports=t.default)},5714:function(e,t,a){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e,t){for(var a in t)Object.defineProperty(e,a,{enumerable:!0,get:t[a]})}(t,{getExpectedRequestStore:function(){return n},requestAsyncStorage:function(){return i.requestAsyncStorage}});let i=a(38);function n(e){let t=i.requestAsyncStorage.getStore();if(t)return t;throw Error("`"+e+"` was called outside a request scope. Read more: https://nextjs.org/docs/messages/next-dynamic-api-wrong-context")}("function"==typeof t.default||"object"==typeof t.default&&null!==t.default)&&void 0===t.default.__esModule&&(Object.defineProperty(t.default,"__esModule",{value:!0}),Object.assign(t.default,t),e.exports=t.default)},6513:function(e){"use strict";e.exports=JSON.parse('{"basePath":"/TechRadar/techradar"}')}},function(e){var t=function(t){return e(e.s=t)};e.O(0,[774,179],function(){return t(6840),t(6036)}),_N_E=e.O()}]);