{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Architecture","text":"<ul> <li>DurabilityInCoding</li> <li>HttpStatusCodes</li> <li>SFIA</li> <li>SolutionDesign</li> <li>UnderstandingTheC4Model</li> <li>architecture decision framework</li> <li>architecture summary</li> <li>scaling the practice of architecture</li> <li>tempLinks</li> </ul>"},{"location":"#c4-model","title":"C4 Model","text":"<ul> <li>c4 model</li> </ul>"},{"location":"#explanation","title":"Explanation","text":"<ul> <li>12 software architecture styles-software engineers should know</li> <li>best-practices-when-documenting-your-code-for-software-engineers</li> <li>explanation</li> <li>what is solution architecture</li> </ul>"},{"location":"#hld","title":"HLD","text":"<ul> <li>hld</li> </ul>"},{"location":"#howto","title":"HowTo","text":"<ul> <li>api-doc</li> <li>howto</li> </ul>"},{"location":"#reference","title":"Reference","text":"<ul> <li>10-architecture-patterns-to-know</li> <li>12 software architecture styles-software engineers should know</li> <li>23-fundamental-principles-in-sw-arch</li> <li>7-architecture-design-patterns</li> <li>Git-branching</li> <li>The-important-architecturla-patterns-you-need-to-know</li> <li>best-practices-when-documenting-your-code-for-software-engineers</li> <li>codeImplementation</li> <li>git branching strategy</li> <li>habits of great software engineers</li> <li>microservices-checklist</li> <li>naming-conventions</li> <li>pragmatic</li> <li>reference</li> <li>throughput and latency</li> <li>uid</li> <li>uid comparison</li> <li>what-is-MACH</li> <li>what-is-the-C4-model</li> <li>what is solution architecture</li> </ul>"},{"location":"#media","title":"media","text":"<ul> <li>media</li> </ul>"},{"location":"#tutorials","title":"Tutorials","text":"<ul> <li>tutorials</li> </ul>"},{"location":"#adr","title":"adr","text":"<ul> <li>adr</li> <li>decision record template</li> </ul>"},{"location":"#architectural_principles","title":"architectural_principles","text":"<ul> <li>README</li> <li>SOLID</li> <li>architectural principles</li> <li>design-docs</li> <li>john lewis principles</li> </ul>"},{"location":"#media_1","title":"media","text":""},{"location":"#rfcs","title":"rfcs","text":"<ul> <li>rfc-template</li> <li>rfcs</li> </ul>"},{"location":"#structurizr","title":"structurizr","text":"<ul> <li>structurizr</li> </ul>"},{"location":"#structurizr_1","title":".structurizr","text":"<ul> <li>.structurizr</li> </ul>"},{"location":"#index","title":"index","text":"<ul> <li>index</li> </ul>"},{"location":"#adrs","title":"adrs","text":"<ul> <li>0001-record-architecture-decisions</li> <li>adrs</li> </ul>"},{"location":"#docs","title":"docs","text":"<ul> <li>0001-design</li> <li>docs</li> </ul>"},{"location":"#general","title":"General","text":""},{"location":"#ai","title":"AI","text":"<ul> <li>aiPrompts</li> </ul>"},{"location":"#mybooks","title":"MyBooks","text":"<ul> <li>Biographies books</li> <li>Football books</li> <li>IT related books</li> <li>Science books</li> <li>updated books</li> </ul>"},{"location":"#scrum","title":"Scrum","text":"<ul> <li>acceptance criteria template</li> <li>scrum</li> <li>sprint goal template</li> <li>user story template</li> </ul>"},{"location":"#assets","title":"assets","text":""},{"location":"Architecture/DurabilityInCoding/","title":"DurabilityInCoding","text":"<ul> <li>Durability in Coding: The Software Engineer\u2019s Playbook</li> <li>Understanding the Core of Long-Lasting Software Design Through Maintainability</li> <li>Adherence to Coding Standards</li> <li>Comprehensive Documentation</li> <li>Modularity</li> <li>Refactoring Regularity</li> <li>Automated Testing</li> </ul>"},{"location":"Architecture/DurabilityInCoding/#durability-in-coding-the-software-engineers-playbook","title":"Durability in Coding: The Software Engineer\u2019s Playbook","text":""},{"location":"Architecture/DurabilityInCoding/#understanding-the-core-of-long-lasting-software-design-through-maintainability","title":"Understanding the Core of Long-Lasting Software Design Through Maintainability","text":"<p>This map delineates key practices for software maintainability, such as adherence to coding standards, comprehensive documentation, modularity, regular refactoring, and automated testing.</p> <p>[\u2026] In software engineering, maintainability grants that software remains adaptable, functional, and relevant over time, which means crafting software in a way that facilitates future modifications, enhancements, and bug fixes with minimal effort and complexity. This notion of maintainability hinges on several fundamental practices.</p> <ul> <li>Adherence to Coding Standards: Uniform coding conventions are the bedrock of maintainable software; they foster a coherent structure, making the codebase intelligible and navigable for different engineers, which is particularly important in collaborative environments or when transferring projects between teams.</li> <li>Comprehensive Documentation: Often undervalued yet vital, thorough documentation acts as a roadmap for future developers; it should elucidate complex logic, outline system architecture, and provide clear guidelines for using and modifying the code.</li> <li>Modularity: Segmenting software into discrete, cohesive modules is akin to building with well-designed puzzle pieces, where each module, with its defined functionality, can be updated, replaced, or debugged independently, enhancing flexibility, and reducing the risk of cascading errors in the system.</li> <li>Refactoring Regularity: Regular refactoring \u2014 the art of restructuring existing code without altering its external behavior \u2014 is akin to pruning a garden for optimal growth. It helps in keeping the codebase efficient, clean, and devoid of redundancies, thereby easing future modifications.</li> <li>Automated Testing: A robust suite of automated tests serves as a sentinel, guarding against regressions and ensuring that latest changes do not inadvertently dismantle existing functionalities; it is a safety net that provides the confidence to modify and extend a system.</li> </ul> <p>In the grand scheme of software lifecycle, maintainability is not merely an option but a necessity, and it is the foresight in design and development that ensures software longevity and resilience in the face of evolving technology landscapes and business requirements, and also it is the subtle art and precise science of crafting software that stands the test of time. </p>"},{"location":"Architecture/DurabilityInCoding/#adherence-to-coding-standards","title":"Adherence to Coding Standards","text":"<p>Coding standards provide a set of rules or guidelines on how to write code, and these might include how to name variables so that they clearly indicate what they store, how to structure loops and functions, or even how to comment on the code.</p> <p>In short, the code becomes more orderly and less chaotic.</p> <p>It\u2019s like keeping your workspace tidy \u2014 it not only looks good but also makes it easier to find things and work efficiently.</p> <p>Moreover, when everyone adheres to the same standards, it\u2019s like speaking the same language. There\u2019s less confusion and fewer misunderstandings, and it becomes easier to spot errors because they stand out in the otherwise uniform code.</p> <p>This uniformity also speeds up the process of fixing bugs and adding new features, and instead of trying to decipher someone else\u2019s unique style of coding, you can focus on the actual problem or the new functionality.</p>"},{"location":"Architecture/DurabilityInCoding/#comprehensive-documentation","title":"Comprehensive Documentation","text":"<p>Good documentation acts as a map for the software, because it provides a clear overview of the system\u2019s architecture, showing how different parts of the software interact with each other.</p> <p>This is especially useful for new team members who need to get up to speed quickly, so they can easily dive into the documentation and get a broad understanding of the system without having to ask others for help constantly.</p> <p>This strategic documentation approach includes details about how to use various functions and components in the software, describing what each part does, why it\u2019s there, and how it should be used, and it reducing the risk of inadvertently affecting other parts of the software making changes or adding new features.</p> <p>Remember also that a good documentation explains the logic behind complex pieces of code, and sometimes, we have to write intricate code to solve difficult problems. Without an explanation, this code can look like a puzzle, really! Documentation gives you the reasoning behind these decisions, making it easier for others to understand and maintain the code in the future.</p>"},{"location":"Architecture/DurabilityInCoding/#modularity","title":"Modularity","text":"<p>Modularity in software engineering refers to the practice of dividing a software system into distinct, independent units, known as modules, where each module is designed to execute a unique part of the software\u2019s functionality. This way, we can isolate specific areas of the software for development or troubleshooting, making the overall process more manageable.</p> <p>The key feature here is that each module encapsulates a specific function or a set of related functions, having then individual modules to be developed, tested, and debugged independently of one another.</p> <p>As a result, we can focus on smaller sections of the software at a time, which simplifies both the development and maintenance processes.</p> <p>Also, another significant benefit of modularity is the ease of making changes or updates, where modifications can be made to a single module without the need to alter the entire software system.</p> <p>This isolation of changes reduces the likelihood of inadvertently introducing errors into unrelated parts of the software.</p>"},{"location":"Architecture/DurabilityInCoding/#refactoring-regularity","title":"Refactoring Regularity","text":"<p>This practice in software engineering concerns the periodic updating and restructuring of existing code to improve its efficiency and readability without changing its external behavior.</p> <p>We\u2019re here talking about continually reviewing and improving the codebase, a process that entails simplifying complex code, removing redundancies, and improving code organization, with the goal to make the code more efficient, easier to understand, and easier to maintain.</p> <p>Over time, as software is updated and new features are added, the code can become cluttered and complicated, we already know that. Refactoring helps definitely to streamline this code, making it easier for us to navigate and work with.</p> <p>Don\u2019t forget also the prevention of technical debt, which refers to the extra development work that arises when code that is easy to implement in the short run is used instead of applying the best overall solution.</p> <p>Regular refactoring helps to reduce this debt by continuously improving the code, thereby avoiding the buildup of issues that can become costly to fix later on.</p>"},{"location":"Architecture/DurabilityInCoding/#automated-testing","title":"Automated Testing","text":"<p>The main advantage of automated testing is its efficiency. Once the tests are set up, they can be run repeatedly at any time, without the need for manual intervention, which saves a significant amount of time compared to manual testing, where each test has to be performed by a person.</p> <p>Automated tests can also run faster than a human tester, allowing for more tests to be completed in a shorter period.</p> <p>Automated testing improves the accuracy of the testing process, and since the tests are performed by software, they are not subject to human error.</p> <p>They will perform the same actions in the same order every time they are run, ensuring consistent and reliable results, which is particularly important for finding and fixing bugs, as it helps to test thoroughly every part of the software.</p>"},{"location":"Architecture/HttpStatusCodes/","title":"Reflecting on Error Management and listing HTTP Status Codes","text":"<p>Under normal operational conditions, interactions between two or more system will result in the exchange numerous codes which notify each system of task status e.g. a 200 return code will represents that all is well and allows the process continuation of further orchestration of a workflow to complete its task. These codes are also useful for process initiators to manage errors and respond to any errors that occur.</p>"},{"location":"Architecture/HttpStatusCodes/#error-management","title":"Error Management","text":"<p>Error Management may refer to the identification, capture, analysis, notification and resolution of problematic\u00a0issues or a fault which may occur during the operation of a system or the exchange of data/messages between one or more systems.</p> <p>It is important to note that Error Management is NOT Incident Management, which is a whole different topic, one for another blog.</p> <p>Errors i.e. systems issues or faults can be classified as critical i.e. when a resolution cannot be applied at run-time to resolve e.g.\u00a0a hardware failure, or non-critical errors which can be \u2018gracefully\u2019 resolved or worked around when they occur, an example of which is a system resource (file, folder) not available and can be resolved by branching to a alternate\u00a0set of processes until\u00a0the requested resource is available. Priorit at run-time should obviously be given to critical errors as these can result in system malfunctions\u00a0that are visible\u00a0to the end user.</p> <p>A core non-functional requirement, when designing a system, is to adequately provision\u00a0for potential\u00a0errors and resolutions,. Solution Architects, as designers of systems, must consider numerous hypothetical problematic\u00a0scenarios and explore how errors can be trapped and subsequently handled , resolved and or mitigated to ensure that\u00a0the system continues to function wit minimum impact on other components.</p> <p>Errors, as we know, can occur for several reasons ranging from incorrect user input, resource access rights privileges, failures complex\u00a0message exchanges due\u00a0to formats between systems and with the numerous scenarios how do we start planning for the worst case? well one approach is to start with a simple set of try / catch options encapsulating\u00a0a catch all default\u00a0which can then be expanded.</p> <p>Below Is a simple depiction of a flow between an action and the desired outcome and where a event fails the elements to consider, obviously this is very generic and only there for illustrate\u00a0purposes;</p> <p></p> <p>The basic illustration above highlights some possible flows which are discussed below;</p> <ol> <li>An action either a manual or automatic\u00a0task invokes a system event e.g. a piece of executable code, invocation of \u00a0API call, a script or a system to system event.</li> <li>Upon successful\u00a0completion of the task the event returns a predefined \u2018agreed\u2019 code or message informing that the event that the task completed\u00a0 successfully.</li> <li>In the event of a non-critical\u00a0failure the event handler of the event will automatically retry the operation and can be configured for multiple retries depending on the use case being performed.</li> <li>If the retry policy fails , then one option (subject to the type of scenario) would be to send the message or request data to a dead letter que (DLQ) i.e. a que set detached for future re-processing or follow on actions.</li> <li>If the task resulted in a error , one which has been provisioned\u00a0for i.e. a known unknown, e.g. lack of a system resource then an error code is returned or handled by the event handler.</li> <li>If the fault is an exception, often caused by the code of the application e.g., a variable divided by zero and thus not possible to recover then this would be captured and recorded in an audit file(log file). Log files are used as a record / audit to track all events in a system and allow support staff resolve issues offline.</li> <li>Upon catching an error or exception that has occurred it would be prudent to time stamp the event when writing to the associated log file.</li> <li>In most cases one will, by default, introduce a retry policy e.g., try every n minutes for \u00a0x times before failing the request. Again a predefined code will be remitted or notified to the recipient or to a central management system.</li> <li>The error policies will also define return codes that relate to specific errors and any \u00a0additional information allowing management / control system or processes to handle and resolve.</li> <li>All triggered events should receive a return message or code i.e., a notification of success or failure.</li> </ol> <p>The above, while very basic, highlights possible actions / flows relating to handling error events, which return a message or predefined code that notify of success or failure and thus support and diagnosis and process continuation steps.</p> <p>Most interactions will follow an action, event, response pattern, where a action will trigger an event that will receive a response and by understanding which are fast becoming industry standards as are http status codes and enable the troubleshooting required when operating systems and sites.</p> <p>System Solution Designs will encapsulate , at a minimum, a set of operations between a client and a web server using HTTP methods, POST, GET, PUT, PATCH, and DELETE which match to create, read, update, and delete (CRUD) operations, respectively.</p> <p>HTTP status codes are three-digit numbers which, as previously mentioned, \u00a0indicate the status of a client's request to a server and at a macro level they are used to indicate if the .</p> <ul> <li>Request was successful.</li> <li>Client needs to take further action and</li> <li>If an error occurred.</li> </ul> <p>These 3 digit codes are clustered into 5 discrete areas of concern \u00a0or class of codes, which range from 100 \u2013 500s where the ;</p> <p></p> <ul> <li>100s: represent a set of Informational codes that highlight that a request initiated by the browser is continuing.</li> <li>200s: are Success codes and returned when a browser request is received, understood, and processed successfully by the server.</li> <li>300s: represent a Redirection when a new resource has been substituted for the requested resource.</li> <li>400s: Client codes show a problem with the request at the client side.</li> <li>500s: Server codes show a request was accepted, but an error was returned by the server which prevented the fulfilment of the request e.g. an API Gateway receives the inbound request but cannot be fulfilled by the backend system for various reasons</li> </ul> <p>Within each of these ranges above, a variety of server codes exist and may be returned by the server. Each individual code has a specific and unique meaning and discussed below;</p>"},{"location":"Architecture/HttpStatusCodes/#http-status-codes","title":"HTTP Status Codes","text":"<p>Numerous server status codes exist, and you will only encounter a few consistently hence we only discuss the common ones but please note there are many more.</p>"},{"location":"Architecture/HttpStatusCodes/#100-status-codes","title":"100 Status Codes","text":"<p>A 100-level status code informs you that the request you\u2019ve made to the server is still in progress. It represents additional information to let you know what\u2019s going on.</p> <p>Code</p><p>Response</p><p>Comment</p><p>100</p><p>Continue</p><p>This signifies that the server in question has received the browser\u2019s request headers and is now ready for the request body to be sent as well. Making the request process more efficient since it prevents the browser from sending a body request when the headers have been rejected.</p><p>101</p><p>Switching protocols</p><p>Your browser has asked the server to change protocols, and the server has complied.</p><p>102</p><p>Processing</p><p>When a server sends the 102-status code, the client will keep the HTTP Connection alive and wait for the final HTTP response to arrive. This avoids timeout of the request</p><p>103</p><p>Early hints</p><p>This returns limited response headers before the rest of the server\u2019s response is ready to send.</p>"},{"location":"Architecture/HttpStatusCodes/#200-status-codes","title":"200 Status Codes","text":"<p>A 200 level response means that everything is working as it should be - Happy Codes \ud83d\ude0a</p> <p>Code</p><p>Response</p><p>Comment</p><p>200</p><p>OK</p><p>The request succeeded where success is related to the HTTP method</p><p>201</p><p>Created</p><p>The server has fulfilled the browser\u2019s request, and as a result, has created a new resource. This is typically the response sent after POST requests, or some PUT requests.</p><p>202</p><p>Accepted</p><p>The server has accepted the request but is still processing it. The request ultimately may or may not result in a completed response.</p><p>203</p><p>Non-Authoritative Information</p><p>This status code may appear when you use a proxy e.g. a API Gateway with the response code could indicate the returned metadata is not exactly the same as is available from the origin server in other words the gateway received a 200 \u201cOK\u201d status code from the origin server but modified the response before passing it on to your browser.</p><p>204</p><p>No Content</p><p>This code means that the server has successfully processed the request but is not going to return any content however the headers may be useful.</p><p>205</p><p>Reset Content</p><p>Informs the user agent to reset the document which sent this request.</p><p>206</p><p>Partial Content</p><p>Enables a browser to resume paused downloads, as well as to split a download into multiple streams. A 206 code is sent when a range header causes the server to send only part of the resource</p><p>207</p><p>Mixture of Responses</p><p>207 (also the bus I used to take to school) as a Http code represents a multi-Status response i.e.\u00a0 mixture of responses supplying the status for multiple independent processes used by WebDAV servers</p>"},{"location":"Architecture/HttpStatusCodes/#300-redirection-status-codes","title":"300 Redirection Status Codes","text":"<p>There are several HTTP statuses codes that go with redirections, i.e., when a resource has moved these are.</p> <p>Code</p><p>Response</p><p>Comment</p><p>300</p><p>Multiple Choices</p><p>The request has more than one possible response and the user should choose one of them. This may occur when there are multiple file type extensions available.</p><p>301</p><p>Moved Permanently</p><p>The URL of the requested resource has changed permanently. The new URL is provided in the response.</p><p>302</p><p>Found</p><p>The requested resource was found, however not at the location where it was expected - used for temporary URL redirection.</p><p>303</p><p>See Other</p><p>A 303 code tells the browser that it found the resource requested via POST, PUT, or DELETE. However, the server sent this response to direct the client to get the requested resource at another URL with a GET request.</p><p>304</p><p>Not Modified</p><p>This is used for caching purposes and informs the browser that the resources stored in the cache hasn\u2019t changed.</p><p>307</p><p>Temporary Redirect.</p><p>The server sends this response to direct the client to get the requested resource at another URL with the same method that was used in the prior request. Note unlike the 302-status code, it does not allow the HTTP method to change</p><p>308</p><p>Permanent Redirect.</p><p>Indicates that the requested resource is now permanently found at a new URL.</p>"},{"location":"Architecture/HttpStatusCodes/#400-client-error-status-codes","title":"400 Client Error Status Codes","text":"<p>At the 400 level, HTTP status codes start to become problematic. These are error codes specifying that there\u2019s a fault with your browser and/or request.</p> <p>Code</p><p>Response</p><p>Comment</p><p>400</p><p>Bad Request</p><p>The server cannot or will not process the request due to a client error (e.g., malformed request syntax, invalid request message etc).</p><p>401</p><p>Unauthorized</p><p>This is returned by the server when the target resource lacks valid credentials, and the client must authenticate itself to get the requested response</p><p>402</p><p>Payment Required</p><p>This response code is reserved for future use and may be used to indicate that a request cannot be fulfilled, usually due to a lack of required funds.</p><p>403</p><p>Forbidden</p><p>This code is returned when a user attempts to access something they do not have permission to view.</p><p>404</p><p>Not found</p><p>The server cannot find the requested resource. i.e., the requested resource does not exist.</p><p>405</p><p>Method not allowed</p><p>The request method is known by the server but is not supported by the target resource. For example, an API Gateway may not allow calling DELETE to remove a resource.</p><p>406</p><p>Not acceptable response.\u201d</p><p>This response is sent when the web server doesn't find any content that conforms to the criteria given.</p><p>407</p><p>Proxy Authentication Required</p><p>A proxy server requires the browser to authenticate itself before continuing.</p><p>408</p><p>The server timed out waiting for the rest of the request from the browser.</p><p>This code is generated when a server times out while waiting for the complete request from the browser. In other words, the server didn\u2019t get the full request that was sent by the browser. One possible cause could be net congestion resulting in the loss of data packets between the browser and the server.</p><p>409</p><p>Conflict</p><p>The server couldn\u2019t process because there\u2019s a conflict with the relevant resource and can occur due to multiple simultaneous edits</p><p>410</p><p>Gone</p><p>The requested content has been permanently deleted from server, with no forwarding address.</p><p>411</p><p>Length Required.</p><p>The requested resource requires the client specify a certain length and it did not.</p><p>412</p><p>Precondition Failed</p><p>The client indicated preconditions in its headers which the server does not meet.</p><p>413</p><p>Payload Too Large</p><p>Your request is larger than the server is willing or able to process.</p><p>414</p><p>URI Too Long</p><p>The URL requested by the client is longer than the server is willing to decode.</p><p>415</p><p>Unsupported Media Type</p><p>The request includes a media type that the server or resource does not support.</p><p>416</p><p>Range Not Satisfiable.</p><p>The request is for a part of a resource that the server is unable to return.</p><p>417</p><p>Expectation Failed</p><p>The server is unable to meet the requirements specified in the request\u2019s expect header field.</p><p>418</p><p>I\u2019m a teapot</p><p>The server refuses the attempt to brew coffee with a teapot. It\u2019s an April Fool\u2019s Joke from 1998?</p><p>422</p><p>Un processable Entity</p><p>The client request has semantic errors, and the server can\u2019t process it.</p><p>425</p><p>Too Early</p><p>Server is unwilling to process a request because it may be repeated.</p><p>426</p><p>Upgrade Required</p><p>Refusal to perform the request using the current protocol but might be willing to do so after the client upgrades to another protocol.</p><p>428</p><p>Precondition Required</p><p>The server requires conditions to be specified before processing the request.</p><p>429</p><p>Too many requests</p><p>User has sent too many requests in a given amount of time (rate-limiting).</p><p>431</p><p>Request Header Fields Too Large</p><p>The server can\u2019t process the request because the header fields are too large. The request may be resubmitted after reducing the size of the request header fields.</p><p>451</p><p>Unavailable for Legal Reasons</p><p>The server prohibits access to the resource you\u2019ve requested (or a set of resources including the one you\u2019ve requested) that cannot legally be provided,</p>"},{"location":"Architecture/HttpStatusCodes/#500-server-error-status-codes","title":"500 Server Error Status Codes","text":"<p>500-level status codes are also considered errors. However, they denote that the problem is on the server\u2019s end. This can make them more difficult to resolve.</p> <p>Code</p><p>Response</p><p>Comment</p><p>500</p><p>Internal Server Error</p><p>The server has met a situation it does not know how to manage. This code is typically generated by third-party plugins, faulty script or a database connection issue.</p><p>501</p><p>Not Implemented</p><p>This error shows that the server does not support the functionality required to fulfil the request.</p><p>502</p><p>Bad Gateway</p><p>This error response means that the server, while working as a gateway to get a response needed to handle the request, got an invalid response.</p><p>503</p><p>Service Unavailable</p><p>The server is not ready to handle the request this could arise when a\u00a0 server is down for maintenance or simply overloaded.</p><p>504</p><p>Gateway Timeout</p><p>This error response is given when the server is acting as a gateway and cannot get a response in time.</p><p>505</p><p>HTTP Version Not Supported</p><p>The server doesn\u2019t support the HTTP version the client used to make the request e.g. a FTP Server</p><p>508</p><p>Resource Limit Is Reached</p><p>limits on resources set by your web host have been reached examples could be when a servers an infinite loop while processing the request</p><p>509</p><p>Bandwidth Limit Exceeded</p><p>Normally is displayed when a site is receiving too much traffic than the host can allow,</p><p>511</p><p>Network Authentication Required</p><p>The request requires added authentication before the request can be serviced. Note: This status is not generated by origin servers, but by the intercepting proxies that control access to the network.</p> <p>Using the above we can transpose the codes onto a set of flows for a typical n-tier web system where the client sends a HTTP Method request to a web server which can orchestrate the relevant command and return one of the above codes listed to highlight the result from the method.</p> <p>A Web Server (http listener) will communicate and exchange messages with downstream\u00a0 systems using similar methods and exploiting the codes listed above to act as a mechanism of process control via the notification responses - consider the illustration below and the exchange of messages.</p> <p></p>"},{"location":"Architecture/SFIA/","title":"SFIA","text":"<ul> <li>SFIA</li> <li>Solution Architect<ul> <li>Guidance notes</li> <li>Solution architecture: Level\u00a04</li> <li>Solution architecture: Level\u00a05</li> <li>Solution architecture: Level\u00a06</li> </ul> </li> <li>Enterprise and business architecture<ul> <li>Guidance notes</li> <li>Enterprise and business architecture: Level\u00a05</li> <li>Enterprise and business architecture: Level\u00a06</li> <li>Enterprise and business architecture: Level\u00a07</li> </ul> </li> <li>Programming/software development<ul> <li>Guidance notes</li> <li>Programming/software development: Level\u00a02</li> <li>Programming/software development: Level\u00a03</li> <li>Programming/software development: Level\u00a04</li> <li>Programming/software development: Level\u00a05</li> <li>Programming/software development: Level\u00a06</li> </ul> </li> <li>Software design<ul> <li>Guidance notes</li> <li>Software design: Level\u00a02</li> <li>Software design: Level\u00a03</li> <li>Software design: Level\u00a04</li> <li>Software design: Level\u00a05</li> <li>Software design: Level\u00a06</li> </ul> </li> <li>Real-time/embedded systems development<ul> <li>Guidance notes</li> <li>Real-time/embedded systems development: Level\u00a02</li> <li>Real-time/embedded systems development: Level\u00a03</li> <li>Real-time/embedded systems development: Level\u00a04</li> <li>Real-time/embedded systems development: Level\u00a05</li> <li>Real-time/embedded systems development: Level\u00a06</li> </ul> </li> <li>Hardware design<ul> <li>Guidance notes</li> <li>Hardware design: Level\u00a03</li> <li>Hardware design: Level\u00a04</li> <li>Hardware design: Level\u00a05</li> <li>Hardware design: Level\u00a06</li> </ul> </li> </ul>"},{"location":"Architecture/SFIA/#sfia","title":"SFIA","text":""},{"location":"Architecture/SFIA/#solution-architect","title":"Solution Architect","text":"<p>Developing and communicating a multi-dimensional solution architecture to deliver agreed business outcomes.</p>"},{"location":"Architecture/SFIA/#guidance-notes","title":"Guidance notes","text":"<p>Activities may include \u2014 but are not limited to:</p> <ul> <li>defining the planned operation and maintenance of the solution within a production environment \u2014 include changes to services, process, organisation, and operating models as well as technology\u00a0</li> <li>ensuring that existing and planned solution components are compatible with relevant architectures, strategies, policies, standards and practices\u00a0</li> <li>considering requirements for security, privacy and testing of solutions</li> <li>taking account of relevant architectures, strategies, policies, standards and practices\u00a0</li> <li>identifying appropriate cloud services</li> <li>developing roadmaps to migrate components to cloud services</li> <li>developing and communicating an implementation roadmap\u00a0</li> <li>providing guidance and risk-based governance to support solution implementation including managing requests for changes and deviations from specifications.</li> </ul>"},{"location":"Architecture/SFIA/#solution-architecture-level-4","title":"Solution architecture: Level\u00a04","text":"<p>Contributes to the development of solution architectures in specific business, infrastructure or functional areas.</p> <p>Identifies and evaluates alternative architectures and the trade-offs in cost, performance and scalability. Determines and documents architecturally significant decisions.</p> <p>Produces specifications of cloud-based or on-premises components, tiers and interfaces, for translation into detailed designs using selected services and products.</p> <p>Supports projects or change initiatives through the preparation of technical plans and application of design principles. Aligns solutions with enterprise and solution architecture standards (including security).</p>"},{"location":"Architecture/SFIA/#solution-architecture-level-5","title":"Solution architecture: Level\u00a05","text":"<p>Leads the development of solution architectures in specific business, infrastructure or functional areas.</p> <p>Leads the preparation of technical plans and ensures that appropriate technical resources are made available. Ensures that appropriate tools and methods are available, understood and employed in architecture development.</p> <p>Provides technical guidance and governance on solution development and integration. Evaluates requests for changes and deviations from specifications and recommends actions.</p> <p>Ensures that relevant technical strategies, policies, standards and practices (including security) are applied correctly.</p>"},{"location":"Architecture/SFIA/#solution-architecture-level-6","title":"Solution architecture: Level\u00a06","text":"<p>Leads the development of architectures for complex solutions ensuring consistency with agreed requirements.</p> <p>Establishes policies, principles and practices for the selection of solution architecture components.</p> <p>Manages trade-offs and balances functional, service quality and systems management requirements within a significant area of the organisation. Communicates proposed decisions to stakeholders.</p> <p>Coordinates and manages the target architecture across multiple projects or initiatives. Maintains a stable, viable architecture and ensures consistency of design and adherence to appropriate standards across multiple projects or initiatives.</p>"},{"location":"Architecture/SFIA/#enterprise-and-business-architecture","title":"Enterprise and business architecture","text":"<p>Aligning an organisation's technology strategy with its business mission, strategy, and processes and documenting this using architectural models.</p>"},{"location":"Architecture/SFIA/#guidance-notes_1","title":"Guidance notes","text":"<p>Enterprise architecture is typically considered across four domains: business, data, applications and infrastructure technologies.\u00a0It may also include information security or legal and regulatory compliance.</p> <p>Activities may include \u2014 but are not limited to:</p> <ul> <li>translating business strategies and objectives into an operating model</li> <li>assessing current capabilities and\u00a0identifying required changes in capabilities to achieve objectives</li> <li>describing the interrelationships between people, organisation, service, process, data, information, technology and the external environment</li> <li>creating, iterating, and maintaining architectural models and views embodying the key principles that describe the organisation's future state, and that enable its evolution</li> <li>implementing enterprise architecture working practices to support and enable iterative/agile working</li> <li>interpreting business goals and drivers</li> <li>documenting and communicating constraints, standards and guiding principles necessary to define, assure and govern the required evolution</li> <li>using architectural models and processes to facilitate changes in the organisation's structure, business processes, information or data, business systems and infrastructure</li> <li>describing where and why the enterprise will benefit from cloud-based services.</li> </ul>"},{"location":"Architecture/SFIA/#enterprise-and-business-architecture-level-5","title":"Enterprise and business architecture: Level\u00a05","text":"<p>Develops models and plans to drive the execution of the business strategy, taking advantage of opportunities to improve business performance.</p> <p>Contributes to creating and reviewing a systems capability strategy which meets the business's strategic requirements.</p> <p>Determines requirements and specifies effective business processes, through improvements in technology, information or data practices, organisation, roles, procedures and equipment.</p>"},{"location":"Architecture/SFIA/#enterprise-and-business-architecture-level-6","title":"Enterprise and business architecture: Level\u00a06","text":"<p>Develops enterprise-wide architecture and processes to embed the strategic application of change in the management of the organisation.</p> <p>Leads the creation and review of a systems capability strategy that meets the strategic requirements of the business. Ensures the buy-in of all key stakeholders.</p> <p>Captures and prioritises market and environmental trends, business strategies and objectives, and identifies the business benefits of alternative strategies. Develops and presents business cases for approval, funding and prioritisation of high-level initiatives.</p> <p>Sets strategies, policies, standards and practices to ensure compliance between business strategies, technology strategies, and enterprise transformation activities.</p>"},{"location":"Architecture/SFIA/#enterprise-and-business-architecture-level-7","title":"Enterprise and business architecture: Level\u00a07","text":"<p>Directs the development of enterprise-wide architecture and processes to embed the strategic application of change in the management of the organisation.</p> <p>Directs the creation and review of an enterprise capability strategy to support the strategic requirements of the business. Identifies the business benefits of alternative strategies.</p> <p>Ensures compliance between business strategies, enterprise transformation activities and technology directions, setting strategies, policies, standards and practices.</p>"},{"location":"Architecture/SFIA/#programmingsoftware-development","title":"Programming/software development","text":"<p>Developing software components to deliver value to stakeholders.</p>"},{"location":"Architecture/SFIA/#guidance-notes_2","title":"Guidance notes","text":"<p>Activities may include \u2014 but are not limited to:</p> <ul> <li>identifying, creating and applying software development and security standards and processes</li> <li>planning and designing software components</li> <li>estimating time and effort required for software development</li> <li>constructing, amending and verifying software components</li> <li>applying test-driven development and ensuring appropriate test coverage</li> <li>using peer review techniques \u2014 such as pair programming</li> <li>documenting software components</li> <li>understanding and obtaining agreement to the value of the software components to be developed</li> <li>selecting appropriate development methods and life cycles</li> <li>applying recovery techniques to ensure the software being developed is not lost\u00a0</li> <li>implementing appropriate change control to software development practices</li> <li>resolving operational problems with software and fixing bugs</li> </ul> <p>Depending on requirements and the characteristics of the project or assigned work\u00a0 \u2014\u00a0 software development methods and life cycles can be predictive (plan-driven) approaches or adaptive (iterative/agile) approaches.</p>"},{"location":"Architecture/SFIA/#programmingsoftware-development-level-2","title":"Programming/software development: Level\u00a02","text":"<p>Designs, codes, verifies, tests, documents, amends and refactors simple programs/scripts.</p> <p>Applies agreed standards and tools to achieve a well-engineered result.</p> <p>Reviews own work.</p>"},{"location":"Architecture/SFIA/#programmingsoftware-development-level-3","title":"Programming/software development: Level\u00a03","text":"<p>Designs, codes, verifies, tests, documents, amends and refactors moderately complex programs/scripts.</p> <p>Applies agreed standards and tools to achieve a well-engineered result.</p> <p>Monitors and reports on progress. Identifies issues related to software development activities. Proposes practical solutions to resolve issues.</p> <p>Collaborates in reviews of work with others as appropriate.</p>"},{"location":"Architecture/SFIA/#programmingsoftware-development-level-4","title":"Programming/software development: Level\u00a04","text":"<p>Designs, codes, verifies, tests, documents, amends and refactors complex programs/scripts and integration software services.</p> <p>Contributes to the selection of the software development methods, tools and techniques.</p> <p>Applies agreed standards and tools to achieve well-engineered outcomes.</p> <p>Participates in reviews of own work and leads reviews of colleagues' work.</p>"},{"location":"Architecture/SFIA/#programmingsoftware-development-level-5","title":"Programming/software development: Level\u00a05","text":"<p>Takes technical responsibility across all stages and iterations of software development.</p> <p>Plans and drives software construction activities. Adopts and adapts appropriate software development methods, tools and techniques.</p> <p>Measures and monitors applications of project/team standards for software construction, including software security.</p> <p>Contributes to the development of organisational policies, standards, and guidelines for software development.</p>"},{"location":"Architecture/SFIA/#programmingsoftware-development-level-6","title":"Programming/software development: Level\u00a06","text":"<p>Develops organisational policies, standards, and guidelines for software construction and refactoring.</p> <p>Plans and leads software construction activities for strategic, large and complex development projects.</p> <p>Adapts or develops new methods and organisational capabilities and drives adoption of, and adherence to policies and standards.</p>"},{"location":"Architecture/SFIA/#software-design","title":"Software design","text":"<p>Specifying and designing software to meet defined requirements by following agreed design standards and principles.</p>"},{"location":"Architecture/SFIA/#guidance-notes_3","title":"Guidance notes","text":"<p>Activities may include \u2014 but are not limited to:</p> <ul> <li>designing software applications, components, interfaces and related characteristics (including security)</li> <li>using design concepts and patterns to develop software design and provide the basis for software construction and verification</li> <li>evaluating alternative solutions and trade-offs to facilitate design decisions</li> <li>taking into account functional and non-functional requirements such as the target environment, performance, security and existing systems</li> <li>developing prototypes/simulations to enable informed decision-making</li> <li>adopting and adapting software design models, tools and techniques based on the context of the work.</li> </ul> <p>Depending on requirements and project or work assigned characteristics, software design techniques can be predictive (plan-driven) or adaptive (iterative/agile) approaches.</p>"},{"location":"Architecture/SFIA/#software-design-level-2","title":"Software design: Level\u00a02","text":"<p>Creates and documents detailed designs for simple software applications or components.</p> <p>Applies agreed modelling techniques, standards, patterns and tools.</p> <p>Contributes to the design of components of larger software systems.</p> <p>Reviews own work.</p>"},{"location":"Architecture/SFIA/#software-design-level-3","title":"Software design: Level\u00a03","text":"<p>Undertakes complete design of moderately complex software applications or components.</p> <p>Applies agreed standards, guidelines, patterns and tools. Assists as part of a team in the design of components of larger software systems. Specifies user and/or system interfaces.</p> <p>Creates multiple design views to address the different stakeholders' concerns and to handle functional and non-functional requirements. Assists in the evaluation of options and trade-offs.</p> <p>Collaborates in reviews of work with others as appropriate.</p>"},{"location":"Architecture/SFIA/#software-design-level-4","title":"Software design: Level\u00a04","text":"<p>Designs complex software applications, components and modules.</p> <p>Uses appropriate modelling techniques following agreed software design standards, guidelines, patterns and methodology. Creates and communicates multiple design views to balance stakeholders' concerns and to satisfy functional and non-functional requirements. Identifies, evaluates and recommends alternative design options and trade-offs.</p> <p>Models, simulates or prototypes the behaviour of proposed software to enable approval by stakeholders, and effective construction of the software. Verifies software design by constructing and applying appropriate methods.</p> <p>Reviews, verifies and improves own designs against specifications. Leads reviews of others\u2019 designs.</p>"},{"location":"Architecture/SFIA/#software-design-level-5","title":"Software design: Level\u00a05","text":"<p>Specifies and designs large or complex software applications, components and modules.</p> <p>Adopts and adapts software design methods, tools and techniques. Undertakes impact analysis on major design options, makes recommendations and assesses and manages associated risks. Specifies prototypes/simulations to enable informed decision-making.</p> <p>Evaluates software designs to ensure adherence to standards and identifies corrective action. Ensures that the software design balances functional, quality, security and systems management requirements.</p> <p>Contributes to the development of organisational software design and architecture policies and standards.</p>"},{"location":"Architecture/SFIA/#software-design-level-6","title":"Software design: Level\u00a06","text":"<p>Leads the selection and development of software design methods, tools and techniques.</p> <p>Develops organisational policies, standards, and guidelines for software design and software architectures.</p> <p>Ensures adherence to technical strategies and systems architectures (including security).</p>"},{"location":"Architecture/SFIA/#real-timeembedded-systems-development","title":"Real-time/embedded systems development","text":"<p>Designing and developing reliable real-time software typically within embedded systems.</p>"},{"location":"Architecture/SFIA/#guidance-notes_4","title":"Guidance notes","text":"<p>Embedded systems provide a dedicated function within a more extensive mechanical or electronic system with real-time, safety, security, and reliability constraints. Typically, it involves interfacing with hardware, sensors, and actuators for monitoring and control in industrial, automotive, aerospace, medical or robotic equipment, including IoT (Internet of Things) devices and intelligent systems.</p> <p>These systems typically perform critical functions and have demanding requirements including \u2014 but not limited to \u2014 integrity, reliability, safety, security or power consumption.</p> <p>Activities may include \u2014 but are not limited to:</p> <ul> <li>defining non-functional system requirements such as performance, reliability, safety, and security, including requirements for power, cost, physical space or response time\u00a0</li> <li>building in fail-safe/secure characteristics for graceful degradation</li> <li>using specialist techniques to define systems and to\u00a0assure essential attributes are achieved</li> <li>applying comprehensive verification, validation and testing methods and techniques</li> <li>using specialised tools such as in-circuit emulators, logic analysers and digital oscilloscopes.</li> </ul>"},{"location":"Architecture/SFIA/#real-timeembedded-systems-development-level-2","title":"Real-time/embedded systems development: Level\u00a02","text":"<p>Designs, builds and tests simple real-time/embedded components as part of an overall larger systems design.</p> <p>Uses appropriate programming languages to drive simple sensors and actuators.</p> <p>Learns to use specialised tools such as in-circuit emulators, logic analysers and digital oscilloscopes.</p>"},{"location":"Architecture/SFIA/#real-timeembedded-systems-development-level-3","title":"Real-time/embedded systems development: Level\u00a03","text":"<p>Designs, builds and integrates medium-complexity real-time/embedded components as part of an overall larger systems design.</p> <p>Follows agreed standards and uses specialist tools such as in-circuit emulators and logic analysers.</p> <p>Drives specialist hardware, typically sensors and actuators, and optimises component code for performance.</p> <p>Applies a range of approaches to the verification and testing of real-time components.</p>"},{"location":"Architecture/SFIA/#real-timeembedded-systems-development-level-4","title":"Real-time/embedded systems development: Level\u00a04","text":"<p>Designs, builds and integrates complex real-time/embedded components and sub-systems.</p> <p>Designs physical layouts that reflect the connection between system components to test and optimise performance.</p> <p>Builds system prototypes and simulations to aid development and enable debugging, testing and troubleshooting of embedded software.</p> <p>Applies a range of approaches to the validation, verification and testing of real-time components and sub-systems. Is fully familiar with a range of specialist tools.</p>"},{"location":"Architecture/SFIA/#real-timeembedded-systems-development-level-5","title":"Real-time/embedded systems development: Level\u00a05","text":"<p>Designs and develops real-time/embedded architectures and systems to meet agreed system requirements.</p> <p>Plans and manages the development of complex real-time/embedded systems and selects the approaches and techniques to be used.</p> <p>Analyses design options and trade-offs between hardware and software, makes recommendations and assesses and manages associated risks. Ensures that effective validation, verification and testing is undertaken throughout development.</p> <p>Oversees the integration of multiple sub-systems into the overall system.</p>"},{"location":"Architecture/SFIA/#real-timeembedded-systems-development-level-6","title":"Real-time/embedded systems development: Level\u00a06","text":"<p>Provides overall direction and leadership in the development of real-time/embedded systems.</p> <p>Develops organisational policies, standards and guidelines for real-time/embedded systems architectures and designs.</p> <p>Plans and leads strategic, large and complex real-time/embedded system developments. Identifies opportunities to exploit new technologies and improve existing technologies and practices.</p> <p>Drives adherence to technical strategies, systems architectures and the implementation of risk-based verification, validation and testing. Develops effective implementation and procurement strategies.</p>"},{"location":"Architecture/SFIA/#hardware-design","title":"Hardware design","text":"<p>Specifying a hardware design model for a defined system architecture.</p>"},{"location":"Architecture/SFIA/#guidance-notes_5","title":"Guidance notes","text":"<p>Examples of computing and communications equipment include \u2014 but are not limited to \u2014\u00a0 semiconductor processors, high performance computing (HPC) architectures and digital signals processor (DSP) and graphics processor chips.</p> <p>Activities may include \u2014 but are not limited to:</p> <ul> <li>defining how hardware components fit into the system and integrate with software if required</li> <li>selecting, designing, specifying, integrating and prototyping of hardware components</li> <li>adhering to industry standards including compatibility, safety, security, reliability and sustainability</li> </ul> <p>This is typically related to the integration with, or connection to, an IT infrastructure or network.</p>"},{"location":"Architecture/SFIA/#hardware-design-level-3","title":"Hardware design: Level\u00a03","text":"<p>Follows selected standard approaches and design patterns to design simple hardware components.</p> <p>Seeks guidance when deviating from established design patterns. Takes account of target environment, performance, security, safety, reliability and sustainability requirements.</p> <p>Translates logical designs into physical designs. Tests the performance of prototypes and production output against specification.</p> <p>Submits hardware designs for approval. Documents all work using required standards, methods and tools.</p>"},{"location":"Architecture/SFIA/#hardware-design-level-4","title":"Hardware design: Level\u00a04","text":"<p>Designs hardware components, taking account of target environment, performance, security, safety, reliability and sustainability requirements.</p> <p>Translates logical designs into physical designs and delivers technical prototypes of proposed components for approval and production.</p> <p>Designs the tests to measure the performance of prototypes and production output against specification and inform iterative development.</p>"},{"location":"Architecture/SFIA/#hardware-design-level-5","title":"Hardware design: Level\u00a05","text":"<p>Specifies and designs complex hardware components/systems.</p> <p>Selects appropriate design standards, methods and tools, consistent with agreed enterprise policies and ensures they are applied effectively.</p> <p>Undertakes impact analysis on major design options and assesses and manages associated risks. Ensures that hardware designs balance functional, quality, safety, security, systems management, reliability and sustainability requirements.</p> <p>Reviews others' designs to ensure selection of appropriate technology, efficient use of resources, and effective integration of multiple systems and technology. Contributes to policy for selection of components.</p>"},{"location":"Architecture/SFIA/#hardware-design-level-6","title":"Hardware design: Level\u00a06","text":"<p>Provides overall direction and leadership in the hardware design practice within an enterprise.</p> <p>Influences industry-based models for the development of new technology and components.</p> <p>Develops effective procurement strategies, consistent with business needs.</p> <p>Drives adoption and ensures adherence to organisational policies, strategies and standards for hardware design.</p>"},{"location":"Architecture/SolutionDesign/","title":"SolutionDesign","text":"<p>January 14, 2024</p> <p>Today\u2019s short blog, the first for 2024, derives from recent work in which I required a classic Table of Contents (TOC) for a Solution Design(SD) Document/ Artefact.</p> <p>To create this TOC, I began by listing elements one would expect to see in the artefact i.e. primary section headers, which is challenging when you consider the \u2018purpose\u2019 of the document, and\u00a0 the target audience both of which impact the overall structure of the document.</p> <p>For most artefacts, it would be prudent to tailor the SD to meet the needs and challenges of the specific\u00a0 problem. For example, a basic SD for a new in-house development may be very technical, especially when the target audience may be the Systems Community (Developers, Testers, Service Management etc.) and resulting in an artefact with the content and focus on\u00a0Component Views(Building Module Blocks) , Deployment Views and\u00a0the Runtime Operations. </p> <p>So, when I considered the elements for the SD Artefact I wanted to create a generic TOC, one which could be re-used for a wider audience and this resulted in the headings shown below.</p> <p></p> <p>To generate the TOC, I decided to create a simple document with the above headings. This document was then further expanded to add context and descriptions for each heading resulting - the result was the autogenerated TOC depicted below.</p> <p>The Table below provides a brief description of each heading shown and a narrative for use.  </p> Heading Description Document Management This is the control section of the document and provides the metadata for the Solution Design (SD) document i.e., the date of document creation, location, fast updated and by whom, which is often represented as a set of tables, examples of possible content are listed below. Executive Summary This section of the document summarizes key points found in this document and provides a snapshot of the context and salient points addressed. Introduction This is the main body of the Solution Design Document and should contain as much \u2018known\u2019 information as practically possible to provide sufficient information for stakeholders (developers, testers etc). If there are any gaps that have been identified, then this section should highlight this and provide any mitigating actions to be confirmed (TBC) Requirements This section of the document highlights and references the main requirements for the solution and should be presented in a format that meets the organizational standard. Requirements should map and trace back to the Capabilities, Services and Enablers leveraged to realize the Solution. High-Level Component Views In this section of the document, we seek to present a view which encapsulates a set of high-level components which form part or all the solution, these views can represent the services and enablers that are required for the realization of the solution and the section should state both internal and external boundaries of the system. Technical Design / Inventory In some cases, it may be necessary, for clarity, to show the next level of decomposition for the components of the solution (we normally refer to this as the level 2 set of attributes). Whilst this section of the document often presents a high-level view of the services and enablers and associated technical components you may wish to use the appendices to show the lower level of detail and use this section to keep it at a high abstract level. We may wish to discuss the inventory of components that will be used in this section Impact Analysis The Impact Analysis (IA) section can be brief or extended subject to the complexity of the solution. The IA should highlight any major impact of any proposed changes in terms of interactions, process, people, or organizational changes. Security Architecture In most cases, your Organization will have specific control, policies and or guardrails which the Solution must comply with, and documents completed or complied before any solution can be deployed into production. Implementation Approach This section is normally light weight in content and will reference the project plan, backlogs and defined sprints. Risks, Mitigation &amp; Treatment Risks may be identified in the Security or Impact section, however if there is a set of specific high level of risk associated with the project (timelines, dependencies etc) then this should be documented. Below are some considerations. Appendices This will obviously be dependent on the content in the SD however, some considerations should be given to. - Referenced Documents - Compliance Matrix (optional)- Glossary of Terms / Acronyms <p>As\u00a0 mentioned previously , the TOC should be adapted to suit the problem. however, the above should provide some generic items to consider.</p>"},{"location":"Architecture/UnderstandingTheC4Model/","title":"Understanding the C4 Model for Software Architecture Documentation","text":"<p>When it comes to documenting software systems, using a structured and effective approach is crucial. One such approach is the C4 model, which provides a clear and hierarchical way of representing different levels of detail in software system diagrams. The C4 model can be used to document software systems effectively. Whether you are a beginner or an experienced developer, understanding the C4 model will help you create comprehensive and meaningful system diagrams.</p>"},{"location":"Architecture/UnderstandingTheC4Model/#what-is-the-c4-model","title":"What is the C4 Model?","text":"<p>The C4 model, created by Simon Brown, is a hierarchical approach to visualizing the architecture of a software system. It consists of four levels of diagrams, with each level providing increasing detail and granularity.</p>"},{"location":"Architecture/UnderstandingTheC4Model/#the-four-levels-are","title":"The four levels are:","text":"<p>Level 1: System Context diagram: The system context diagram is the highest-level diagram that provides an overview of the entire system and its interactions with external entities. It focuses on actors (customers with specific roles) and systems, showcasing the relationships between them.  </p> <p>Level 2: Container diagram: The container diagram zooms in from the system context and focuses on the major containers that host code or store data within the system. It provides a more detailed view of the system\u2019s architecture, including the different types of containers and their interactions.  </p> <p>Level 3: Component diagram: The component diagram further zooms in and shows the major structural building blocks of the application and their interactions. It represents the key components of the system and how they fit together to provide functionality.  </p> <p>Level 4: Code diagram: The code diagram is the deepest level of zoom and provides a 1\u20131 mapping with the actual code of the system. While this diagram exists, it is often not used as the code itself serves as a visual representation, and there are better tools out there for this purpose. </p> <p>In addition to these four levels, there are a few supplementary diagrams that are worth mentioning:</p> <ul> <li> <p>System Landscape diagram: The system landscape diagram provides a view of all the software systems within an enterprise. It helps in understanding the overall context and relationships between different systems. From a pragmatic viewpoint, a system landscape diagram essentially serves as a system context diagram, but without emphasizing a specific software system.   </p> </li> <li> <p>Deployment diagram: The deployment diagram focuses on the infrastructure aspects of the system, including networking, CDNs, gateways, load balancers, and resource groups. It helps in understanding how the system is deployed and the dependencies on external services.  </p> </li> <li> <p>Dynamic diagram: The dynamic diagram is a cut-down version of any of the previous diagrams and is used to show specific features or use cases. It can be thought of as similar to a sequence diagram, showcasing the interactions between components or containers.   </p> </li> </ul>"},{"location":"Architecture/UnderstandingTheC4Model/#modeling-vs-diagramming","title":"Modeling vs Diagramming","text":"<p>Before we dive deeper into the C4 model, it\u2019s important to understand the difference between modeling and diagramming. Modeling is the act of describing the system, including its actors, systems, containers, components, and their relationships. It focuses on capturing the structure and behavior of the system. On the other hand, diagramming is the process of visually representing the model. It involves creating diagrams that depict the different elements of the model in a clear and understandable way.</p> <p>The distinction between modeling and diagramming becomes powerful when we can create a single model and reuse different elements of it in multiple diagrams. This allows us to apply the DRY (Don\u2019t Repeat Yourself) principle to our diagrams, making them more maintainable and reducing duplication of effort.</p>"},{"location":"Architecture/UnderstandingTheC4Model/#introducing-structurizr","title":"Introducing Structurizr","text":"<p>Now that we have a good understanding of the C4 model and its different levels, let\u2019s explore a tool that can help us create these diagrams effectively. Structurizr is an excellent tool that enables us to model a system using a custom DSL (Domain-Specific Language) and then generate multiple diagrams from that model. It provides a seamless way to create, visualize, and document software architectures.</p>"},{"location":"Architecture/UnderstandingTheC4Model/#setting-up-structurizr","title":"Setting up Structurizr","text":"<p>To get started with Structurizr, we need to set up the tool. There are different versions available, but for our purposes, Structurizr Lite works fantastic. It can be installed locally via Docker. Let\u2019s walk through the Docker installation process:</p> <ul> <li>Pull the Structurizr Lite image from Docker Hub:</li> </ul> <p>docker pull structurizr/lite</p> <ul> <li>Run the container, exposing a port on the host and providing a path to our working directory:</li> </ul> <p>docker run -it \u2014 rm -p 8080:8080 \u2014 name structurizr-lite -v C:/PATH_LOCAL_DRIVE:/usr/local/structurizr structurizr/lite</p> <p>It\u2019s important to note that one Docker image can only point to one working directory. If you have multiple workspaces in different directories, you\u2019ll need to have one container running for each of them, and you\u2019ll want to run on different ports, so you\u2019ll adjust the -p 8081:8081 or whatever port you wish to use. You can manage these containers easily using Docker Desktop.</p>"},{"location":"Architecture/UnderstandingTheC4Model/#creating-models-and-diagrams-with-structurizr","title":"Creating Models and Diagrams with Structurizr","text":"<p>Once we have Structurizr up and running, we can start creating our models and diagrams. Let\u2019s take an example of an e-commerce system and build a model for it. Here\u2019s how the model might look:</p> <pre><code>workspace {  \n model {  \n   enterprise {  \n  customerPerson = person \"Customer\"  \n  warehousePerson = person \"Warehouse Staff\"  \n\n  ecommerceSystem = softwareSystem \"Example E-Commerce Store\" {  \n    storeContainer = container \"Web App SPA\" \"E-Commerce Store\" \"Angular\" \"Browser,Microsoft Azure - Static Apps,Azure\"  \n    stockContainer = container \"Stock Management Portal SPA\" \"Order fulfillment, stock management, order dispatch\" \"Angular\" \"Browser,Microsoft Azure - Static Apps,Azure\"  \n    dbContainer = container \"Database\" \"Customers, Orders, Payments\" \"SQL Server\" \"Database,Microsoft Azure - Azure SQL,Azure\"  \n    apiContainer = container \"API\" \"Backend\" \"ASP.NET Core\" \"Microsoft Azure - App Services,Azure\" {  \n   group \"Web Layer\" {  \n     policyComp = component \"Authorization Policy\" \"Authentication and authorization\" \"ASP.NET Core\"  \n     controllerComp = component \"API Controller\" \"Requests, responses, routing and serialization\" \"ASP.NET Core\"  \n     mediatrComp = component \"MediatR\" \"Provides decoupling of requests and handlers\" \"MediatR\"  \n   }  \n   group \"Application Layer\" {  \n     commandHandlerComp = component \"Command Handler\" \"Business logic for changing state and triggering events\" \"MediatR request handler\"  \n     queryHandlerComp = component \"Query Handler\" \"Business logic for retrieving data\" \"MediatR request handler\"  \n     commandValidatorComp = component \"Command Validator\" \"Business validation prior to changing state\" \"Fluent Validation\"  \n   }  \n   group \"Infrastructure Layer\" {  \n     dbContextComp = component \"DB Context\" \"ORM - Maps LINQ queries to the data store\" \"Entity Framework Core\"  \n   }  \n   group \"Domain Layer\" {  \n     domainModelComp = component \"Model\" \"Domain models\" \"DTO/POCO classes\"  \n   }  \n    }  \n  }  \n\n  emailSystem = softwareSystem \"Email System\" \"Sendgrid\" \"External\"  \n\n  customerPerson -&gt; storeContainer \"Places Orders\" \"https\"  \n  warehousePerson -&gt; stockContainer \"Dispatches Orders\" \"https\"  \n  apiContainer -&gt; emailSystem \"Trigger emails\" \"https\"  \n  emailSystem -&gt; customerPerson \"Delivers emails\" \"https\"  \n\n  stockContainer -&gt; apiContainer \"uses\" \"https\"  \n  storeContainer -&gt; apiContainer \"uses\" \"https\"  \n  apiContainer -&gt; dbContainer \"persists data\" \"https\"  \n\n  dbContextComp -&gt; dbContainer \"stores and retrieves data\"  \n  storeContainer -&gt; controllerComp \"calls\"  \n  stockContainer -&gt; controllerComp \"calls\"  \n  controllerComp -&gt; policyComp \"authenticated and authorized by\"  \n  controllerComp -&gt; mediatrComp \"sends queries &amp; commands to\"  \n  mediatrComp -&gt; queryHandlerComp \"sends query to\"  \n  mediatrComp -&gt; commandValidatorComp \"sends command to\"  \n  commandValidatorComp -&gt; commandHandlerComp \"passes command to\"  \n  queryHandlerComp -&gt; dbContextComp \"Gets data from\"  \n  commandHandlerComp -&gt; dbContextComp \"Update data in\"  \n  dbContextComp -&gt; domainModelComp \"contains collections of\"  \n   }  \n }  \n\n     views {  \n\n        systemlandscape \"SystemLandscape\" {  \n                include ecommerceSystem emailSystem  \n                autoLayout  \n            }  \n\n        systemContext ecommerceSystem \"Context\" {  \n            include \\* emailSystem  \n            autoLayout  \n        }  \n\n        container ecommerceSystem \"Container\" {  \n            include \\*  \n            autoLayout  \n        }  \n\n        component apiContainer \"Component\" {  \n            include \\* customerPerson warehousePerson  \n            autoLayout  \n        }  \n\n        themes default \"https://static.structurizr.com/themes/microsoft-azure-2021.01.26/theme.json\"  \n\n        styles {  \n            element \"Azure\" {  \n                color #ffffff  \n            }  \n            element \"External\" {  \n                background #783aba  \n                color #ffffff  \n            }  \n            element \"Database\" {  \n                shape Cylinder  \n            }  \n            element \"Browser\" {  \n                shape WebBrowser  \n            }  \n        }  \n    }  \n}\n</code></pre> <p>For the full dsl on my GitHub, click here</p> <p>The DSL used to create the model may seem a bit complex at first, but it follows a straightforward syntax. Each element in the model is defined using a specific DSL command, such as person, softwareSystem, container, or component. Relationships between elements are defined using the -&gt; operator, along with a description and transport information.</p> <p>Once we have our model defined, we can generate different diagrams from it using Structurizr. Let\u2019s take a look at how we can generate the context, container, and component diagrams.</p>"},{"location":"Architecture/UnderstandingTheC4Model/#generating-context-diagrams","title":"Generating Context Diagrams","text":"<p>To generate a context diagram, we can use the following view definition:</p> <pre><code>systemContext ecommerceSystem \"Context\" {  \n  include \\*  \n  emailSystem  \n  autoLayout  \n}  \n</code></pre> <p>This view definition includes all elements from the model and adds the emailSystem as an external system. The autoLayout command ensures that the diagram is automatically laid out for better readability. Running this view definition will generate a context diagram for our e-commerce system, showcasing the relationships between actors, systems, and the external email system.</p>"},{"location":"Architecture/UnderstandingTheC4Model/#generating-container-diagrams","title":"Generating Container Diagrams","text":"<p>To generate a container diagram, we can use the following view definition:</p> <pre><code>container ecommerceSystem \"Container\" {  \n  include \\*  \n}\n</code></pre> <p>This view definition includes all elements from the model, generating a container diagram that showcases the major containers within the system and their interactions. Running this view definition will give us a container diagram that provides a more detailed view of the system\u2019s architecture.</p>"},{"location":"Architecture/UnderstandingTheC4Model/#generating-component-diagrams","title":"Generating Component Diagrams","text":"<p>To generate a component diagram, we can use the following view definition:</p> <pre><code>component apiContainer \"Component\" {  \n  include \\*  \n  customerPerson  \n  warehousePerson  \n  autoLayout  \n}\n</code></pre> <p>This view definition includes all elements from the model, along with the <code>customerPerson</code> and <code>warehousePerson</code> actors. The <code>autoLayout</code> command ensures that the diagram is automatically laid out for better readability. Running this view definition will generate a component diagram that showcases the major components within the system and how they interact with the actors.</p>"},{"location":"Architecture/UnderstandingTheC4Model/#additional-features-of-structurizr","title":"Additional Features of Structurizr","text":"<p>In addition to generating diagrams from models, Structurizr provides additional features to help with documenting architectures. It allows for adding documentation and Architectural Decision Records (ADRs) to the model, making it a comprehensive tool for software architecture documentation.</p>"},{"location":"Architecture/UnderstandingTheC4Model/#wrapping-it-up","title":"Wrapping it up","text":"<p>We explored the C4 model and how it can be used to document software systems with relative ease. We have learned about the four levels of the C4 model, from the system context diagram to the code diagram, and how each level provides increasing detail and granularity. We have also seen the difference between modeling and diagramming, and how Structurizr can be used as a powerful tool to create, visualize, and document software architectures.</p> <p>Using the C4 model and Structurizr, you can create comprehensive and meaningful system diagrams that accurately represent the architecture of your software systems. Whether you are a beginner or an experienced developer, understanding and utilizing the C4 model will help you communicate and document your software architectures effectively. So, get started with the C4 model and Structurizr, and take your software documentation to the next level!</p>"},{"location":"Architecture/architecture_decision_framework/","title":"Architecture decision framework","text":"<p>\ud835\udddb\ud835\uddfc\ud835\ude04 \ud835\ude01\ud835\uddfc \ud835\uddf1\ud835\uddff\ud835\uddf6\ud835\ude03\ud835\uddf2 \ud835\ude06\ud835\uddfc\ud835\ude02\ud835\uddff \ud835\uddee\ud835\uddff\ud835\uddf0\ud835\uddf5\ud835\uddf6\ud835\ude01\ud835\uddf2\ud835\uddf0\ud835\ude01\ud835\ude02\ud835\uddff\ud835\uddf2 \ud835\uddf1\ud835\uddf2\ud835\uddf0\ud835\uddf6\ud835\ude00\ud835\uddf6\ud835\uddfc\ud835\uddfb\ud835\ude00 \ud835\ude04\ud835\uddf6\ud835\ude01\ud835\uddf5 \ud835\uddee \ud835\ude00\ud835\uddf6\ud835\uddfa\ud835\uddfd\ud835\uddf9\ud835\uddf2 \ud835\uddf3\ud835\uddff\ud835\uddee\ud835\uddfa\ud835\uddf2\ud835\ude04\ud835\uddfc\ud835\uddff\ud835\uddf8  </p> <p>I held a talk at the Heapcon conference on how to communicate your software architecture efficiently. \ud835\uddd4\ud835\uddff\ud835\uddf0\ud835\uddf5\ud835\uddf6\ud835\ude01\ud835\uddf2\ud835\uddf0\ud835\ude01\ud835\ude02\ud835\uddff\ud835\uddee\ud835\uddf9 \ud835\uddf1\ud835\uddf2\ud835\uddf0\ud835\uddf6\ud835\ude00\ud835\uddf6\ud835\uddfc\ud835\uddfb\ud835\ude00 shape our projects, embodying the technical vision and laying the groundwork for the long-term sustainability and adaptability of systems.  </p> <p>Those decisions can be as simple as choosing a code style to more important ones, such as which architectural style we select or which database type. After months of engineering, remembering the \ud835\uddff\ud835\uddee\ud835\ude01\ud835\uddf6\ud835\uddfc\ud835\uddfb\ud835\uddee\ud835\uddf9\ud835\uddf2 \ud835\uddef\ud835\uddf2\ud835\uddf5\ud835\uddf6\ud835\uddfb\ud835\uddf1 \ud835\uddee \ud835\uddf1\ud835\uddf2\ud835\uddf0\ud835\uddf6\ud835\ude00\ud835\uddf6\ud835\uddfc\ud835\uddfb can be tricky because you need more context that influenced it.  </p> <p>Here is our \ud835\ude00\ud835\uddf6\ud835\uddfa\ud835\uddfd\ud835\uddf9\ud835\uddf2 \ud835\uddf3\ud835\uddff\ud835\uddee\ud835\uddfa\ud835\uddf2\ud835\ude04\ud835\uddfc\ud835\uddff\ud835\uddf8 \ud835\uddf3\ud835\uddfc\ud835\uddff \ud835\uddee\ud835\uddff\ud835\uddf0\ud835\uddf5\ud835\uddf6\ud835\ude01\ud835\uddf2\ud835\uddf0\ud835\ude01\ud835\ude02\ud835\uddff\ud835\uddee\ud835\uddf9 \ud835\uddf1\ud835\uddf2\ud835\uddf0\ud835\uddf6\ud835\ude00\ud835\uddf6\ud835\uddfc\ud835\uddfb\ud835\ude00:  </p> <ol> <li>\ud835\uddd7\ud835\uddf6\ud835\ude00\ud835\uddf0\ud835\ude02\ud835\ude00\ud835\ude00\ud835\uddf6\ud835\uddfc\ud835\uddfb  </li> </ol> <p>When requirements came for some of them, we needed to discuss them first. We have weekly recurring places for conversation, where we discuss spikes, challenges, and decisions.  </p> <p>Some discussions led to the Request for Comments (RFC) process.  </p> <ol> <li>\ud835\udde5\ud835\uddf2\ud835\uddfe\ud835\ude02\ud835\uddf2\ud835\ude00\ud835\ude01 \ud835\uddf3\ud835\uddfc\ud835\uddff \ud835\uddd6\ud835\uddfc\ud835\uddfa\ud835\uddfa\ud835\uddf2\ud835\uddfb\ud835\ude01\ud835\ude00 (\ud835\udde5\ud835\uddd9\ud835\uddd6)  </li> </ol> <p>In this process, we create RFC documents, which are a formalized approach to proposing changes, improvements, or the introduction of new features within a project. These documents have the following structure:  </p> <p>\ud83d\udd39 Summary - what is it about \ud83d\udd39 Scope - what is our scope \ud83d\udd39 Participants - who work on this \ud83d\udd39 Status - in which status it is \ud83d\udd39 Proposal - the central part, what we propose as a solution \ud83d\udd39 Pros/Cons - what are the pros/cons of our approach \ud83d\udd39 Alternatives - what are alternatives to our proposal \ud83d\udd39 Questions - if we have some open questions \ud83d\udd39 Conclusion - what we conclude in the end  </p> <p>The RFC process usually goes in three steps:  </p> <p>1. Creation of the RFC 2. Comments 3. Conclusion  </p> <p>When working on RFC, we also include two things:  </p> <p>\ud83d\udd39 Our internal \ud835\udde7\ud835\uddf2\ud835\uddf0\ud835\uddf5 \ud835\udde5\ud835\uddee\ud835\uddf1\ud835\uddee\ud835\uddff (you can also use Thougthworks radar or some other) \ud83d\udd39 Our internal \ud835\udde7\ud835\uddf2\ud835\uddf0\ud835\uddf5 \ud835\ude00\ud835\ude01\ud835\uddee\ud835\uddfb\ud835\uddf1\ud835\uddee\ud835\uddff\ud835\uddf1\ud835\ude00 (e.g., how do we do logging, exception handling, etc.)  </p> <ol> <li>\ud835\uddd4\ud835\uddff\ud835\uddf0\ud835\uddf5\ud835\uddf6\ud835\ude01\ud835\uddf2\ud835\uddf0\ud835\ude01\ud835\ude02\ud835\uddff\ud835\uddee\ud835\uddf9 \ud835\uddd7\ud835\uddf2\ud835\uddf0\ud835\uddf6\ud835\ude00\ud835\uddf6\ud835\uddfc\ud835\uddfb \ud835\udde5\ud835\uddf2\ud835\uddf0\ud835\uddfc\ud835\uddff\ud835\uddf1\ud835\ude00 (\ud835\uddd4\ud835\uddd7\ud835\udde5)  </li> </ol> <p>When we have a conclusion from the RFC document, we use those to create ADRs. ADRs are documents that capture essential decisions about a software system's architecture. Usually, we store it in the codebase, close to the issues they describe. They record the decision itself, the context in which it was made, the factors considered, and the expected impact. By providing a historical record, ADRs help communicate decisions to stakeholders, ensure consistency in decision-making, and promote transparency and accountability.  </p> <p>ADRs usually have the following \ud835\ude00\ud835\ude01\ud835\uddff\ud835\ude02\ud835\uddf0\ud835\ude01\ud835\ude02\ud835\uddff\ud835\uddf2:  </p> <p>\ud83d\udd39 Title \ud83d\udd39 Status \ud83d\udd39 Context \ud83d\udd39 Decision \ud83d\udd39 Consequences  </p> <p>When we finish the process, we can continue implementing our requirements.</p>"},{"location":"Architecture/architecture_summary/","title":"architecture","text":""},{"location":"Architecture/architecture_summary/#notes-to-consider","title":"Notes to consider","text":"<ul> <li>Principles</li> <li>As is and to be</li> <li>Tactical and strategic to be</li> <li>Diagrams</li> <li>C4 Model</li> <li>Sequence diagrams</li> <li>BPMN</li> <li>Use case</li> <li>activity</li> <li>State</li> <li>Timing</li> <li>Inputs to Architecture</li> <li>General<ul> <li>Business Strategy and Objectives</li> </ul> </li> <li>Products specific<ul> <li>Business drivers</li> <li>Product Requirements </li> </ul> </li> </ul>"},{"location":"Architecture/architecture_summary/#artefacts","title":"Artefacts","text":"<ul> <li>Project/Product Specific</li> <li>Stakeholder Map</li> <li>Solution Vision and Scope: <ul> <li>This document outlines the overall vision, objectives, and scope of the solution.</li> </ul> </li> <li>Architecture Requirements: <ul> <li>These are the specific requirements that the solution architecture must address.</li> </ul> </li> <li>Current State Assessment: <ul> <li>An analysis of the existing systems, processes, and technologies that the solution will interact with or replace.</li> </ul> </li> <li>Solution Architecture Design: <ul> <li>This includes high-level and detailed architecture diagrams, component specifications, and interface designs.</li> </ul> </li> <li>Risk Assessment and Mitigation Plan: <ul> <li>Identification of potential risks to the solution's success and strategies to mitigate them.</li> </ul> </li> <li>Implementation and Transition Plan: <ul> <li>A roadmap for implementing the solution, including timelines, resource requirements, and transition strategies.</li> </ul> </li> <li>Architecture Decision Log (ADR's - Architecture Decision Records) : <ul> <li>A record of key decisions made during the architecture design process and the rationale behind them.</li> </ul> </li> <li>Compliance and Governance Documentation: <ul> <li>Documentation related to regulatory compliance, security requirements, and governance standards.</li> </ul> </li> <li>General</li> <li>API Design Guidelines</li> <li>Best practices<ul> <li>Input to</li> <li>Coding Standards</li> </ul> </li> <li>Common Accepted Design Patterns</li> </ul>"},{"location":"Architecture/architecture_summary/#requirements","title":"Requirements","text":"<ul> <li>Consider NFR's and not just Functional requirements</li> </ul>"},{"location":"Architecture/architecture_summary/#a-basic-non-functional-requirements-checklist","title":"A Basic Non-Functional Requirements Checklist","text":"<p>NFR checklists are not unique products, they are easily found on the web with numerous examples available for reuse, one such example can be found at the Open Group\u2019s website under the ToGAF Requirements Management section.</p> <p>Most of you are probably familiar with NFR\u2019s \u2013 However if not, you can consider them a set of requirements/criteria used during the run-time operation of a system and not the specific behaviours that the system must exert.</p> <p>The NFR\u2019s vary in importance and are usually\u00a0 aligned to the\u00a0context of the system e.g. Operational Safety could be classed as a NFR, especially when working in hazardous conditions (Oil Rigs, Gas Plants etc.), but not a common NFR in most system designs I have come across.</p> <p>The diagram below highlights most common NFR\u2019s, and are presented together with typical examples in the table below;</p> <p></p> <p>Non Functional Components</p> <p>NFA</p><p>NFR \u2013 \u00a0 Examples</p><p>Security</p><p>(define key security requirements)</p><p> </p><ul><li> Login / Access levels</li><li>\u00a0 Create, Read, Update, and Delete (CRUD) levels.</li><li>\u00a0 Access permissions for application data may only be \u00a0 changed by the system\u2019s data administrator</li><li> Password requirements \u2013 \u00a0 length, special characters, expiry, recycling policies, 2FA</li><li>\u00a0 Inactivity timeouts \u00a0 \u2013 durations, actions, traceability</li><li>\u00a0 System data backed up every x hours and copies stored in a secure off-site location</li><li> Encryption (data in flight \u00a0 and at rest) \u2013 All external communications between the system\u2019s data server \u00a0 and clients must be encrypted</li><li>\u00a0 Data Classification \u00a0 / System Accreditation: All Data must be protectively marked and stored / protected.</li></ul><p>Audit</p><p> (Define the level of traceability for \u00a0 transactions required)</p><ul><li>\u00a0 System must maintain full traceability of transactions</li><li>\u00a0 Audited Objects \u00a0 are defined</li><li>\u00a0 Audited database fields \u2013 which data fields require audit \u00a0 info?</li><li>\u00a0 File characteristics \u00a0 \u2013 size before, size after, structure</li><li>\u00a0 User and transactional time stamps, etc</li></ul><p>Capacity</p><p>(Provisioning for growth)</p><p> </p><ul><li> Throughput \u2013 how many \u00a0 transactions at peak time does the \u00a0 system need to be able to handle</li><li> Storage \u2013 (memory/disk) \u2013 \u00a0volume of data the system will page / \u00a0persist at run time to disk</li><li>\u00a0 Year-on-year growth \u00a0 requirements\u00a0 (users, processing &amp; storage)</li><li>\u00a0 e-channel growth projections</li></ul><p>Performance</p><p> </p><ul><li> Response times \u2013 application \u00a0 loading, browser refresh times, etc.</li><li> Processing times \u2013 functions, \u00a0 calculations, imports, exports</li><li> Query and Reporting times \u2013 initial loads and \u00a0 subsequent loads, ETL times</li><li> Interoperbility</li></ul><p>Availability</p><p> (uptime)</p><ul><li>\u00a0 Hours of operation</li><li>\u00a0 holidays, maintenance times, etc</li><li>\u00a0 \u2022 Locations of operation \u2013 where should it be available \u00a0 from, what are the connection requirements?</li></ul><p>Reliability</p><ul><li>\u00a0 The ability of a system to perform its required \u00a0 functions under stated conditions for a specific period of time.</li><li>\u00a0 Mean Time Between Failures \u2013 What is the acceptable \u00a0 threshold for down-time?</li><li>\u00a0 Mean Time To Recovery \u2013 if broken, how much time is \u00a0 available to get the system back up again?</li></ul><p>Recoverability</p><p>(in the event of failure..)</p><ul><li>\u00a0 Recovery process</li><li>\u00a0 Recovery Point Objectives (RPO)</li><li>\u00a0 Recovery Time Objectives (RTO)</li><li>\u00a0 Backup frequencies \u2013 how often is the transaction data, \u00a0 config data, code backed-up?</li></ul><p>Robustness</p><ul><li>\u00a0 The ability of the system to resist change without \u00a0 adapting its initial stable configuration \u2013 operational characteristics with growth?</li><li>\u00a0 Fault trapping (I/O) , Application Hooks, SMNP \u2013 how to \u00a0 handle failures ?</li></ul><p>Integrity</p><p> (Consistency of events,\u00a0values, methods, measures, expectations &amp; outcomes)</p><ul><li>\u00a0 Application Integrity</li><li>\u00a0 Data integrity \u2013 referential integrity in database \u00a0 tables and interfaces</li><li>\u00a0 Information Integrity \u2013 during transformation</li></ul><p> </p><p>Maintainability</p><p>(The ease with which the system can be maintained)</p><ul><li>\u00a0 Conformance to Enterprise Architecture standards</li><li>\u00a0 Conformance to Technical design standards</li><li>\u00a0 Conformance to coding standards</li><li>\u00a0 Conformance to best practices.</li></ul><p>Usability</p><ul><li>\u00a0 User Standards (Look \u00a0 / Feel)</li><li>\u00a0 Internationalization / localization requirements \u2013 \u00a0 languages, spellings, keyboards, etc</li></ul><p>Documentation</p><ul><li>\u00a0 User Documentation</li><li>\u00a0 System Documentation (Production Acceptance?)</li><li>\u00a0 Help?</li><li>\u00a0 Training Material</li></ul>"},{"location":"Architecture/architecture_summary/#the-solution-architecture-life-cycle","title":"The Solution Architecture Life Cycle","text":"<p>Each layer of the Solution Architect Lifecycle is briefly discussed below. However, it must be noted that the focus at each layer will be aligned to the top layer i.e. the problem/issue.</p>"},{"location":"Architecture/architecture_summary/#identification","title":"Identification","text":"<p>Often a problem requires a working group to establish if something is worth considering e.g. bid on a project or to discuss a \u2018pattern\u2019 that is emerging in the technology landscape which requires investigation from the reporting systems e.g. Capacity &amp; Performance / Security incidents.</p> <p>Solution Architects are often engaged at this stage to provide advice on possible options for resolving a problem and to assist in triggering the next phase of the activity.</p>"},{"location":"Architecture/architecture_summary/#defining-the-context-of-the-problemissue","title":"Defining the context of the problem/issue","text":"<p>No project or programme of work in real terms commences without a Business Case i.e. a document that captures the reasoning for initiating a project or task with basic costings and outcomes documented. If the problem issue is a Technical one then the Solution Architect is required to elaborate (in simplistic terms) the context of the problem from the systems viewpoint.</p>"},{"location":"Architecture/architecture_summary/#capturing-the-requirements","title":"Capturing the Requirements","text":"<p>During the requirements capture phase the Solution Architect will spend much of his/her time focusing on the system elements of the requirements and trying to understand the system components characteristics.</p> <p>During this stage, there will be a bias towards the non-functional elements of the system.</p> <p>During this stage, a Minimum Viable Product can be elicited from stakeholders, i.e. the minimum components and effort that will be required to deliver the functional and non-functional requirements can be sketched to define further costs analysis.</p> <p>It must be noted that the requirements must also encapsulate any legal compliance issues e.g. GDPR requirement and any Enterprise Architectural directives.</p>"},{"location":"Architecture/architecture_summary/#defining-product-backlog-and-or-level-0-systems-architecture","title":"Defining Product Backlog and or Level 0 Systems Architecture","text":"<p>Once the problem is known, documented and decomposed into a set of clearly defined functional and non-functional requirements a level 0 systems architecture can be produced to outline a solution.</p> <p>Advertisement</p> <p>Privacy Settings</p> <p>Where possible reusable components should be highlighted to shorten time to market and increase savings to the project.</p> <p>At this stage, the outcome should be a level 0 design and in many cases, result in a product backlog for the solution</p> <p>The level 0 design will facilitate the project to determine the cost and effort involved to deliver the outcome required.</p>"},{"location":"Architecture/architecture_summary/#designing-the-solution-and-breaking-down-the-deliverables-into-sprints","title":"Designing the Solution and breaking down the deliverables into sprints","text":"<p>At this stage, a detailed analysis of the Level 0 is undertaken and elaborated further to deliver a detailed design document and the subsequent technical sprints to deliver the project.</p> <p>Depending on the Solution it may be prudent to produce a low-level design to support the Solution Design.</p>"},{"location":"Architecture/architecture_summary/#options-for-realising-the-solution-and-enacting","title":"Options for realising the solution and enacting","text":"<p>I have discussed previously the options that are available for analysis from \u201cdo nothing\u201d to \u201cBuild\u201d but from a cost / do ability view the option should be selected that leverages existing relationships /services and best value for money.</p>"},{"location":"Architecture/architecture_summary/#delivering-solution-into-production","title":"Delivering Solution into production","text":"<p>Developing, procuring\u00a0 or modifying a system requires deployment into a production environment and thus the Solution Architect must be capable of defining the environments (test, prod, pre-prod) for the route to live. Often this will involve working with the Service Architects to design the Service and the operational elements (often extrapolated from the NFRs) of the system.</p> <p>If we were to take all the elements above and assign time that the Solution Architect would be involved in the project then we could produce a graph like the one below;</p> <p></p> <p>In summary, the Solution Architect is an important role and requires skills that evolve with each engagement and has a role to play from problem realisation to delivery into service of a solution.</p>"},{"location":"Architecture/scaling_the_practice_of_architecture/","title":"Scaling the Practice of Architecture, Conversationally","text":"<p>Architecture need not be a monologue; delivered top-down from the minds and mouths of a centralised few. This article describes another way to do architecture; as a series of conversations, driven by a decentralised and empowering decision-making technique, and supported by four learning and alignment mechanisms: Decision Records, Advisory Forum, Team-sourced Principles, and a Technology Radar</p>"},{"location":"Architecture/scaling_the_practice_of_architecture/#when-traditional-approaches-to-architecture-break-down","title":"When \"traditional\" approaches to architecture break down","text":"<p>I'll be honest, \u201ctraditional\u201d approaches to software architecture (i.e. non-coding, decision-taking, diagram-drawing) are hard for me to make work at the best of times. But while using them in the world of continuously delivering autonomous teams I\u2019ve repeatedly found myself faced with an impossible task: to be everywhere, tolerating significant contextual variance, and blocking no-one.</p> <p>It made me wonder. Was there an alternative?</p> <p>There was: I stopped taking architectural decisions. Completely.</p> <p>In this article I\u2019ll introduce this alternative mindset and the associated set of tools and practices which allow me to upend the traditional role of a \u201cSoftware Architect\u201d while simultaneously bringing the practice of software architecture to the fore across development teams. More importantly, I\u2019ll explain how, within this alternative approach, everyone can do the architecting they need, safely and efficiently, without everything descending into chaos. [1]</p> <p>We need more ways to \u201cdo\u201d architecture, not less.</p> <p>The moves in software delivery towards ever-increasing team autonomy have, in my mind at least, heightened the need for more architectural thinking combined with alternative approaches to architectural decision-making.</p> <p>Ensuring our software teams experience true autonomy raises a key problem: how might a small group of architects feed a significant number of hungry, value-stream-aligned teams? Why? Because in this environment Architects [2] now need to be in many, many more places at once, doing all that traditional \"architecture\".</p> <p>What we need is a workable way to approach the human-scaling challenges of team autonomy and the architectures which manifest as a result.</p> <p>In the remainder of this article I\u2019ll introduce an alternative way of doing and governing architecture. I\u2019ll explain in detail what it is, how it works, and how you might adopt it yourself. Most importantly, I\u2019ll highlight how to fail, in order that you might succeed.</p>"},{"location":"Architecture/scaling_the_practice_of_architecture/#the-most-fundamental-element-decision-making-via-the-advice-process","title":"The most fundamental element: decision-making via the \u201cAdvice Process\u201d","text":"<p>Let\u2019s take as our starting point a team which we aim to make maximally independent. Clearly this team will need somehow to engage in architectural thinking and decision-taking, but how?</p> <p>These \u201cmany centres of decision making\u201d are precisely what we need, yet straight away it\u2019s clear that traditional, top-down architecture, with a select group of all-powerful architects taking all the decisions, runs contrary to such a decentralised model. \u201cAnd yet\u201d, the challenge is voiced \u201cdecisions still need to be made - that\u2019s what architecture is\u201d, and these skeptics are right.</p> <p>These architectural decisions must still be made deliberately - otherwise we\u2019ll be back where we started, or worse. Therefore, the first aspect in this alternative approach, it\u2019s core element in fact, must describe how it delivers on decision-making. It\u2019s called the \u201cAdvice Process\u201d.</p> <p>The Advice Process is the core element of this anarchist, decentralised approach to architecture. It\u2019s greatest quality is it\u2019s remarkably simplicity. It comprises one rule, and one qualifier:</p> <p>The Rule: anyone can make an architectural decision.</p> <p>The Qualifier: before making the decision, the decision-taker must consult two groups: The first is everyone who will be meaningfully affected by the decision. The second is people with expertise in the area the decision is being taken.</p> <p>That\u2019s it. That\u2019s the Advice Process in its entirety.</p> <p>This apparent straightforwardness hides however a key concept which it\u2019s worth making explicit; while decision-takers are in no way obliged to agree with the advice the folks in these two consulted groups give them, they must seek it out, and they must listen to and record it. We are not looking for consensus here, but we are looking for a broad range of inputs and voices.</p> <p>A challenge frequently raised against this concerns just how many people must be consulted. It is a valid concern, but a mitigatable one. When deploying this technique we create a checklist to help those in the decision-making seat identify who to speak to, and in which regard. InfoSec impacted? Talk to the CISO. Getting close to PII? Engage Mary in the data team and Vanessa in legal. A potential change to the user onboarding flow? Talk to your UX lead. About to adopt a new cloud service? Chat to Kris the cloud architect. Thinking about a change to your API? Speak to all the leads of the teams who are your consumers.</p> <p>Sometimes this list of consultees can be a long one. That\u2019s fine. Some decisions are large ones, and the advice-scope is a clear indication of both size and import. Sometimes decisions can be made smaller in scope and many consequently are. Other times the sheer number of folks impacted makes the decide-ee think again. Is this thing which might make their life a little bit easier really worth the effort of consulting all those people? Or, can they split this large decision into multiple, smaller decisions? When decisions do proceed, they are frequently right-sized purely as a matter of expediency. [3]</p> <p>Can we push the Advice Process further? Yes we can, and we ought. I always encourage those following it to specifically seek out those who will disagree with them. Freed from the need to agree with what they hear, they inevitably engage far more seriously. Consequently the depth and breadth of advice received is greater. Decisions don\u2019t tend to suffer as a consequence either. Neither does their learning.</p> <p>Which brings us to the broader topic of benefits of the Advice Process. When deployed, I have always seen better, faster, more accountable decisions, and most importantly decisions which are understood and owned by those who implement them, precisely because the decidee is the one with the need as well as the one who is accountable.</p> <p>As a side-effect, the pool of available decision-takers also grows, each of whom will soon be on the look-out for decisions which need to be made, and, given the feeling of empowered safety that the Advice Process gives them, flag them up and drive them to conclusion. The fact that a team's need for a decision to be taken can be met by themselves also leads to appropriate levels of bias-to-action, with accountability acting as a brake when it's required.</p> <p>By working in this way we remove both the need for a fixed and permanent hierarchy and an abiding master decision-taker. It is for these two reasons that the Advice Process is the most fundamental element of this approach to architecture, because decentralised decision-making is the core element of anything which aspires to call itself \u201canarchistic\u201d.</p> <p>But wait, did we just remove in one fell swoop all need for we \u201ctraditional\u201d architects? Not at all, but clearly our role has changed. In the following sections of this article - which introduces the supporting elements of this approach - we will see a set of rejuvenated practices and tools which allow us to get the teams, and the businesses they underpin, where they need to be.</p> <p>Before we proceed to these supporting elements it is useful to take a short detour to highlight and discuss the one thing that all the remaining elements to this decentralised approach share, and also have in common with the core element: their focus on conversation, and it\u2019s role in efficiently arriving at, and spreading, shared understanding.</p>"},{"location":"Architecture/scaling_the_practice_of_architecture/#the-fundamental-role-of-conversations","title":"The fundamental role of conversations","text":"<p>Alberto Brandolini, inventor of Event Storming famously quipped \u201cit is the developer\u2019s assumptions which get shipped to production\u201d and he\u2019s right; it\u2019s primarily what a developer understands about a target architecture that matters, not what is in the head or diagrams of a lead architect. This problem is age-old. Eric Evans tackled it in \u201cDomain Driven Design: Tackling Complexity in the Heart of Software\u201d and more recently my colleague Erik D\u00f6rnenberg has spoken about it in his presentation \u201cArchitecture without Architects\u201d.</p> <p>To me, it is this architecture, the one which is in the heads of those writing the code, that is the most important. In adopting this decentralised approach, where the practice of architectural decision-making is much more dispersed, this problem is in many ways, mitigated.</p> <p>That\u2019s something which helps me sleep at night.</p> <p>However this decentralised, anarchistic approach then places front and centre another problem which all architectures must address: the delivery of a coherent whole. Here, we would seem to be at a disadvantage with our alternative approach. If everyone is empowered to make a decision, how do we, the \u201ctraditional\u201d architects and ones who perhaps care most about the overall end result, ensure that the sum of all the individual decisions combine to form a coherent whole? How might we incorporate a longer-term perspective into those same decisions? And how might we support those who suddenly find themselves taking on levels of responsibility for which they might not feel comfortable?</p> <p>Fortunately, another practitioner, and thinker in this space, Ruth Malan, has seen this before and shares the answer in her article \u201cDo we still need architects?\u201d:</p> <p>[In order for an architecture to be successful] it is very much about ensuring that conversations that are needed to be happening are happening - not always initiating them, nor always helping to focus or navigate them, but ensuring they do happen [\u2026] and guiding when needed</p> <p>-- Ruth Malan</p> <p>Our adoption of the Advice Process opened up the space for anyone to make decisions, but it has also put conversations, the responsibility to seek out expertise, and think about impact at the core. The remainder of the elements of this approach, each of which supports the core element focus specifically on ensuring those conversations are as timely, focused and effective as possible. There are four of them:</p> <ol> <li>a thinking and recording tool</li> <li>a time and place for conversations;</li> <li>a light to illuminate and guide towards a unified direction;</li> <li>a means to sense the current technical landscape and climate.</li> </ol> <p>We'll cover each of these in turn in a few seconds, but first I need to clarify two things.</p>"},{"location":"Architecture/scaling_the_practice_of_architecture/#what-about-strategy-and-cross-functional-requirements","title":"What about strategy and cross-functional requirements?","text":"<p>It's worth a few sentences on what isn't covered in this approach: technical strategy and cross-functional requirements (CFRs).</p> <p>Clearly both are essential for all software endeavors of any meaningful size:</p> <p>A well evangelized strategy can help the organization advance by having decentralized teams prioritize technical activities which are best aligned with the org's maturity and needs. Clearly the best technical decisions are those which support the strategy, and when this is the case this can be called out clearly.</p> <p>A clear set of testable CFRs also helps a decentralised set of teams ensure that they look beyond their immediate, local delivery, and meet the minimum requirements for playing coherently in the shared ecosystem.</p> <p>However, technical governance refers to both these rather than encompassing them - they contribute to the context within which it operates - and so I've not gone into any detail on them here. But what does governance include beyond a means to ensure good technical decisions? Let's take a look.</p>"},{"location":"Architecture/scaling_the_practice_of_architecture/#the-four-supporting-elements","title":"The Four Supporting Elements","text":""},{"location":"Architecture/scaling_the_practice_of_architecture/#1-a-thinking-and-recording-tool-decision-records","title":"1. A thinking and recording tool: Decision Records","text":"<p>The first supporting element is Architectural Decision Records or ADRs. These are lightweight documents, frequently stored in source code repositories alongside the artefacts they describe. Now, there are a variety of formats which various adopters have chosen to champion, but the key elements which I insist on are as follows: [4]</p> name description title which includes a unique identifier, and the decision itself (e.g. \u201cADR001 - Use AKS for Kubernetes Pods\u201d) status typically \u201cDraft\u201d, \u201cProposed\u201d, \u201cAdopted\u201d, \u201cSuperseded\u201d and \u201cRetired\u201d decision the decision that has been taken in a few sentences (frequently bold or italicized so it stands out) context the forces and current contextual circumstances which have necessitated this decision options considered each option considered, described briefly, with pros and cons. (Typically the option proposed / adopted comes first in this list) consequences the ramifications of this decision, both positive and negative advice this reflects the raw outputs from following the Advice Process. It is here that all advice given is recorded. This ought to include the name of the advice giver, and the date the advice was given. This can frequently take the forms of comments, and if these are provided directly by the advice-giver, then recording the meta-data is automatic. <p>I\u2019ve found in practice that having such a lightweight ADR template structure is not only a great way to record architectural decisions - it also helps teams learn to make architectural decisions. These key elements operate like a thinking checklist, and prompt the decide-ee regarding what they need to think about, and more importantly have conversations about.</p> <p>What\u2019s more, ADRs serve to reinforce the Advice Process by making it a requirement on ADR authors to capture and record all advice they get. I also encourage authors to engage with this advice directly in their ADR options section, whether they choose to follow it or not. It is one thing to seek advice and write it down. It is quite another to actively wrestle with it. The fruits get sweeter the more you engage.</p> <p>It will come as no surprise to learn that consequently, a series of ADRs, and their surrounding conversations provide an excellent learning ground for people wanting to begin to take on the task of decision-taking; everything is out in the open, including the dissent and compromise-making. Less experienced practitioners of architecture can peruse the history of what went before them quickly and easily, see good (and quite likely less-good) examples, and see decisions being taken (and perhaps also being revoked when circumstances change / the team learned more). They are almost a thinking and decision lore for a set of software, written in the hand of those who contributed most to it.</p> <p>While sadly I can\u2019t share with you examples of these conversations I\u2019ve had with my clients, there are some great examples of ADRs out on the public internet, courtesy of Thoughtworks-alumni Wisen Tanasa and his startup Upmo. I\u2019d encourage you to take a look. They come blessed by none other than Michael Nygard himself.</p>"},{"location":"Architecture/scaling_the_practice_of_architecture/#2-a-time-and-place-for-conversations-the-architecture-advisory-forum","title":"2. A time and place for conversations: The Architecture Advisory Forum","text":"<p>The second supporting element in this alternative approach exists to make all the conversations supporting this advice-seeking easier: a weekly, hour-long Architecture Advisory Forum (\u201cAAF\u201d).</p> <p>Fundamentally, this is a regular and recurring place and time for conversations. Your ideal attendees are delegates from each team as well as your key representatives from your Advice Process checklist. However, the invite should remain completely open to encourage transparency and openness. The timeliness and quality of the conversations which take place is a key indicator of success, but equally important is the breadth and diversity of views shared, and the same goes for the contributors. If architecture is being \u201cdone\u201d here, and lessons shared and learned, then you\u2019re winning.</p> <p>The standing agenda typically begins as follows:</p> <ul> <li>team representatives quickly share new spikes (giving early warning of probable future decisions and allow the attendees to share existing knowledge and experience)</li> <li>discussions about each new \u201cproposed\u201d decision (presented by those making the decision, captured ahead of time in the form of an ADR)</li> <li>a re-visit of other decision-statuses (we timebox these, both to limit the window for incoming advice, and also to allow us to revisit a decision which we made with imperfect information)</li> <li>a look at our collective four key metrics, our cloud spend trends, and finally</li> <li>any other business (aka \u201cAOB\u201d)</li> </ul> <p>A cursory glance might give the impression that an AAF is just a new title for a standard meeting. The one typically known as a \u201cTech Advisory Board\u201d, \u201cArchitecture Decision Forum\u201d or \u201cArchitecture Review Board\u201d. There are however several key differences.</p> <p>Firstly, the Advice Process reigns. Decisions taken to the AAF are still owned and made by the originators. The only thing other attendees can do is offer advice, or suggest additional people to seek advice from. Hence the name.</p> <p>This brings us to the second key difference. Given the Advice Process qualifiers, the invitees to the AAF are those typically affected / possessing relevant expertise. This means those typically present include representatives from each feature team (and not just the lead; BAs/POs and QAs are frequently present), people from other programmes of work, UX, Product, Operations, and occasionally senior execs.</p> <p>The combination of these two differences leads us to the third, and most important key difference: the conversations. The Advice Process is great, but it\u2019s conversations can frequently be 1-1. When they take place in an AAF there is an audience, so many people can listen and everyone can learn. The amount of organisational, domain, legacy, and experiential information and architectural skill-deployment shared at these sessions is unlike anything I have ever seen, and despite being a potentially dry meeting, it is the most well-attended, and most broadly participated hour of our week. It is one of the most significant contributors to the quest for a learning organisation that there is. AAFs encourage disagreement, and celebrate failure / changes of decision based on lessons learned. This all combines to broaden and deepen the general understanding of an architecture, virtually guaranteeing it ends up in the running software.</p>"},{"location":"Architecture/scaling_the_practice_of_architecture/#3-a-light-to-illuminate-a-unified-goal-team-sourced-architectural-principles","title":"3. A light to illuminate a unified goal: Team-sourced Architectural Principles","text":"<p>Having architectural principles is not new, though sadly I rarely encounter serviceable ones. Always important, in a world of highly-autonomous-teams they become essential because they are the means by which an aligned delivery direction is achieved without the need for control.</p> <p>So what makes a good architectural principle? Firstly, it must provide a criteria with which to evaluate our architectural decisions (which in practice means it must be specific, measurable, achievable, realistic and testable, aka \u201cS.M.A.R.T\u201d). Secondly, it must support the business\u2019s strategic goals. Thirdly, it must articulate the consequences / implications it necessarily contains within it. Finally, taken together as a set, they should number neither too few to cover the key needs which architectural principles meet, nor too many that teams cannot remember them all.</p> <p>There is a great deal I could write here about bad architectural principles but I\u2019ll stick to the key aspects. Firstly, they are not practices. Practices are how you go about something, such as following TDD, or Trunk Based Delivery, or Pair Programming. This is not to say that practices are bad (indeed Dr Forsgren\u2019s \u201cAccelerate\u201d is full of recommendations regarding for their set of circumstances) they\u2019re just not architectural principles.</p> <p>Watch out for slipping into the other end of the scale too - general principles. \u201cKeep it simple\u201d and \u201cDon\u2019t repeat yourself\u201d are principles, but they\u2019re not architectural. Nor are the various principles you\u2019ll see around project planning, and software quality management. What we need are means to direct and evaluate our architectural practice and decisions. What we need is something which helps me pick between various approaches to implementing micro-frontends, or helps me decide if it really makes sense to hand-roll my own OAuth 2.0 implementation, or guides me in evaluating self-hosted Lucene on AWS vs Amazon Elastic Search Service.</p> <p>Given all this, now let\u2019s share a good principle, based around the Team Topologies \u201cStream-Aligned Team\u201d organisation model:</p> <p>Title: Value independence of teams most highly</p> <p>Subtitle: Split solutions along team lines</p> <p>Rationale: The strength of our approach to building and running our products relies fundamentally on the independence of our teams. The downsides to this are acknowledged, but the upsides are felt to outweigh it, especially when the difficulty of predicting future needs is taken into consideration.</p> <p>Implications:</p> <ul> <li>Duplication of both function, and data, will inevitably arise. Rather then fight this, we embrace it, acknowledging the need, in certain circumstances, for noticeable eventual consistency and data replication</li> <li>The combined licencing, runtime and support costs of multiple third-party solutions may be higher than the costs of a single, shared, cross-product-team solution</li> <li>Solutions can be designed for the needs of the team which owns and runs them. They need not concern themselves the needs of other teams</li> <li>Both systems and the third-party services / solutions they are build on will tend to be smaller, and more specific-task-focussed</li> <li>Teams who go their own way need to self-support any third-party services / solutions which they adopt independently</li> </ul> <p>If you want to see more examples, please have a look at the publicly-available John Lewis \u201cSoftware Engineering Principles\u201d. [5]</p> <p>So far, so general. Nothing I have said so far in this section would be controversial in any approach to architecture. Why then am I stressing these points so much? Not only is the importance of architectural principles heightened in this decentralised approach, but also everyone concerned needs to know how to structure them and what good looks like because they will be sourced from, and maintained by, the teams themselves.</p> <p>Our approach is, to a great extent, taken directly from the excellent \u201cThe Art of Scalability\u201d by Abbot and Fisher. While their book assumes a slightly more top-down, hierarchical approach to architecture than presented here, the authors very much recognise the impact of the human element on their topic. In fact, the edition I read had been significantly re-written to give more weight to this perspective. One key aspect of this is their argument that for any architectural principle to be successful, teams which deliver against them need to feel a sense of ownership over it.</p> <p>I\u2019d encourage you to take a look at their book for a wealth of detail on how to source these from the collective. Suffice it to say, when presented with the business\u2019s strategic goals, the \u201cS.M.A.R.T.\u201d criteria from earlier, and a broad set of invitees from across technology and beyond (yet again your AAF invitee list will prove invaluable here) you will rapidly and collectively arrive at 8-15 principles which will serve you well. [6] It\u2019s well worth capturing the adoption of a principle as an ADR. These will be very lightweight (don\u2019t fall into the trap of repeating the principle itself) offering a great opportunity to articulate why this principle is important.</p> <p>There is one final point to make on the principles. Remember that this approach is aimed at supporting team autonomy, so one key role played by our principles is as a minimal viable set of understandings and agreements between everyone. This raises a key point, because one thing we ask teams to explicitly flag in their ADRs is not just the principles which apply, but also when their decision conflicts with one or more principles. This becomes a great point to engage the Advice Process and the power of the collective at the AAF to really get all the best minds and varied perspectives on the problem, and then record all this in the ADR. Yet again, the various elements support each other, amplifying their benefits, and helping us get to successful architectures. Remember, if, as a consequence of this a principle changes, call that out as a separate ADR that supersedes the original.</p> <p>That\u2019s architectural principles covered, which play the role of a guiding light for everyone to aim for, but how do we also take note of our surrounding landscape and climate? Architectural decisions are also frequently based on what everyone else is doing, who has which skills, and what the general trends in the tech industry are. Enter the fourth and final supporting element: your own Technology Radar.</p>"},{"location":"Architecture/scaling_the_practice_of_architecture/#4-a-tech-landscape-and-current-climate-sensing-tool-your-own-tech-radar","title":"4. A tech landscape and current climate sensing tool - Your own Tech Radar","text":"<p>Many people have heard of the ThoughtWorks Technology Radar - an opinionated guide to current trends (predicted, current, and receding) in software languages and frameworks, tools, platforms, and techniques. It\u2019s strengths lie in how it visually represents both the current landscape and the movements of various \u201cblips\u201d across it, allowing viewers to very rapidly see (for example) what is up and coming in the world of front-end frameworks, what\u2019s current flavour of the month, and what\u2019s beginning to fade.</p> <p>Sadly, far fewer know about the fact you can build your own radar. The \u201cBYOR\u201d allows you, as a collective, to capture and map out your local version of the technology trends you see across your organisation. It\u2019s very configurable too. In my most recent usage we kept the quadrants (Techniques, Tools, Platforms and Languages &amp; Frameworks) but changed the rings to reflect the transit of technologies through our programme of work (they became \u201cexperiment\u201d, \u201cadopt\u201d, \u201chold\u201d and finally \u201cretire\u201d).</p> <p>As with the architectural principles, these radar blips need to be crowd-sourced in a workshop. The first run of this will capture everything you have now in your organisation - a baseline sweep or scan if you will. Prior to this you need to figure out how wide you will go (org-wide? just your project? Will you include disciplines such as Ops and UX? etc.) and what your quadrants will be. It\u2019s also possible to add extra fields for data capture, but I typically try to keep it simple. The first time you do this it can take a fair time (we\u2019ve taken four hours and more before) but this is because it is essential that you involve all team members, not just architects, and the end result will give a great overview of the landscape and prevailing climate, and brings many discussions about where effort should be directed, and where it should be reduced. And just as with the principles, give rise to a general aligning of team understanding.</p> <p>What about the usage of your radar? As with the principles, there is also a place in our ADRs for \u201cRelevant Radar Blips\u201d. This is where we flag both adherence to the existing landscape as reflected in the current radar, but also, and more importantly, potential changes to the existing radar which this decision will introduce. Perhaps it\u2019s the spiking of a new framework, or a move from \u201cexperiment\u201d to \u201cadopt\u201d for a specific practice.</p> <p>Again, this is great grist for the AAF discussion forum, and great content to capture in the ADR itself. You can even go so far as linking specific types of blip appearances and movements to the need to submit ADRs, though in my experience this happens anyway without anyone having to push it explicitly. Remember, your goals here are the broadest engagement with your evolving architecture as possible, as well as a growing architectural mindset across all team members.</p> <p>How about keeping your radar up to date? I've seen quarterly cadences work, and half-yearly too. The key is to pay attention to how the radar is being consumed (or not) at the AAF and elsewhere. That should give you a good idea when it's worth investing in a refresh.</p>"},{"location":"Architecture/scaling_the_practice_of_architecture/#how-this-typically-works-in-practice","title":"How this typically works in practice","text":"<p>Given all this, how might you see it all working in practice? Let\u2019s take a look\u2026</p> <p>When the need for an architectural decision first arises it will most likely be vague and possibly poorly understood. It\u2019s therefore great to open up a new ADR template right away and start trying to fill it in.</p> <p>First to be tackled is the \u201ccontext\u201d section. To attempt this we need to understand the \u201cwhy\u201d of our decision as well as surrounding forces which we need to balance. We\u2019ll probably rapidly realise we need to do some research to be able to complete even this short section.</p> <p>Early ports of call in this research ought to be the architectural principles and radar. The principles, you\u2019ll recall, give us an idea of the direction of travel which our ideal solution will ideally manifest. Not all will be relevant, but some principles ought to help our decision-making. Recall that it\u2019s an architectural principal\u2019s primary goal to assist in the evaluation of multiple technical possibilities, and highlight the one which fits best.</p> <p>Sometimes, the experience will be a little different. One alternative is that a relevant principle cannot help you pick between two options, then there is either very little difference to choose between, or potentially, your principle isn\u2019t S.M.A.R.T. enough. This is a good reason to revisit the principle and re-define it.</p> <p>The other alternative also may end, perhaps a little later, in a re-evaluated set of principles. These arise when in order to make your decision you feel inclined to contravene one or more principles. That\u2019s ok; good decisions can go against the principles, but to do so you\u2019ll need to state clearly why this course of action was the right step to take. Overriding a principle is a significant step because it means we are effectively diverging from the general direction of travel. Consequently, the decision, and resulting ADR must be clearly argued and strongly justified. It might also signal the time to revisit the principle in light of this development.</p> <p>The radar in comparison is a lot more advisory in nature. It will give an idea of what, if anything, is the current de-facto standard in our problem space, what\u2019s been done in the past, and what other teams might be experimenting with. Going a different way is a lot less likely to raise eyebrows, but it is again a definite reason to address the deviation in the ADR.</p> <p>Given all this, we can start to come up with our key criteria to evaluate options against, as well as a list of alternatives. Perhaps we\u2019ve realised we really need to do some homework and in which case we might spin off a timeboxed Spike to learn more about something. Our ADR thinking will help write super-clear acceptance criteria here. If we don\u2019t need to do a Spike, we will think instead about seeking advice.</p> <p>Having these inputs from the context (which will include, for example, a technical strategy), applicable principles, radar blips, and key criteria / alternatives will in turn help us think about who to speak to for advice. In my experience it is helpful to engage in this when you are relatively confident you understand the problem space / need, but before you become too attached to a specific solution. When you go and seek advice, spend most time and effort speaking to people who will disagree with you; those who you know think along different lines and where you know you will have blind spots. Not only this, challenge yourself. Consider \u201cwhat\u2019s bad about this alternative? What are its shortcomings?\u201d Spend the most time thinking about the alternatives which challenge your decision most directly and fundamentally.</p> <p>Before you have the discussion, it helps to have the ADR ready in a rough form, and share it with them in advance. This will give them thinking time. Then when you do meet, go through every element of the ADR template. Have you missed something from the context? From the principles / blips? From the evaluation criteria? Solicit and capture their advice on all these things. More importantly, ask them why they are making these suggestions. It is the answers to these questions that the keys to learning to make better architectural decisions lie. Your advisors will help you understand how they see problems, what they\u2019ve encountered that was similar in the past, and even entire aspects which you don\u2019t even think about. [7]</p> <p>What about the AAF? Isn\u2019t that the place to gather advice? Yes, and everything I\u2019ve shared above should guide you wherever you have the conversation, but for the first few decisions a team or individual takes it really helps to have these in a more targeted way with the key advisors. The ADR you present before the AAF will then be really solid and focused before it is shared widely, meaning that the resulting AAF conversations will be richer and more focused. Sometimes a quick conversation in the AAF will lead to a subsequent, more in depth, 1-1 conversation.</p> <p>Remember, once you have advice, wherever it came from, you must roll it into your ADR. You need not take the advice given, but you have to record it. An excellent practice here is to prioritise things in your writing which people would find non-intuitive or surprising. If you disagree with key advice, state how and why. If you are doing something new, make it clear why the current way doesn\u2019t work for you. Remember to use the principles. Sometimes they will support your decision. Make it clear how. Sometimes you will have to contravent them. Make it clear why. Your goal is to make the reader understand why you took the decision you took. If you meet this goal, then you will not just have a solid decision, you\u2019ll most likely have learned a great deal in the process. [8]</p> <p>Before I close this section, remember, all decisions are point-in-time, and no-one can ever foresee every eventuality, but you want to be able to go back later and still feel good about a decision, given what you knew / understood at the time. In this, the context and criteria you capture are key. This re-visiting of decisions is another great learning tool. With the benefit of hindsight you can now ask questions such as: \u201cdid we understand the context well enough?\u201d and \u201cwere we honest enough with ourselves about what we knew and what we didn\u2019t?\u201d</p>"},{"location":"Architecture/scaling_the_practice_of_architecture/#how-to-fail","title":"How to fail","text":"<p>So that\u2019s the extent of our alternative, decentralised, anarchistic approach to architecture, and an idea of how it typically all fits together. But before we conclude, we ought to address one final aspect - the key ways in which you can fail. Let\u2019s enumerate them.</p> <p>The majority of failures you will see will actually be good ones - mini failures as decisions are taken by those who are less experienced. These are good because the process facilitates quick decisions, by those who need them, and more importantly, it facilitates transparency and rapid identification of failures (as those who took the decision will be aware of the issues as they code it) and a safe means to re-visit, and share the learnings. Embrace these, calling them out specifically and celebrating them in the AAF. This is a key aspect of building a learning culture.</p> <p>To learn most effectively you need to feel safe, and when learning collectively everyone benefits from the broadest, most diverse range of inputs contributing to discussions. Remember, in this approach, we are explicitly not looking for consensus, but we are looking for a broad range of inputs and voices. It is here that the next failure mode lies, and it is far more insidious and damaging than the first. This second failure mode arises when you, in your job as a conversation-starter and space-holder, fail to include all who ought to be contributing and deciding and learning. For a great part early adoption stages of this style of architecture can feel like great successes. \u201cIt\u2019s working! More and more people are taking decisions, writing them up in ADRs, giving advice and discussing them in the AAF! I\u2019ve never seen such engagement with principles before!\u201d. Only later, on reflection, will you realise the gains could have been far greater. It is precisely when this first flush of satisfaction strikes that you must be most on your guard. Are you really observing mass participation and learning, or is it a core group of usual suspects? You mitigate this problem actively. Watch out for who contributes. Amplify voices and ensure others listen to the quieter contributors. Make sure influence is balanced and not based on reputation, tenure or place in the hierarchy. Actively encourage many viewpoints and highlight the value it brings so that it becomes self-sustaining.</p> <p>The third failure mode is an early warning that you are encountering the preceding failure mode, however, this one lives more in the grey area between desired and unwelcome. As you proceed along this journey you will uncover off-the-grid decisions. Decisions which never came up at the AAF, and which never made it into an ADR. There are two ways to approach them. The first, correct way, is to treat the discovery as what you hope it is - an honest mistake, and an opportunity to learn and teach others. Perhaps the decide-ees weren\u2019t even aware of the fact it was a key decision they were taking. Perhaps they were under pressure from elsewhere. Perhaps they thought it wasn\u2019t as significant as it turned out to be. Perhaps they felt they would be shouted down in the AAF. Whatever the reason, treat it as a way for both them, and you, to learn. To improve the process. The other, wrong way to treat these, is to fall back to old ways, and take back control. Which takes us nicely to the failure mode which completely destroys this approach and all that it promises.</p> <p>It\u2019s easy to slip into this fourth and most dangerous failure mode, and so it needs constant vigilance on your part. The only thing which needs to happen to trigger this is for \u201ccapital-A\u201d architects such as yourself to fail to trust people; it is to not practice what you preach; it is to not clear enough space for the mini failures and consequent learning opportunities just mentioned; it is to continue to perform \u201cshadow architecture\u201d behind the scenes to make sure things still go how you think they ought to, despite all the signals from elsewhere. The sole benefit of this failure mode is that it becomes evident very rapidly as all the benefits I\u2019ve listed above fail to materialize.</p> <p>If you\u2019re wondering if it\u2019s this key failure mode which makes this approach to architecture hard to pull off you\u2019d be right. I have been lucky in the past. Colleagues have called me out when I\u2019ve made decisions for others, and I\u2019ve caught myself getting frustrated that folks don\u2019t know what I know. But then I realise I\u2019m failing in my real task as a practitioner of architecture - I\u2019m failing to get the right conversations happening, with the right people, at the right time. Remember that (perhaps even task others with calling you out when you fail to stick to the process) and you\u2019ll be surprised how easy (and satisfying) it is to succeed.</p>"},{"location":"Architecture/scaling_the_practice_of_architecture/#the-five-elements-again-and-possible-further-steps","title":"The five elements again, and possible further steps","text":"<p>Given we now have both the good and the (potentially) bad, as well as a collection of failure modes to look out for, let\u2019s conclude. We recall we have the five elements of our alternative approach to architecture:</p> <p>One core element: Advice Process</p> <p>Four supporting elements:</p> <ul> <li>Architecture Advisory Forum</li> <li>Lightweight ADRs</li> <li>Team-sourced Principles</li> <li>Your own Tech Radar</li> </ul> <p>Hopefully I\u2019ve made it clear that while none of the elements may be new to you (aside from perhaps the Advice Process) there is something very different. This difference lies in the interplay/mutual reinforcement between all of these against a backdrop of conversations, learning and safety. What is hopefully enticing is the fact that, in my experience at least, this is far more likely to provide successfully deployed architectures, now, and into the future. It is my go-to for scaling myself, and making sure that the teams I work with deliver on the promises we have made to our users, which is, after all, the goal.</p>"},{"location":"Architecture/tempLinks/","title":"links","text":"<ul> <li>Documentation system</li> <li>Problems with 4 doc model</li> <li>New hire 100 day gameplan</li> <li>DIVIO intro</li> <li>ref guides</li> <li>Conventional commits</li> <li>Sematic versioning and conventional commits</li> <li>Conventional standard</li> </ul> Header 1 Header 2 Item 1 - Bullet 1 Item 2 - Bullet 2 Item 3 - Bullet 3 Header 1 Header 2 Item 1 <ul><li>Bullet 1</li><li>Bullet 2</li><li>Bullet 3</li></ul> Item 2 Some content for Item 2 Item 3 Another cell with regular text"},{"location":"Architecture/C4%20Model/c4%20model/","title":"c4 model","text":""},{"location":"Architecture/Explanation/12_software_architecture_styles-software_engineers_should_know/","title":"12 Software Architecture Styles Software Engineers Should Know","text":"<p>A brief introduction to Microservice, SOA, Event-Driven, MicroKernel, Stream-Based, and more.</p>"},{"location":"Architecture/Explanation/12_software_architecture_styles-software_engineers_should_know/#what-is-software-architecture","title":"What is Software Architecture?","text":"<p>Software architecture is the process of defining the high-level structure and organization of a software system. It involves identifying and selecting the right components, deciding how they should interact with each other, and determining how they should be organized to achieve specific goals. The goal of software architecture is to create a system that is maintainable, scalable, and secure, and that can meet the needs of users and organizations over time.</p>"},{"location":"Architecture/Explanation/12_software_architecture_styles-software_engineers_should_know/#why-do-we-need-software-architecture","title":"Why do we need Software Architecture?","text":"<p>A robust architecture provides a solid foundation for building software that meets the needs of users and stakeholders. It ensures that the system meets its functional and non-functional requirements, such as performance, security, and reliability. With a well-designed architecture, developers can build software that is easy to modify and extend, making it easier to adapt to changing business needs.</p> <p>Software architecture is also essential for managing complexity. As software systems become more complex, it becomes challenging to understand how different components interact with each other. A well-designed architecture provides a high-level view of the system, making it easier to understand its structure and operation. This, in turn, helps developers to identify potential issues and make informed decisions about how to modify the system.</p>"},{"location":"Architecture/Explanation/12_software_architecture_styles-software_engineers_should_know/#how-do-we-document-architecture-we-use-4c-model","title":"How do we Document Architecture? We use 4C Model.","text":""},{"location":"Architecture/Explanation/12_software_architecture_styles-software_engineers_should_know/#context-level","title":"Context Level","text":"<p>At the highest level, the Context level, we describe the system\u2019s external environment, such as users, other systems, regulations, etc. This level provides a high-level overview of the system\u2019s purpose and its relationship to the external world. It helps to identify the stakeholders who will interact with the system and the factors that will influence its design and development.</p>"},{"location":"Architecture/Explanation/12_software_architecture_styles-software_engineers_should_know/#containers-level","title":"Containers level","text":"<p>The next level is the Containers level, which describes the runtime environment of the system, such as servers, databases, or message queues. This level helps to identify the major technology choices and deployment decisions. It provides an understanding of the physical infrastructure that will support the system and the tools and resources that will be required to deploy and maintain it.</p>"},{"location":"Architecture/Explanation/12_software_architecture_styles-software_engineers_should_know/#components-level","title":"Components level","text":"<p>The third level is the Components level, which describes the major functional building blocks of the system. This level helps to identify the modules, classes, or functions that make up the system. It provides an understanding of the system\u2019s functionality and the relationships between its different components.</p>"},{"location":"Architecture/Explanation/12_software_architecture_styles-software_engineers_should_know/#code-level","title":"Code level","text":"<p>Finally, the Code level is the lowest level, which describes the actual code and how it implements the components. This level provides a detailed understanding of how the system works and how its different components interact with each other. It is essential for developers who will be working with the code to have a clear understanding of how it is structured and how it works.</p> <p>Using the C4 model, software architects can create diagrams and written documentation that describe each of these levels, providing a comprehensive view of the system\u2019s architecture. This approach helps to identify potential issues and trade-offs, as well as facilitating scalability, maintainability, and adaptability. By documenting the architecture in this way, developers and stakeholders can have a clear and easy-to-understand view of the system, making it easier to modify and extend as business needs change.</p>"},{"location":"Architecture/Explanation/12_software_architecture_styles-software_engineers_should_know/#here-are-the-12-software-architecture-styles-software-engineer-should-know","title":"Here are the 12 Software Architecture Styles Software Engineer Should Know","text":""},{"location":"Architecture/Explanation/12_software_architecture_styles-software_engineers_should_know/#1-client-server","title":"1. Client Server","text":"<p>The client-server architecture is a model in which the client, a user or an application, sends a request to the server, which in turn responds with the requested data or service. The client and server can be on the same machine or on different machines connected through a network.</p> <p>The client is responsible for initiating communication with the server and sending a request. The server, on the other hand, listens for incoming requests from clients, processes them, and returns a response.</p> <p>Advantages of Client-Server Architecture</p> <p>Scalability: Client-server architecture is highly scalable, as it allows multiple clients to connect to the same server and share resources.</p> <p>Security: Client-server architecture provides better security than other network models, as the server can control access to resources and data.</p> <p>Reliability: Client-server architecture is highly reliable, as the server can provide backup and recovery services in case of failures.</p>"},{"location":"Architecture/Explanation/12_software_architecture_styles-software_engineers_should_know/#2-layering","title":"2. Layering","text":"<p>It\u2019s a common way to design complex software systems, and it involves breaking down the system into layers, where each layer is responsible for a specific set of functions. This approach helps to organize code and makes it easier to maintain and modify the system over time.</p> <p>A typical layering architecture consists of three main layers: presentation, business logic, and data access.</p> <p>Presentation Layer: The presentation layer is responsible for displaying information to the user and gathering input. This layer includes the user interface and any other components that interact directly with the user. The user interface is what the user sees and interacts with, such as buttons, text boxes, and menus. The presentation layer also includes any logic related to the user interface, such as event handlers and validation.</p> <p>Business Logic Layer: The business logic layer is responsible for implementing the business rules of the application. This layer contains the code that processes and manipulates data, as well as any other application logic. The business logic layer is where the magic happens, so to speak. It\u2019s where the software performs calculations, makes decisions, and carries out tasks. This layer is where the software really earns its keep.</p> <p>Data Access Layer: The data access layer is responsible for interacting with the database or other external data sources. This layer contains the code that reads and writes data to and from the database. The data access layer is where the software retrieves data from the database, makes changes to the data, and saves the changes back to the database. This layer is critical to the functioning of the software, as it enables the software to store and retrieve data.</p>"},{"location":"Architecture/Explanation/12_software_architecture_styles-software_engineers_should_know/#3-pipe-and-filter","title":"3. Pipe and Filter","text":"<p>Pipe and Filter Architecture is a design pattern that allows software systems to process data by separating the processing tasks into multiple independent components. This architecture is particularly useful for systems that need to handle large amounts of data, as it can help to improve performance, scalability, and maintainability.</p> <p>The Pipe and Filter Architecture is based on the idea of a pipeline, where data flows through a series of processing steps, each of which performs a specific task. Each processing step is implemented as a separate component, or filter, that accepts data as input, performs some operation on the data, and produces output data. The output data is then passed on to the next filter in the pipeline.</p> <p>The filters in the pipeline are independent of each other, which means that they can be developed, tested, and deployed separately. This makes it easy to add new filters to the pipeline or modify existing ones without affecting the rest of the system.</p> <p>Benefits</p> <p>Scalability: The architecture can be scaled horizontally by adding more filters to the pipeline, which allows the system to handle larger amounts of data.</p> <p>Performance: The architecture can be optimized for performance by parallelizing the processing of data across multiple filters.</p> <p>Maintainability: The architecture promotes modularity and separation of concerns, which makes it easier to maintain and update the system over time.</p>"},{"location":"Architecture/Explanation/12_software_architecture_styles-software_engineers_should_know/#4-master-slave","title":"4. Master-Slave","text":"<p>Master-Slave architecture is a design pattern used in distributed systems, where one node (the master) controls one or more nodes (the slaves) to perform specific tasks. The master node is responsible for distributing the workload across the slaves and for coordinating their activities. The slave nodes do not have the same level of control as the master node and only perform tasks that are assigned to them by the master.</p> <p>Benefits</p> <p>One of the most significant advantages is that it allows for the efficient distribution of workload across multiple nodes. This helps to reduce the load on any one node and ensures that the system can handle large amounts of data and traffic.</p> <p>Another advantage of using a master-slave architecture is that it provides fault tolerance. If one of the slave nodes fails, the master node can redistribute its workload to the other slave nodes. This ensures that the system can continue to function even if one or more nodes fail.</p>"},{"location":"Architecture/Explanation/12_software_architecture_styles-software_engineers_should_know/#5-microkernel","title":"5. MicroKernel","text":"<p>MicroKernel architecture is a software design pattern that allows developers to build more modular and flexible systems. It separates the core system functionality from additional features, which are implemented in separate modules. The core functionality of the system is implemented in the MicroKernel, a minimalistic core system that provides only the most essential services required to run the system. It is plug and play concept.</p> <p>Example:</p> <p>Let\u2019s consider the example of an e-commerce website. The MicroKernel would provide essential services such as handling user authentication, managing user sessions, and processing payments. Additional features, such as product recommendations, user reviews, and social media integration, would be implemented in separate modules.</p> <p>If the website wants to add a new feature, such as a loyalty program, it can be developed and added as a separate module without affecting the core functionality of the system. This modularity makes it easier to add new features or remove existing ones without affecting the core system functionality.</p> <p>Furthermore, if the website wants to customize its system to meet the specific needs of different users, it can choose the modules it needs for each user. For example, a user who frequently buys electronics can be provided with a module that recommends electronic products. On the other hand, a user who frequently buys cosmetics can be provided with a module that recommends cosmetic products.</p> <p>Finally, if the website wants to scale its system to handle more users or changes in hardware, it can easily add or remove modules as needed. This scalability makes it easier to adapt the system to changes in user requirements or changes in the underlying hardware.</p>"},{"location":"Architecture/Explanation/12_software_architecture_styles-software_engineers_should_know/#6-ddd-domain-driven-design","title":"6. DDD (Domain Driven Design)","text":"<p>At its core, DDD is a way of thinking about software architecture that emphasizes the domain or problem space of a project. This means that developers focus on the business logic of the software, rather than just the technical implementation.</p> <p>In practice, this means that developers start by understanding the domain they are working in and break it down into smaller, more manageable parts. They then use this understanding to create a domain model, which is a representation of the different entities within the domain and how they interact with one another.</p> <p>Once the domain model is created, developers can use it to guide the rest of the architecture of the software. This includes creating bounded contexts, which are areas of the software that are defined by a specific language and context, and aggregates, which are collections of related entities that are treated as a single unit.</p>"},{"location":"Architecture/Explanation/12_software_architecture_styles-software_engineers_should_know/#7-component-based","title":"7. Component Based","text":"<p>In software engineering, component-based architecture (CBA) is an approach to software design and development that emphasizes the use of reusable software components. The idea behind CBA is that software development can be made more efficient and effective by breaking down complex systems into smaller, more manageable components.</p> <p>What is a component?</p> <p>A software component is a modular, self-contained unit of software that can be reused across different systems. A component typically has a well-defined interface, which specifies how other components can interact with it. This interface includes information about the component\u2019s inputs, outputs, and behavior.</p> <p>Components can be classified into different types based on their functionality, such as user interface components, data access components, and business logic components. Each type of component has a specific role in the software system and can interact with other components through their interfaces.</p>"},{"location":"Architecture/Explanation/12_software_architecture_styles-software_engineers_should_know/#8-soa","title":"8. SOA","text":"<p>SOA is an architectural style that aims to create modular, reusable services that can be easily integrated with other services to create a larger system. In this approach, services expose their functionality through interfaces, which can be accessed by other services or applications.</p> <p>At its core, SOA is about building software by breaking it down into smaller pieces, or modules, that can be reused across different applications. This modular approach allows developers to focus on building specific pieces of functionality and then integrating them with other pieces to create a larger system.</p> <p>Core Components of SOA</p> <p>Service Provider: The service provider is responsible for creating and exposing services to the outside world. These services can be used by other services, applications, or end-users. For example, a payment processing service provider might create and expose a service that allows other applications to process payments.</p> <p>Service Registry: The service registry is a directory of available services that can be accessed by other services or applications. The service registry provides information about the service, such as its name, location, and interface. For example, if an application needs to process payments, it can use the service registry to find the payment processing service and access its interface.</p> <p>Service Requestor: The service requestor is responsible for consuming the services exposed by the service provider. This can be done by using the service registry to find the appropriate service and then invoking its interface. For example, an application might use the service registry to find the payment processing service and then use its interface to process payments.</p>"},{"location":"Architecture/Explanation/12_software_architecture_styles-software_engineers_should_know/#9-monolithic","title":"9. Monolithic","text":"<p>Monolithic architecture is a software design pattern that has been around for decades. It\u2019s a way of structuring an application as a single, cohesive unit, rather than splitting it up into individual, smaller components.</p> <p>In a monolithic architecture, the entire application is built as a single, self-contained unit. All of the code and dependencies are packaged together, so the application can be deployed and run on a single server.</p> <p>This makes it easy to develop and deploy the application, since everything is in one place. It also makes it easier to scale the application horizontally, by adding more servers.</p> <p>Advantages of Monolithic Architecture</p> <p>One of the biggest advantages of monolithic architecture is its simplicity. Since everything is contained in a single unit, there are fewer moving parts to worry about. This makes it easier to develop, test, and deploy the application.</p> <p>Another advantage is that it\u2019s easier to maintain and debug a monolithic application. Since everything is in one place, it\u2019s easier to track down issues and fix them.</p> <p>Disadvantages of Monolithic Architecture</p> <p>One of the biggest disadvantages of monolithic architecture is that it can be difficult to scale the application vertically. Since everything is running on a single server, there\u2019s a limit to how much traffic the application can handle.</p> <p>Another disadvantage is that it can be difficult to adopt new technologies and languages in a monolithic application. Since everything is packaged together, it can be hard to update individual components without breaking the entire application.</p>"},{"location":"Architecture/Explanation/12_software_architecture_styles-software_engineers_should_know/#10-microservice","title":"10. Microservice","text":"<p>Microservice architecture is a style of software architecture that structures an application as a collection of small, independent services that communicate with each other over a network. Each service is focused on a specific business capability and can be developed, deployed, and scaled independently of other services in the system.</p> <p>The main idea behind microservice architecture is to break down a large, monolithic application into smaller, more manageable services. This approach brings several benefits, such as improved scalability, increased flexibility, and quicker time-to-market for new features. With a microservice architecture, each service can be scaled independently, making it easier to handle traffic spikes or changes in demand. Developers can also modify or add new services without affecting other parts of the system, which speeds up the development process.</p> <p>Challenges of Microservice Architecture</p> <p>Despite the benefits of microservice architecture, it also introduces additional complexity. One of the biggest challenges is managing inter-service communication. Services need to be able to discover each other and communicate effectively, which can be difficult to do at scale. Load balancing and fault tolerance are also more complex in a microservice architecture.</p> <p>Another challenge is ensuring that each service has its own data store. In a monolithic application, all data is typically stored in a single database. With microservices, each service should have its own data store to ensure that changes to one service do not affect other services in the system. This can lead to increased complexity in data management and synchronization.</p> <p>Best Practices for Microservice Architecture</p> <p>To ensure the success of a microservice-based system, developers should follow best practices for designing and implementing microservices. Some of these best practices include:</p> <p>1. Design services that are loosely coupled and highly cohesive, with clear boundaries and well-defined interfaces.</p> <p>2. Use containerization technology, such as Docker, to package and deploy each service as a separate container. This allows for easy scaling and deployment of individual services as needed.</p> <p>3. Implement effective monitoring and management tools to ensure that the system is running smoothly and to detect and address issues quickly.</p> <p>4. Use a service mesh, such as Istio, to manage inter-service communication and load balancing.</p> <p>5. Implement a continuous integration and deployment (CI/CD) pipeline to automate the testing and deployment of microservices.</p>"},{"location":"Architecture/Explanation/12_software_architecture_styles-software_engineers_should_know/#11-event-driven","title":"11. Event Driven","text":"<p>Event Driven Architecture (EDA) is an approach to designing software systems that enables rapid and efficient communication between different components or services. In this paradigm, different software components communicate with each other using events, rather than through direct requests or responses.</p> <p>In EDA, events are generated by different components of a software system, such as a user interface or a backend service. These events are then broadcast to other components of the system, which can subscribe to them and act on them as needed.</p> <p>For example, consider a simple e-commerce application. When a new order is placed, the order processing service can generate an \u201corder created\u201d event, which is then broadcast to other services such as inventory management, shipping, and billing. Each of these services can then process the event and make updates to their respective systems.</p> <p>Benefits of EDA</p> <p>One of the key benefits of EDA is its ability to decouple different components of a software system. When different components communicate through events rather than direct requests, they become less dependent on each other. This makes it easier to change or update individual components of the system without affecting the rest of the system.</p> <p>Another benefit of EDA is its scalability. Because events are broadcast to multiple components of the system, it is possible to process large volumes of data and transactions in parallel. This makes it easier to handle high traffic and spikes in demand.</p> <p>Challenges of EDA</p> <p>While EDA has many benefits, it also has some challenges. One of the main challenges is managing the complexity of event-driven systems. Because events can be generated and consumed by many different components, it can be difficult to track and debug issues that arise.</p> <p>Another challenge is ensuring that events are processed in the correct order. Because events can be generated and processed asynchronously, it is possible for events to be processed out of order. This can cause issues such as data inconsistencies or incorrect calculations.</p>"},{"location":"Architecture/Explanation/12_software_architecture_styles-software_engineers_should_know/#12-stream-based","title":"12. Stream Based","text":"<p>As software development becomes more complex and demands greater scalability, traditional architectures are becoming less and less effective. Stream-based architecture is emerging as a promising alternative that enables developers to build systems that can handle massive amounts of data in real-time.</p> <p>At its core, stream-based architecture is based on the principles of event-driven programming. Instead of processing data in batches, stream-based systems process data as it is generated in real-time. This allows developers to build systems that can respond to changes in data with minimal latency.</p> <p>Benefit of Stream-Based Architecture</p> <p>One of the key benefits of stream-based architecture is its scalability. Because data is processed in real-time, stream-based systems can handle massive amounts of data without the need for complex batch processing pipelines. This makes it possible to build systems that can process millions of events per second, making it ideal for use cases like sensor data processing, financial trading, and online advertising.</p> <p>Another benefit of stream-based architecture is its flexibility. Because data is processed in real-time, it is possible to build systems that can respond to changes in data with minimal latency. This makes it possible to build complex, event-driven systems that can adapt to changing business requirements. For example, in an e-commerce platform, stream-based architecture can be used to track user activity in real-time and respond with personalized recommendations and promotions based on the user\u2019s browsing and purchasing history.</p> <p>Furthermore, stream-based architecture can provide significant cost savings. Traditional batch processing pipelines require expensive hardware and complex software infrastructure to manage the data processing. On the other hand, stream-based systems can be built on inexpensive commodity hardware, making it much easier to scale and maintain.</p> <p>Finally, stream-based architecture is highly fault-tolerant. Because data is processed in real-time, it is possible to build systems that can automatically recover from failures without the need for manual intervention. This makes it possible to build systems that can operate at scale with high levels of reliability, reducing the risk of data loss or system downtime.</p>"},{"location":"Architecture/Explanation/best-practices-when-documenting-your-code-for-software-engineers/","title":"Best Practices When Documenting Your Code for Software Engineers","text":"<p>It\u2019s all about clear, asynchronous communication</p> <p></p> <p>As a software engineer, it is very important to acquire the skill of writing high-quality documentation. Due to the recent increase in remote work, it has become even more important to be better at asynchronous communication. Remote company GitLab does an excellent job of defining asynchronous communication:</p> <p>\u201cAsynchronous communication is the art of communicating and moving projects forward without the need for additional stakeholders to be available at the same time your communique is sent.\u201d</p> <p>High-quality documentation is an easier way to achieve effective asynchronous communication. In this article, I am going to talk about some interesting tips that I have found very useful in my personal experience.</p>"},{"location":"Architecture/Explanation/best-practices-when-documenting-your-code-for-software-engineers/#google-tech-writing-course","title":"Google Tech Writing Course","text":"<p>Google offers a free tech writing course for software engineers. It starts with the fundamentals of tech writing. There are two courses and the content is as shown below:</p> <p></p> <p>TOC \u2014 Google Tech Writing One</p> <p></p> <p>TOC \u2014 Google Tech Writing Two</p> <p>Being good at tech writing does not happen overnight. It takes practice. I personally prefer visiting this course each month to remind myself of the best practices.</p>"},{"location":"Architecture/Explanation/best-practices-when-documenting-your-code-for-software-engineers/#using-the-divio-documentation-framework","title":"Using the Divio Documentation Framework","text":"<p>Amongst all other documentation frameworks, I personally like Divio the best. The documentation systems suggested there are easy and universally applicable.</p> <p>The framework suggests classifying documentation in the following types:</p> <ul> <li>Tutorials \u2014 Learning-oriented</li> <li>How-To Guides \u2014 Problem-solving-oriented</li> <li>Explanation \u2014 Understanding-oriented</li> <li>Reference \u2014 Information-oriented</li> </ul> <p>The scheme is widely adopted by a lot of famous open source projects and enterprises.</p> <p>Here is a great video explaining the details of the framework:</p>"},{"location":"Architecture/Explanation/best-practices-when-documenting-your-code-for-software-engineers/#use-markdown-based-systems-for-documentation","title":"Use Markdown-Based Systems for Documentation","text":"<p>In a typical enterprise, there are various ways you can maintain your documentation. Some people prefer creating MS Word/Excel documents and uploading those in SharePoint or OneDrives. The biggest problem with such documents is that they are not searchable using your internal search engine. Hence I personally prefer using Markdown-based documentation systems. Creating and maintaining documentation is easy and the documentation is searchable.</p> <p>If you are not familiar with Markdown, you can easily master it. Check out this free recommended course from GitHub.</p>"},{"location":"Architecture/Explanation/best-practices-when-documenting-your-code-for-software-engineers/#using-mermaid-js-for-diagrams","title":"Using Mermaid JS for Diagrams","text":"<p>According to Mermaid itself, it \u201cis a Javascript-based diagramming and charting tool that uses Markdown-inspired text definitions and a renderer to create and modify complex diagrams.\u201d If you are using GitLab or Azure DevOps, Mermaid is natively supported. If you are using GitHub or Atlassian products, then there are plug-ins available.</p> <p>With Mermaid, creating and updating diagrams is very easy and you don\u2019t need to have any UML tools like Visio/draw.io installed on every developer\u2019s workstation.</p> <p>Here are some sample diagrams created with Mermaid</p> <p></p> <p>Sample Sequence Diagram using Mermaid</p> <p></p> <p>Sample Class Diagram using Mermaid</p> <p>You can try out creating diagrams using the Mermaid Live Editor as well.</p>"},{"location":"Architecture/Explanation/best-practices-when-documenting-your-code-for-software-engineers/#use-templates","title":"Use Templates","text":"<p>There are numerous templates available on various sites like Confluence that can be used for specific types of documents. For example:</p> <ul> <li>Software Architecture Review Template</li> <li>Architecture Decision Record Template</li> <li>Incident Postmortem Template</li> <li>DevOps Runbook</li> <li>Decision Template</li> <li>Writing Guidelines</li> <li>OKR Template</li> <li>Etc.</li> </ul>"},{"location":"Architecture/Explanation/best-practices-when-documenting-your-code-for-software-engineers/#refer-to-style-guides","title":"Refer to Style Guides","text":"<p>If your team does not have a style guide already, refer to what the Googles and Microsofts of the world do:</p> <ul> <li>Microsoft Style Guide</li> <li>Google Developer Documentation Style Guide</li> </ul>"},{"location":"Architecture/Explanation/best-practices-when-documenting-your-code-for-software-engineers/#references","title":"References","text":"<ul> <li>Google Tech Writing Course</li> <li>Divio Documentation Framework</li> <li>Mermaid</li> </ul>"},{"location":"Architecture/Explanation/explanation/","title":"explanation","text":""},{"location":"Architecture/Explanation/what_is_solution_architecture/","title":"What is Solution Architecture","text":"<p>An informal introduction to Solution Architecture</p>"},{"location":"Architecture/Explanation/what_is_solution_architecture/#introduction","title":"Introduction","text":"<p>The term Solution Architecture refers to a high-level blueprint of a solution that was developed to solve one or more business problems within an enterprise using a technological approach. Building a proper solution architecture requires</p> <ul> <li>A good understanding of the business problem or problems (domain knowledge)</li> <li>Comprehensive knowledge of the technologies used in the enterprise world (technical knowledge)</li> <li>Experience in building similar solutions in the past (experience)</li> </ul> <p>A good solution architecture can be used to perform critical tasks such as</p> <ul> <li>Designing and implementing innovative solutions for the consumers of the business</li> <li>Maintain excellent user experience with higher degrees of service availability</li> <li>Perform calculations on return on investment (ROI) and total cost of ownership (TCO)</li> </ul> <p>Solution architecture tries to compact a gigantic set of details into a set of diagrams so that different stakeholders understand what is actually going on inside the enterprise software systems. It is helpful for highly technical people such as software developers, software architects, and CTOs as well we moderately technical people such as project managers, business analysts, and citizen developers.</p>"},{"location":"Architecture/Explanation/what_is_solution_architecture/#types-of-architectures-in-solution-architecture","title":"Types of architectures in solution architecture","text":"<p>The first step in solving any problem is understanding the business requirements of the client. To include all the critical information related to the business use case, we can come up with something called a \u201cbusiness architecture\u201d which contains different types of applications, users, and their interactions at a very high level. We sometimes call this architecture \u201cLevel 0\u201d architecture.</p>"},{"location":"Architecture/Explanation/what_is_solution_architecture/#business-architecture-level-0-architecture","title":"Business architecture (Level-0 architecture)","text":"<p>The idea of business architecture is to come up with a possible solution to a real-world problem or problems and depict that in the form of a diagram or a document using the systems, applications, and users that are considered in the scenario with minimum technical details. This component is mainly useful for business executives and other non-technical stakeholders so that they can understand what technical solution is going to be built using this architecture. Given below is a \u201cbusiness architecture\u201d diagram that we came up with for a mobile banking application.</p> <p></p> <p>Figure: The business architecture of a mobile banking application</p> <p>The preceding figure depicts the various components associated with the solution in which we are building a mobile banking application for a given bank. It showcases the components such as gateway, integration, and security component as high-level building blocks to design a solution for this problem.</p> <p>The next step in designing the solution architecture is to use this and design a technical architecture with the finer details about products and tools.</p>"},{"location":"Architecture/Explanation/what_is_solution_architecture/#technical-architecture-level-1-architecture","title":"Technical architecture (Level-1 architecture)","text":"<p>This is the type of diagram that includes details of specific vendors, products, and tools required to build a real-world software system using the business architecture blueprint. Coming up with a technical architecture requires the proper analysis of vendors and tools as well as the current and future business requirements and TCO/ROI calculations. The below diagram depicts a simplified version of a technical architecture for the business architecture we discussed before.</p> <p></p> <p>Figure: Technical architecture of a mobile banking solution</p> <p>In this diagram, we have mentioned the specific vendors that we are going to use to fulfill the certain functionalities that we identified during the business architecture design phase. As an example, the diagram depicts that we are going to use the WSO2 API Manager solution as the API gateway which exposes the services to the mobile application. Similarly, it shows that we are going to use Mulesoft and Auth0 for respective functionalities. In addition to that, we can also depict information about which cloud platforms and container technologies we are going to use if we decided to go with a container-based solution.</p> <p>Once the product vendors and tools are identified, the next step is to go further down into the actual deployment details and showcase the infrastructure level details that can be used by the developers as well as the operations teams to build the actual infrastructure for the solution.</p>"},{"location":"Architecture/Explanation/what_is_solution_architecture/#deployment-architecture-level-2-architecture","title":"Deployment architecture (Level-2 architecture)","text":"<p>This architecture diagram showcases how the technical architecture looks like in a real computing infrastructure such as a data center or a cloud platform. It contains details on network-level segmentation, the number of replicas (instances), traffic routing components such as load balancers or firewalls, and many other details related to the actual deployment of the solution. The figure below depicts a simplified version of a deployment architecture that we can come up with for the mobile banking solution that we discussed before.</p> <p></p> <p>Figure: Deployment architecture for mobile banking solution</p> <p>The preceding figure depicts the product versions, the number of replicas, and the deployment model of each component along with the traffic routing components (load balancers).</p>"},{"location":"Architecture/HLD/hld/","title":"HLD","text":""},{"location":"Architecture/HLD/hld/#what-is-a-hld","title":"What is a HLD?","text":"<p>HLD is the big picture of the solution. The purpose of HLD is to provide a common understanding of the system\u2019s architecture among all stakeholders. This helps to ensure that everyone is on the same page and that the system is developed in a consistent manner. HLD also helps to identify potential risks and challenges early on, so that they can be addressed before they become major problems</p>"},{"location":"Architecture/HLD/hld/#next-is-how-how-to-write-a-good-hld","title":"Next is \u201cHOW\u201d. How to write a good HLD?","text":"<p>The key to writing a good HLD is to write it in the form a story, a story so good that the reader is engaged with its plot, the backstories of the characters and is on the edge of his/her seat with every plot twist(Okey we don\u2019t have to go as far as adding plot twists). The idea is to keep the keep the design simple to understand, easy to follow and clear about assumptions and tradeoffs. So naturally the first step is knowing your audience. A good HLD should be able to communicate your thoughts to your expected audience.</p> <p>Hence a general pattern to follow is</p> <ul> <li>Context \u2014 Scope out and clearly define the objective and context of problem you are solving.</li> <li>Design Overview\u2014State the requirements of the solution with additional context like assumptions, back of the envelope calculation of number of users, size of data, etc.</li> <li>Detailed Design \u2014 This contains your actual design of the solution.</li> <li>Alternatives considered \u2014 This helps you convey comparison between tradeoffs. This is good place to focus of potential bottlenecks with each alternative.</li> <li>Quality Attributes \u2014 Shed light on property of the system like security, Reliability, Data Integrity, Privacy, Scalability, Latency, etc.</li> <li>Operations \u2014 Plan for maintenance of code like the monitoring, alerting and logging strategy.</li> </ul> <p>Find below a template which you can refer and follow. Based on your audience, not all sections will apply to your HLD. Use your judgement to delete a section and introduce new ones. Have fun!</p>"},{"location":"Architecture/HLD/hld/#context","title":"Context","text":""},{"location":"Architecture/HLD/hld/#objective","title":"Objective","text":"<p>In one of two sentences, describe at high level what you are solving using this design. This section should not describe the problem (use \u201cBackground\u201d) or propose a solution(use \u201cDesign\u201d), not should it got into implementation details like stating list of requirements and features.</p>"},{"location":"Architecture/HLD/hld/#background","title":"Background","text":"<p>Provide context for an unfamiliar reader to understand the proposal. In a crisp way cover what the problem is, why it is important to solve the problem and the historical context as appropriate. If the background requires a large write up or the reason to for solving the problem becomes verbose, separate docs like PRDs should be created first and linked here. Note: this is background, do not write about your design or ideas to solve the problem here.</p>"},{"location":"Architecture/HLD/hld/#design","title":"Design","text":""},{"location":"Architecture/HLD/hld/#overview","title":"Overview","text":"<p>This contains high level overview of your design. Should be understandable by a non-engineer not working on the project. Diagrams can be especially useful to quickly convey the shape of the solution. This is going to be the trailer of your story, so keep it clean and concise.</p>"},{"location":"Architecture/HLD/hld/#functional-requirements","title":"Functional Requirements","text":"<p>Describe in brief the various aspects of the problem space like 1. What will the users do 2. Where are users based out of geographically 3. Which platforms, like mobile/web/physical would the users be using.</p>"},{"location":"Architecture/HLD/hld/#capacity-estimates","title":"Capacity Estimates","text":"<p>Calculate approximates for the key data points. You can use below calculation for reference. Active Users \u2014 2 Billion(B) Daily Active Users(DAU), 3B Monthly Active Users(MAU) \u2014 Approximate FB traffic estimate Read vs Write \u2014 100:1 Queries Per Second \u2014 Reads \u2014 (2B DAU)*(100Read)/(24*60*60) \u2014 2.4M req/sec Writes \u2014 (2B DAU)*(1Write)/(24*60*60) \u2014 24k req/sec Storage \u2014 (Assuming for 5 years) No of objects \u2014 (2B DAU)*(5Y*12M*30D) \u2014 3.6 Trillion(T) Each Object Size \u2014 ~ 500 bytes Total Object size \u2014 3.6T*500 bytes \u2014 1.8 PB Throughput \u2014 Reads \u2014 (2.4M QPS)*(500bytes) \u2014 1200 MB/s Writes \u2014 (24K QPS)*(500bytes) \u2014 12 MB/s Cache \u2014 Following 80\u201320 rule. 20 % users would use 80% of objs) \u2014 (1200 MB/s)*(60m*60s)*(0.2) \u2014 864 GB per hour Number of Instances required \u2014 Application Services \u2014 Assuming 100 MB/s per instance as bottleneck\u2014 (1200MBps/100MBps)=12 Database \u2014 Assuming 10 TB per instance as bottleneck\u2014 1.8PB/10TB= 180 Assuming 50 MBps disk throughput per instance as bottleneck \u2014 1200MB/s/50 MB/s= 24 Caching \u2014 Assuming each instance offers 32 GB \u2014 864/64 = 14</p>"},{"location":"Architecture/HLD/hld/#interfaces","title":"Interfaces","text":"<p>List out key interaction points between user and your system. Typically this has your API details like request and response parameters at a high level.</p>"},{"location":"Architecture/HLD/hld/#data-model","title":"Data Model","text":"<p>This describes key entities of your solution. This space usually helps you to decide till which granularity do you want to break down your entities</p>"},{"location":"Architecture/HLD/hld/#detailed-design","title":"Detailed Design","text":""},{"location":"Architecture/HLD/hld/#details","title":"Details","text":"<p>Get into the detail of the design. Diagrams are best way to express the thought process here. You can start by drawing out the components( which has one or more Data Models identified in earlier section) and connecting them to each other(This is usually called \u201cComponent Diagram\u201d and shows high level overview of how components are placed and interact with each others and users of the system).</p> <p>Optionally, based on complexity of the proposal, you can have multiple types of diagrams like the Sequence Diagram (Good for representing a solution with cross-section of multiple use-cases across components and actors), Activity Diagram(Helpful in representing how multiple components can be clubbed together), Deployment Diagram(If you want to get to lower level details), etc. Please choose diagrams which best explain your solution as every problem statement, and every solution is different.</p>"},{"location":"Architecture/HLD/hld/#dependencies","title":"Dependencies","text":"<p>Discuss your dependencies on other components and services. The fall-back plan when they\u2019re unavailable for a period of time? Which services must be running for your job to start up? Are you introducing any cycles, such as blocking on a service that can\u2019t run if your jobs aren\u2019t already up?</p> <p></p>"},{"location":"Architecture/HLD/hld/#migrations","title":"Migrations","text":"<p>Describe any data or system migrations which might be needed. Incomplete migrations hurt a system in the long run; they add enormous complexity, hurt reliability, and make programming unpleasant. If existing systems must be turned down to achieve the proposed design, describe how that transition will happen. \u201cHow do we get there from here?\u201d is difficult, but often overlooked.</p>"},{"location":"Architecture/HLD/hld/#technical-debt","title":"Technical debt","text":"<p>Things to consider</p> <ol> <li>Is there known technical debt incurred by implementing this design?</li> <li>Is there a risk associated with technical debt (e.g., deprecation of underlying technologies) incurred by implementing this design?</li> <li>How will technical debt identified during the execution of this design be tracked and followed up with?</li> <li>Are there libraries or code paths that would be deprecated? If so, what is the plan to migrate the usage to the new piece.</li> <li>Are there libraries or code paths that would be obsolete? When will they be deleted?</li> <li>Are there any servers that could be turned down? If so, please document the turndown process.</li> </ol> <p></p>"},{"location":"Architecture/HLD/hld/#potential-patents","title":"Potential patents","text":"<p>Are there potentially patentable inventions in the project? The work may be patentable if the design: \u25cf Provides for something not otherwise commercially available. \u25cf Does something better/faster/cheaper than what currently exists. \u25cf Addresses an unresolved need.</p>"},{"location":"Architecture/HLD/hld/#alternatives-considered","title":"Alternatives considered","text":"<p>Clearly list the other potential approaches to meeting the objective that you considered and why the current proposal was ultimately selected. In the rare cases where requirements or system constraints only allow for one possible high-level approach, that should be highlighted here and alternatives to specific details should still be discussed in-line in the detailed design section. An effective strategy is to compare dimensions of the solution space and how they vary across alternatives, such as latency, data staleness, cpu cost, engineering investment, etc. A color-coded table explaining favorability in that dimension and how important it is from green through yellow, orange and red quickly conveys the rationale to a reader, though this is just one possible approach to explain the trade-offs. For example:</p> <p></p>"},{"location":"Architecture/HLD/hld/#quality-attributes","title":"Quality attributes","text":""},{"location":"Architecture/HLD/hld/#security","title":"Security","text":"<p>Think about potential attacks on your system and describe the counter-measures you have in-place to prevent or mitigate each attack. For each attack describe the worst case impact it would have. Also, list any known vulnerabilities or potentially insecure dependencies. If somehow your application doesn\u2019t have security considerations, explicitly state so and why.</p> <p>Please consider attacks from a variety of sources, including both external and internal risks. When evaluating insider risk, include both insider risk from your co-employees as well as insider risk for customers (e.g. for enterprise products, employees of an enterprise; for consumer products, family members or friends of customers)</p>"},{"location":"Architecture/HLD/hld/#reliability","title":"Reliability","text":"<p>Discuss handling of local data loss, transient errors (e.g., temporary outages) and how they affect your system. Bear in mind that reliability issues with your dependencies can often cause reliability issues for your system.</p> <p>What do you use that inherently provides reliability and redundancy for data? What do you use that requires data to be backed up? How is the data backed up? How is it restored? What happens between the time data is lost and the time it\u2019s restored? In the case of a partial loss, can you keep serving and can you restore only missing portions of your backups to your serving datastore?</p> <p>What are the costs of replicating your data?</p>"},{"location":"Architecture/HLD/hld/#data-integrity","title":"Data integrity","text":"<p>Discuss how you will detect, provision for and recover from data corruption and loss.</p> <p>How will you find out about data corruption or loss in your datastores? What sources of data loss are detected? (User error, application bug, storage platform bug, site/replica disaster.)</p> <p>How long will it take to notice each of these types of losses? What is your plan to recover from each of these types of losses?</p>"},{"location":"Architecture/HLD/hld/#privacy","title":"Privacy","text":"<p>Does your solution cover privacy standards in place? Is the customer PII protected by sufficient firewalls and encryptions? Are your private keys sufficiently protected?</p>"},{"location":"Architecture/HLD/hld/#scalability","title":"Scalability","text":"<p>How does your system scale? Consider both data size increase (if applicable) and traffic increase (if applicable).</p> <p>Please consider the current machine situation: adding more machines might take much longer than you think or might not happen during the lifetime of your project. What initial resources will you need? Plan early and carefully. Also, general machine utilization is a concern, using more resources than you need will block expansion of your service.</p>"},{"location":"Architecture/HLD/hld/#latency","title":"Latency","text":"<p>This section can be skipped if you are not designing a server on a human facing path. What latency do you need/expect? In particular, make sure you understand the bottlenecks of the pieces you\u2019re reusing. All services should define latency targets.</p>"},{"location":"Architecture/HLD/hld/#testability","title":"Testability","text":"<p>Specify the test plan. What are the sub-units of your system that will be independently testable?</p> <p>How do you plan to test them? For example,</p> <ul> <li>Build a test harness around it that simulates its environment  </li> <li>Generate random/carefully controlled input data </li> <li>Compare with golden results/maintain state in the test harness</li> </ul> <p>Are you tests run automatically by the CI/CD pipelines</p> <p>What load can your server handle, and how will you verify that value?</p> <p>If there are changes envisaged in your future work, would your tests verify the base functionality? If some of your tests cannot be easily automated, how will you document the needed special procedures?</p> <p>Consider the external systems your system depends on - How fast will your unit test cycle run? - What test infrastructure (e.g. test doubles) from external systems will you use? - Does the external system have a test instance for integration testing? - Do you need any tests that run outside of the standard unit test cycle (e.g. presubmit, postsubmit, or release)? Consider future systems that will depend on yours. What test facilities (e.g. test doubles, local instances for exploratory integration tests) will you provide so that they can run integration tests?</p> <p></p> <p>Why you should have a good test!</p>"},{"location":"Architecture/HLD/hld/#operations","title":"Operations","text":""},{"location":"Architecture/HLD/hld/#slas","title":"SLAs","text":"<p>If your application makes any service level guarantees, what mechanisms are in place for auditing, monitoring, etc.? And how can you guarantee the stated level of reliability?</p>"},{"location":"Architecture/HLD/hld/#monitoring-alerting","title":"Monitoring &amp; alerting","text":"<p>Is there a mechanism for monitoring and alerting for the running system. Is there an oncall and escalation metrics?</p>"},{"location":"Architecture/HLD/hld/#logging-plan","title":"Logging plan","text":"<p>All systems must log information at various levels for the log analysis system to collect and analyze. Log information allows us to understand system user behavior and system related business metrics. In this section, describe the information that you are going to log.</p>"},{"location":"Architecture/HLD/hld/#rollback-strategy","title":"Rollback strategy","text":"<p>In order to improve incident management response, which will result in reduced time to mitigate issues, teams should document and test their ability to rollback major change surfaces. This includes, but is not limited to: - Documenting the overall rollback strategy; - Identifying surface areas which are not able to be rolled back and defining a fix-forward strategy.</p>"},{"location":"Architecture/HowTo/api-doc/","title":"Create docs from an Open API Spec","text":""},{"location":"Architecture/HowTo/api-doc/#widdershins","title":"Widdershins","text":""},{"location":"Architecture/HowTo/api-doc/#install","title":"Install","text":"<pre><code>npm install -g widdershins\n</code></pre>"},{"location":"Architecture/HowTo/api-doc/#config","title":"config","text":"<p>save in config.json</p> <pre><code>{\n  \"language_tabs\": [\n    {\n      \"python\": \"Python\"\n    },\n    {\n      \"http\": \"HTTP\"\n    },\n    {\n      \"shell\": \"Shell\"\n    }\n  ],\n  \"language_clients\": [\n    {\n      \"shell\": \"curl\"\n    }\n  ],\n  \"httpsnippet\":\"true\",\n  \"resolve\":\"true\",\n  \"headings\":\"4\"\n}\n</code></pre>"},{"location":"Architecture/HowTo/api-doc/#run","title":"run","text":""},{"location":"Architecture/HowTo/api-doc/#create-html","title":"create html","text":"<pre><code>widdershins --environment config.json --html &lt;api_spec&gt;.yaml -o index.html\n</code></pre>"},{"location":"Architecture/HowTo/api-doc/#create-respec","title":"create respec","text":"<pre><code>widdershins --environment config.json --respec &lt;api_spec&gt;.yaml -o index.html\n</code></pre>"},{"location":"Architecture/HowTo/api-doc/#create-markdown","title":"create markdown","text":"<pre><code>widdershins --environment config.json &lt;api_spec&gt;.yaml -o index.md\n</code></pre>"},{"location":"Architecture/HowTo/api-doc/#reslate-to-create-html","title":"reslate to create html","text":""},{"location":"Architecture/HowTo/api-doc/#get-reslate","title":"Get reslate","text":"<p>NOTE: You may wish to create a fork of this repo</p> <pre><code> git clone git@github.com:Mermade/reslate.git\n</code></pre>"},{"location":"Architecture/HowTo/api-doc/#copy-your-markdown-file","title":"Copy your markdown file","text":"<p>Copy markdown file to source/index.md</p>"},{"location":"Architecture/HowTo/api-doc/#change-logo","title":"change logo","text":"<p>change _site\\slate\\img\\logo.png</p>"},{"location":"Architecture/HowTo/api-doc/#change-css-if-required","title":"change css if required","text":"<p>modify _site\\slate\\css\\screen.css</p>"},{"location":"Architecture/HowTo/api-doc/#install_1","title":"install","text":"<pre><code>npm i\n</code></pre>"},{"location":"Architecture/HowTo/api-doc/#access-content","title":"Access content","text":"<p><pre><code>npm run serve\n</code></pre> browse to http://localhost:4567</p>"},{"location":"Architecture/HowTo/api-doc/#pandoc","title":"pandoc","text":""},{"location":"Architecture/HowTo/api-doc/#install-pandoc","title":"install pandoc","text":"<pre><code>apt install pandoc\n</code></pre>"},{"location":"Architecture/HowTo/api-doc/#run-pandoc","title":"run pandoc","text":"<p>NOTE: When creating pdf's pandoc doesnt wrap code blocks</p>"},{"location":"Architecture/HowTo/api-doc/#docx","title":"docx","text":"<pre><code> pandoc -o &lt;output&gt;.docx -f markdown -t docx &lt;input&gt;.md\n</code></pre>"},{"location":"Architecture/HowTo/api-doc/#pdf","title":"pdf","text":"<pre><code> pandoc &lt;input&gt;.md -o &lt;output&gt;.pdf -V geometry:margin=1in\n</code></pre>"},{"location":"Architecture/HowTo/howto/","title":"howto","text":""},{"location":"Architecture/Reference/10-architecture-patterns-to-know/","title":"10 Design Patterns every Software Architect and Software Engineer must know","text":"<p>Any business exists to solve a real human problem. It could be to increase speed, reduce cost, improve convenience, add pleasure to life or make the knowledge available at the fingertips. Technology often used to solve these business problems. But then why the design patterns are important? Typical challenges with IT system are Availability, Scalability, Resiliency, Data Management, Performance and Security. Before going into design patterns it is important to get clarity of these words.</p> <p>Availability: Availability is the percentage of time system is up in a defined timeframe. A system can be down because of multiple reasons like software errors, network issues, load issues, DDos (Distributed Denial of Service) attacks and infrastructure hardware issues. Availability is measured as a percentage as below.</p> <p></p> <p>Scalability: In 2014, Flipkart - an Indian online retailer went on to apologise to customers as big billion sale could not cope up with customer demands because of scalability issues. Scalability is a factor of computing resources, data storage needs, messaging infrastructure and cost. There are two ways to sort out scalability issues. The first one is vertical scaling where you would keep on increasing the capacity of the resources the second one is horizontal scalability where you add more nodes. There are pros and cons with either of these approaches. Typically, vertical scaling is faster, but has limitation beyond a certain point of time and horizontal scaling takes more time and offers close to infinity scaling.</p> <p>Scalability is how the system resources can cope up with unpredictable customer demands.</p> <p>Resiliency: You went on to buy a watch on an e-commerce site. You did not like the design and you want to look for more options. You selected few dropdown boxes with design, color, price filters and clicked on search button. Now you would expect to see picture of the watch, price data, some specifications like Band Material Type, Watch Movement, Colour, Delivery Date. What if delivery date microservice was down that time? As an architect, you have multiple options now. Do not show that field at all, show a static message that \u201cWe are calculating the accurate delivery date, please be patient\u201d, or you pick up a date range and show to the customer.</p> <p>Resiliency is the ability of a system to gracefully handle the failures and recover from failures as soon as it can.</p> <p>Data Management: Data management plays a crucial role in scalability, availability, security and resiliency. Architectural decisions related to data management depends on what type of application you are building. Is it write heavy (more user transactions), read-heavy (reports), meant to do analytics (forecasting, customer segmentation), time series (log processing) or Datawarehouse (data analytics). Few other factors that would influence are data consistency, data availability, data storage and archival strategy.</p> <p>Performance: Scalability and performance are interrelated. If there are more users compared to what the system can handle, it is natural that the system would encounter performance issues. How to deal with this? Either you increase the resources or reduce the number of users. Of course, the second choice is not ideal because you would end up losing the business. In fact, we will sort out these performance issues when you sort out scalability issues. I just want to remind you, scalability can\u2019t solve all the performance issues but can solve some issues. For example, if the performance issues are the result of badly written DB query, scaling the resources without fine-tuning the query will prove to be a disastrous decision.</p> <p>Security: Building secure systems gives an assurance to users that their data is in safe hands. Data integrity and data durability are equally important. It is very similar to when you put your money in the bank. If you deposited one million dollars in the bank, you do not want to lose that money (Safe), you would want the bank to always say you deposited one million -no mistakes here (Integrity) and even after 10 years you go to the bank, you will still have that one million dollars money (Durability).</p> <p>As you now got the basics right, let's look at important patterns one by one. No design pattern is a magic pill for all the issues. One needs to choose depending on the use case.</p> <p>Scalability and Performance</p> <ol> <li>CQRS: Command Query Responsibility Segregation is first introduced by Greg Young. As the name suggests it is about segregating the write and read responsibilities. Write and read can happen from a single database or multiple databases. But the data model is different. CQRS easily fits into event sourcing architecture. Consume the events as and when they occur and write into \u201cWrite DB\u201d. For display or reporting purposes read from the \u201cRead DB\u201d. To make this even more exciting, you may use normalized RDBMS for write and denormalized NoSQL DB for \u201cRead\u201d. Commands are typically queued for asynchronous process and a query can never modify a DB. One very good benefit is you can independently scale the DBs</li> </ol> <p></p> <p>CQRS \u2014 Command Query Responsibility Segregation</p> <p>Data Management, Security</p> <p>2. Anti Corruption Layer pattern: This pattern was initially described by Eric Evans in Domain-Driven Design (DDD). Let me introduce this with a story. Martin and Sheela work in a retail chain. Martin works in the customer order team and Sheela works in Loyalty Card team. From the DDD perspective, Martin and Sheela belong to two different domains and typically they do not interact with each other. One day Sheela wanted to make a change in her system. The change is to know the location of the customer so that she can offer additional loyalty points based on the location. However, she doesn't know Martin. Even if she knows, Martin may not agree to her change as he has to change his API. However, she knows that Srinivas is Martin\u2019s manager. She approaches Srinivas to make the change. In this case, Srinivas is an Anti-Corruption Layer. This pattern is typically used when you have legacy systems and modern applications and you are in the journey to migrate. This layer contains all the logic that is required to translate the requests from modern systems. The biggest challenge in introducing this layer is, it will add one more hop for the user and adds to latency. A decision must be taken between speed vs. data.</p> <p></p> <p>Anti Corruption Layer</p> <p>Resiliency, Fault Tolerance</p> <p>3. Circuit Breaker Pattern: When you travel in flight, there is an oxygen mask and a life west, which is rarely paid attention to other than the air hostess who demonstrates passionately. The reason is very evident. These are used only when there is a failure. Your basic assumption is your flight will not fail, it is not required for you to use and so you will not pay attention. But this is not true for IT systems.</p> <p>\u201cEverything fails all the time\u201d \u2014 Werner Vogels, AWS CTO</p> <p>I am sure you heard about many famous websites being down because of various reasons. In a distributed environment anything can fail at any time.</p> <p>As an architect, you can\u2019t prevent failures. You can only design to handle the failures.</p> <p>Circuit breaker pattern prevents an application from performing an operation that is almost certain to fail. Let me explain this. Your system is suddenly experiencing load and there are more API requests than it can handle. For instance, service typical response time threshold is 5 second and now requests are taking more than that and your service starts sending 500 responses back. Keeping aside the bad experience to the user, your system might completely give up if there is more load beyond a certain point. Now it is time to stop more requests.</p> <p>Let's compare this with how an electrical circuit breaker works. Did you ever encounter this? You just switched on a plug and your electricity is suddenly gone. Now you may need to go to your switchboard either in the basement or in your main hall and ON the switch that went off. This is where the circuit breaker is in action in the real world. What is this doing? As the load is high, the electricity was stopped to prevent further damage.</p> <p>Lets now come back to our world. The circuit breaker pattern has three states. Closed, Open and Half Opened. In the closed state, everything is normal and your system works as it is intended. When there is an issue, the circuit breaker opens and data flow cuts off. This means that intended requested are not served to users. Half Open tries to test the waters after some wait time, to see if the problem still exists. If it is successful, state gets changed to closed so that system comes back to normal. If it is not successful, it will go back to open state.</p> <p></p> <p>Circuit Breaker \u2014 Closed State</p> <p></p> <p>Circuit Breaker \u2014 Open State</p> <p>Scalability, Resiliency and Performance</p> <p>4. Event Sourcing: This pattern became popular in recent days as data became new oil. This pattern suggests that, do not just store the state of an action but an entire history. Let\u2019s say you are building a banking application. A customer will have multiple debits and credits in a period of time. Let's say the customer starts with $1000. On Day 1, she credits $50, on Day 2, she debits $100, on Day 3 she credits $150. At the end of day3, she will have $1100. However, in the case of Event Sourcing, you store all the transactions without losing a single action. When you have this data you can use for multiple purposes. While you can definitely tell what is her bank balance at any point of time by doing a quick calculation on the fly, you can also understand her banking patterns which otherwise not possible.</p> <p></p> <p>Event Sourcing</p> <p>Let's look at one more example. You are building a movie ticket booking system. For a popular movie, you will see a lot of rush from the audience, which will cause scalability issues. Customer may book, cancel or hold the seats. Let's say the theatre has 200 seats. You need to constantly calculate available seats to make the number visible to the next customer. This is where event sourcing will be handy. Instead of calculating the available seats as a CRUD operation, you will go through all the events and finally arrive to a number.</p> <p>Scalability, Resiliency, Fault Tolerance and Performance</p> <p>5. Publisher-Subscriber pattern</p> <p>This is popularly called as Pub/Sub pattern. In a cloud based system, modules of one system need to communicate with modules of same or another system asynchronously. Let me give an example. You are building a leave management system. Whenever an employee applies for a leave, you need to inform, Timesheet module, Scheduling module and Payroll module at the same time. This can be done with an async call. These modules just consume data. They will not validate the data. However, when an employee applies for leave, balance verification must be a sync call (typically a REST Api call), as an employee must not apply for leave when there are no balances (well, goes with HR policies of the organization)</p> <p>One more example here. Imagine that you are a news sourcing company and you gather the news from various input mechanisms. Your end-users are newspapers and publishing companies. Then you capture the news on the ground and publish to your customers. If your customer is a sports magazine, they will only consume sports-related news or if your customer is a finance website, they will only use finance related to data. Your responsibility is to capture what is happening in the world without losing a single event. It is up to the customers to decide what they want to consume. You can also create materialized views for further consumption.</p> <p></p> <p>Pub Sub Pattern</p> <p>Message brokers as mentioned in the picture best used for asynchronous communication. Whenever there is a need for resilient and fault-tolerant applications, Pub-Sub pattern comes handy. There are plenty of options for Message broker, Apache Kafka, Apache Active MQ, AWS Kinesis, IBM MQ. Apache Kafka is most popular, known for high performance and zero loss of data.</p> <p>Scalability, Data Management and Performance</p> <p>6. Sharding Pattern: If you invest in stock market, it is a well-proven strategy that you will not put all your money in one single stock. You will create a portfolio of stocks and invest. With this approach, if one stock price goes down you still will have other stocks making some profits.</p> <p>Don't put all your eggs in a single basket.</p> <p>Sharding takes a similar approach. In this pattern, you will divide data into multiple partitions or shards. This massively improves the scalability. This pattern comes under horizontal scalability, not vertical scalability. What will happen if the data is stored in a single data store? Same as single stock in the above example. If the datastore goes down, your users will not be able to access the data causing lot of pain. Beyond a certain point, you will encounter storage issues, computing power, network and bandwidth issues. If you are servicing users in different locations, having one data store will add to latency issues.</p> <p></p> <p>Sharding improves the scalability, performance and fault tolerance. There are multiple ways to come up with sharding strategy. The strategy goes with your use case.</p> <p>Range-based Sharding: Suppose if you are storing customer data, you may look at storing based in pin code or zip code range. The disadvantage with this model is your customer data may not be equally distributed</p> <p>Vertical Sharding: If you are building an e-commerce application, you might store customer demographic details in one shard and customer buying transactions in another shard. This gives an opportunity for you to scale as you needed.</p> <p>Hash-based Sharding: This is a widely used strategy. If you have 5 shards to store customer data. You take for example customer unique id and apply modulo 5.</p> <p>Some fun maths for you now.</p> <p>How to calculate Modulo 5 of any number. It is simple. Let\u2019s say the number is 23. Divide this number by 5. You will get 4.6. Now take 4 and multiply by 5. You get 20. Now do 23\u201320, you will get 3. Thus, the answer to \u201cWhat is 23 mod 5?\u201d is 3.</p> <p>Hash-based sharding will have challenges in long run. What if you would like to add one more shard after an year. You need to change the sharding logic and the capacity in the data store goes for a toss. The solution is consistent hashing.</p> <p>Data Management</p> <p>7. Strangler Pattern: Wikipedia meaning of Strangler is an epiphyte whose aerial roots eventually strangle the tree on which it grows. Today pretty much every organization is moving from monolithic to micros services. This journey is not going to be easy in any means. When you migrate to a new system from a legacy system, you systematically move the functionality to the new system instead of a big bang approach. If you are migrating a legacy monolithic application to cloud microservices application, this pattern comes handy. Eventually, when the migration is over, the user directly interacts with modern applications. In this pattern, the small functionalities (or micro services) that are built and getting migrated, eventually kills the main system. Find more details on this pattern from Martin Fowler\u2019s blog.</p> <p></p> <p>Strangler Pattern</p> <p>Data Management, Security</p> <p>8. Saga Pattern: This is the best pattern to manage data consistency in a distributed system. Before the internet and WhatsApp, people used to travel to relatives and friends home personally and give marriage invitations. This is seen as inviting with respect. Anyways, keeping this aside, what if the marriage cancels by any chance? You do not want your relatives and friends to come on that day. The best way is you again travel to each person\u2019s place and tell them that marriage got cancelled. (Not a positive example. But that's life). This is exactly Saga pattern. The first paper on Saga pattern was published in 1987.</p> <p>There are two ways to implement sagas pattern. Event/Choreography design and Command/Orchestration Sequencing Logic. Choreography design is very complicated. Lets look at Command/Orchestration Sequencing Logic. I will now take the example of flight booking application. This is the sequence when you book a flight.</p> <ol> <li>Select a seat (Seat Service)</li> <li>Select Meal (Meal Service)</li> <li>Pay for booking (Payment Service)</li> <li>Available seats now get updated to deduct one seat (Booking Service)</li> </ol> <p></p> <p>Saga Orchestrator</p> <p>Let's look at the sequence of events:</p> <ol> <li>Booking Service saves a available seat for user and asks Booking Saga Orchestrator (BSO) to start a Book seat transaction.</li> <li>BSO sends a \u201cDo Payment\u201d command to Payment Service, and it replies with a Payment Succesful message</li> <li>BSO sends a Confirm a seat command to Seat Service, and it replies with a Seat Confirmed message</li> <li>BSO sends a Book a meal command to Meal Service, and it replies with a Meal Confirmed message.</li> </ol> <p>Let's say payment service fails. You do not want to offer a free seat and a free meal for your customer. Now BSO sends a command to roll back the seat booking and meal booking. A very good and detailed explanation of Saga Pattern can be found here</p> <p>Availablity, Resiliency</p> <p>9. Throttling Pattern: If you ever visited any famous Indian temples on a good day, there will be 50K to 100K devotees. The Darshan time (time in front of God) lasts for just few seconds but they spend in the queue anywhere between 4 to 8 hours. Temple administration usually controls the crowd by putting them in small compartments with some seating facility. Lets says there are 20 compartments and one final queue before \u201cdarshan\u201d. Around 200 people will fit in one compartment. As the time progresses, people move from compartment 1 to compartment 2 and so on until they hit the final queue. This is called Throttling.</p> <p>When it comes to IT applications, most of the times load is predictable until unless there are some black swan events. E-commerce site gets more load during festive season or when there is a sale. For a banking system there may be more load during the time when the salary is getting credited. For a time capturing system, there will be peak load during morning, afternoon and evening time. One option to handle these peak loads is to auto scale the resources. Second option is to put a limit on the number of transaction that the system can process and start throttling the remaining transactions. With this, the SLAs are met and system continues to function as it is intended.</p> <p></p> <p>Throttling</p> <p>Availablity, Performance</p> <p>10. Static content hosting pattern: On a typical website, the content that doesn't change is called static content. It is generally created using HTML, CSS and Javascript. Javascript is not mandatory, can also be done with just HTML and CSS(or Sass). The dynamic website will have a logic to run on the web server and usually does CRUD operations on data which is not possible to be served by the static website. Dynamic websites depend on server-side processing, including server-side scripts such as PHP, JSP, or ASP.NET or Node.js. For example, you would like to know the price of a product before buying, you would like to pay your electricity bill, you want to post happy birthday on your friend\u2019s timeline, or even complicated, you would like to implement your options strategy of a stock. All these require a dynamic website. With the emergence of AWS, Azure and Google cloud platform static hosting doesn\u2019t need your own server to run. For example, you can host your static website on Amazon S3 (Simple Storage Service) without a need to spin off a new server. in addition, you can speed up your site by using Cloudfront which will store the files at the edge location close to users.</p>"},{"location":"Architecture/Reference/12_software_architecture_styles-software_engineers_should_know/","title":"12 Software Architecture Styles Software Engineers Should Know","text":"<p>A brief introduction to Microservice, SOA, Event-Driven, MicroKernel, Stream-Based, and more.</p>"},{"location":"Architecture/Reference/12_software_architecture_styles-software_engineers_should_know/#what-is-software-architecture","title":"What is Software Architecture?","text":"<p>Software architecture is the process of defining the high-level structure and organization of a software system. It involves identifying and selecting the right components, deciding how they should interact with each other, and determining how they should be organized to achieve specific goals. The goal of software architecture is to create a system that is maintainable, scalable, and secure, and that can meet the needs of users and organizations over time.</p>"},{"location":"Architecture/Reference/12_software_architecture_styles-software_engineers_should_know/#why-do-we-need-software-architecture","title":"Why do we need Software Architecture?","text":"<p>A robust architecture provides a solid foundation for building software that meets the needs of users and stakeholders. It ensures that the system meets its functional and non-functional requirements, such as performance, security, and reliability. With a well-designed architecture, developers can build software that is easy to modify and extend, making it easier to adapt to changing business needs.</p> <p>Software architecture is also essential for managing complexity. As software systems become more complex, it becomes challenging to understand how different components interact with each other. A well-designed architecture provides a high-level view of the system, making it easier to understand its structure and operation. This, in turn, helps developers to identify potential issues and make informed decisions about how to modify the system.</p>"},{"location":"Architecture/Reference/12_software_architecture_styles-software_engineers_should_know/#how-do-we-document-architecture-we-use-4c-model","title":"How do we Document Architecture? We use 4C Model.","text":""},{"location":"Architecture/Reference/12_software_architecture_styles-software_engineers_should_know/#context-level","title":"Context Level","text":"<p>At the highest level, the Context level, we describe the system\u2019s external environment, such as users, other systems, regulations, etc. This level provides a high-level overview of the system\u2019s purpose and its relationship to the external world. It helps to identify the stakeholders who will interact with the system and the factors that will influence its design and development.</p>"},{"location":"Architecture/Reference/12_software_architecture_styles-software_engineers_should_know/#containers-level","title":"Containers level","text":"<p>The next level is the Containers level, which describes the runtime environment of the system, such as servers, databases, or message queues. This level helps to identify the major technology choices and deployment decisions. It provides an understanding of the physical infrastructure that will support the system and the tools and resources that will be required to deploy and maintain it.</p>"},{"location":"Architecture/Reference/12_software_architecture_styles-software_engineers_should_know/#components-level","title":"Components level","text":"<p>The third level is the Components level, which describes the major functional building blocks of the system. This level helps to identify the modules, classes, or functions that make up the system. It provides an understanding of the system\u2019s functionality and the relationships between its different components.</p>"},{"location":"Architecture/Reference/12_software_architecture_styles-software_engineers_should_know/#code-level","title":"Code level","text":"<p>Finally, the Code level is the lowest level, which describes the actual code and how it implements the components. This level provides a detailed understanding of how the system works and how its different components interact with each other. It is essential for developers who will be working with the code to have a clear understanding of how it is structured and how it works.</p> <p>Using the C4 model, software architects can create diagrams and written documentation that describe each of these levels, providing a comprehensive view of the system\u2019s architecture. This approach helps to identify potential issues and trade-offs, as well as facilitating scalability, maintainability, and adaptability. By documenting the architecture in this way, developers and stakeholders can have a clear and easy-to-understand view of the system, making it easier to modify and extend as business needs change.</p>"},{"location":"Architecture/Reference/12_software_architecture_styles-software_engineers_should_know/#here-are-the-12-software-architecture-styles-software-engineer-should-know","title":"Here are the 12 Software Architecture Styles Software Engineer Should Know","text":""},{"location":"Architecture/Reference/12_software_architecture_styles-software_engineers_should_know/#1-client-server","title":"1. Client Server","text":"<p>The client-server architecture is a model in which the client, a user or an application, sends a request to the server, which in turn responds with the requested data or service. The client and server can be on the same machine or on different machines connected through a network.</p> <p>The client is responsible for initiating communication with the server and sending a request. The server, on the other hand, listens for incoming requests from clients, processes them, and returns a response.</p> <p>Advantages of Client-Server Architecture</p> <p>Scalability: Client-server architecture is highly scalable, as it allows multiple clients to connect to the same server and share resources.</p> <p>Security: Client-server architecture provides better security than other network models, as the server can control access to resources and data.</p> <p>Reliability: Client-server architecture is highly reliable, as the server can provide backup and recovery services in case of failures.</p>"},{"location":"Architecture/Reference/12_software_architecture_styles-software_engineers_should_know/#2-layering","title":"2. Layering","text":"<p>It\u2019s a common way to design complex software systems, and it involves breaking down the system into layers, where each layer is responsible for a specific set of functions. This approach helps to organize code and makes it easier to maintain and modify the system over time.</p> <p>A typical layering architecture consists of three main layers: presentation, business logic, and data access.</p> <p>Presentation Layer: The presentation layer is responsible for displaying information to the user and gathering input. This layer includes the user interface and any other components that interact directly with the user. The user interface is what the user sees and interacts with, such as buttons, text boxes, and menus. The presentation layer also includes any logic related to the user interface, such as event handlers and validation.</p> <p>Business Logic Layer: The business logic layer is responsible for implementing the business rules of the application. This layer contains the code that processes and manipulates data, as well as any other application logic. The business logic layer is where the magic happens, so to speak. It\u2019s where the software performs calculations, makes decisions, and carries out tasks. This layer is where the software really earns its keep.</p> <p>Data Access Layer: The data access layer is responsible for interacting with the database or other external data sources. This layer contains the code that reads and writes data to and from the database. The data access layer is where the software retrieves data from the database, makes changes to the data, and saves the changes back to the database. This layer is critical to the functioning of the software, as it enables the software to store and retrieve data.</p>"},{"location":"Architecture/Reference/12_software_architecture_styles-software_engineers_should_know/#3-pipe-and-filter","title":"3. Pipe and Filter","text":"<p>Pipe and Filter Architecture is a design pattern that allows software systems to process data by separating the processing tasks into multiple independent components. This architecture is particularly useful for systems that need to handle large amounts of data, as it can help to improve performance, scalability, and maintainability.</p> <p>The Pipe and Filter Architecture is based on the idea of a pipeline, where data flows through a series of processing steps, each of which performs a specific task. Each processing step is implemented as a separate component, or filter, that accepts data as input, performs some operation on the data, and produces output data. The output data is then passed on to the next filter in the pipeline.</p> <p>The filters in the pipeline are independent of each other, which means that they can be developed, tested, and deployed separately. This makes it easy to add new filters to the pipeline or modify existing ones without affecting the rest of the system.</p> <p>Benefits</p> <p>Scalability: The architecture can be scaled horizontally by adding more filters to the pipeline, which allows the system to handle larger amounts of data.</p> <p>Performance: The architecture can be optimized for performance by parallelizing the processing of data across multiple filters.</p> <p>Maintainability: The architecture promotes modularity and separation of concerns, which makes it easier to maintain and update the system over time.</p>"},{"location":"Architecture/Reference/12_software_architecture_styles-software_engineers_should_know/#4-master-slave","title":"4. Master-Slave","text":"<p>Master-Slave architecture is a design pattern used in distributed systems, where one node (the master) controls one or more nodes (the slaves) to perform specific tasks. The master node is responsible for distributing the workload across the slaves and for coordinating their activities. The slave nodes do not have the same level of control as the master node and only perform tasks that are assigned to them by the master.</p> <p>Benefits</p> <p>One of the most significant advantages is that it allows for the efficient distribution of workload across multiple nodes. This helps to reduce the load on any one node and ensures that the system can handle large amounts of data and traffic.</p> <p>Another advantage of using a master-slave architecture is that it provides fault tolerance. If one of the slave nodes fails, the master node can redistribute its workload to the other slave nodes. This ensures that the system can continue to function even if one or more nodes fail.</p>"},{"location":"Architecture/Reference/12_software_architecture_styles-software_engineers_should_know/#5-microkernel","title":"5. MicroKernel","text":"<p>MicroKernel architecture is a software design pattern that allows developers to build more modular and flexible systems. It separates the core system functionality from additional features, which are implemented in separate modules. The core functionality of the system is implemented in the MicroKernel, a minimalistic core system that provides only the most essential services required to run the system. It is plug and play concept.</p> <p>Example:</p> <p>Let\u2019s consider the example of an e-commerce website. The MicroKernel would provide essential services such as handling user authentication, managing user sessions, and processing payments. Additional features, such as product recommendations, user reviews, and social media integration, would be implemented in separate modules.</p> <p>If the website wants to add a new feature, such as a loyalty program, it can be developed and added as a separate module without affecting the core functionality of the system. This modularity makes it easier to add new features or remove existing ones without affecting the core system functionality.</p> <p>Furthermore, if the website wants to customize its system to meet the specific needs of different users, it can choose the modules it needs for each user. For example, a user who frequently buys electronics can be provided with a module that recommends electronic products. On the other hand, a user who frequently buys cosmetics can be provided with a module that recommends cosmetic products.</p> <p>Finally, if the website wants to scale its system to handle more users or changes in hardware, it can easily add or remove modules as needed. This scalability makes it easier to adapt the system to changes in user requirements or changes in the underlying hardware.</p>"},{"location":"Architecture/Reference/12_software_architecture_styles-software_engineers_should_know/#6-ddd-domain-driven-design","title":"6. DDD (Domain Driven Design)","text":"<p>At its core, DDD is a way of thinking about software architecture that emphasizes the domain or problem space of a project. This means that developers focus on the business logic of the software, rather than just the technical implementation.</p> <p>In practice, this means that developers start by understanding the domain they are working in and break it down into smaller, more manageable parts. They then use this understanding to create a domain model, which is a representation of the different entities within the domain and how they interact with one another.</p> <p>Once the domain model is created, developers can use it to guide the rest of the architecture of the software. This includes creating bounded contexts, which are areas of the software that are defined by a specific language and context, and aggregates, which are collections of related entities that are treated as a single unit.</p>"},{"location":"Architecture/Reference/12_software_architecture_styles-software_engineers_should_know/#7-component-based","title":"7. Component Based","text":"<p>In software engineering, component-based architecture (CBA) is an approach to software design and development that emphasizes the use of reusable software components. The idea behind CBA is that software development can be made more efficient and effective by breaking down complex systems into smaller, more manageable components.</p> <p>What is a component?</p> <p>A software component is a modular, self-contained unit of software that can be reused across different systems. A component typically has a well-defined interface, which specifies how other components can interact with it. This interface includes information about the component\u2019s inputs, outputs, and behavior.</p> <p>Components can be classified into different types based on their functionality, such as user interface components, data access components, and business logic components. Each type of component has a specific role in the software system and can interact with other components through their interfaces.</p>"},{"location":"Architecture/Reference/12_software_architecture_styles-software_engineers_should_know/#8-soa","title":"8. SOA","text":"<p>SOA is an architectural style that aims to create modular, reusable services that can be easily integrated with other services to create a larger system. In this approach, services expose their functionality through interfaces, which can be accessed by other services or applications.</p> <p>At its core, SOA is about building software by breaking it down into smaller pieces, or modules, that can be reused across different applications. This modular approach allows developers to focus on building specific pieces of functionality and then integrating them with other pieces to create a larger system.</p> <p>Core Components of SOA</p> <p>Service Provider: The service provider is responsible for creating and exposing services to the outside world. These services can be used by other services, applications, or end-users. For example, a payment processing service provider might create and expose a service that allows other applications to process payments.</p> <p>Service Registry: The service registry is a directory of available services that can be accessed by other services or applications. The service registry provides information about the service, such as its name, location, and interface. For example, if an application needs to process payments, it can use the service registry to find the payment processing service and access its interface.</p> <p>Service Requestor: The service requestor is responsible for consuming the services exposed by the service provider. This can be done by using the service registry to find the appropriate service and then invoking its interface. For example, an application might use the service registry to find the payment processing service and then use its interface to process payments.</p>"},{"location":"Architecture/Reference/12_software_architecture_styles-software_engineers_should_know/#9-monolithic","title":"9. Monolithic","text":"<p>Monolithic architecture is a software design pattern that has been around for decades. It\u2019s a way of structuring an application as a single, cohesive unit, rather than splitting it up into individual, smaller components.</p> <p>In a monolithic architecture, the entire application is built as a single, self-contained unit. All of the code and dependencies are packaged together, so the application can be deployed and run on a single server.</p> <p>This makes it easy to develop and deploy the application, since everything is in one place. It also makes it easier to scale the application horizontally, by adding more servers.</p> <p>Advantages of Monolithic Architecture</p> <p>One of the biggest advantages of monolithic architecture is its simplicity. Since everything is contained in a single unit, there are fewer moving parts to worry about. This makes it easier to develop, test, and deploy the application.</p> <p>Another advantage is that it\u2019s easier to maintain and debug a monolithic application. Since everything is in one place, it\u2019s easier to track down issues and fix them.</p> <p>Disadvantages of Monolithic Architecture</p> <p>One of the biggest disadvantages of monolithic architecture is that it can be difficult to scale the application vertically. Since everything is running on a single server, there\u2019s a limit to how much traffic the application can handle.</p> <p>Another disadvantage is that it can be difficult to adopt new technologies and languages in a monolithic application. Since everything is packaged together, it can be hard to update individual components without breaking the entire application.</p>"},{"location":"Architecture/Reference/12_software_architecture_styles-software_engineers_should_know/#10-microservice","title":"10. Microservice","text":"<p>Microservice architecture is a style of software architecture that structures an application as a collection of small, independent services that communicate with each other over a network. Each service is focused on a specific business capability and can be developed, deployed, and scaled independently of other services in the system.</p> <p>The main idea behind microservice architecture is to break down a large, monolithic application into smaller, more manageable services. This approach brings several benefits, such as improved scalability, increased flexibility, and quicker time-to-market for new features. With a microservice architecture, each service can be scaled independently, making it easier to handle traffic spikes or changes in demand. Developers can also modify or add new services without affecting other parts of the system, which speeds up the development process.</p> <p>Challenges of Microservice Architecture</p> <p>Despite the benefits of microservice architecture, it also introduces additional complexity. One of the biggest challenges is managing inter-service communication. Services need to be able to discover each other and communicate effectively, which can be difficult to do at scale. Load balancing and fault tolerance are also more complex in a microservice architecture.</p> <p>Another challenge is ensuring that each service has its own data store. In a monolithic application, all data is typically stored in a single database. With microservices, each service should have its own data store to ensure that changes to one service do not affect other services in the system. This can lead to increased complexity in data management and synchronization.</p> <p>Best Practices for Microservice Architecture</p> <p>To ensure the success of a microservice-based system, developers should follow best practices for designing and implementing microservices. Some of these best practices include:</p> <p>1. Design services that are loosely coupled and highly cohesive, with clear boundaries and well-defined interfaces.</p> <p>2. Use containerization technology, such as Docker, to package and deploy each service as a separate container. This allows for easy scaling and deployment of individual services as needed.</p> <p>3. Implement effective monitoring and management tools to ensure that the system is running smoothly and to detect and address issues quickly.</p> <p>4. Use a service mesh, such as Istio, to manage inter-service communication and load balancing.</p> <p>5. Implement a continuous integration and deployment (CI/CD) pipeline to automate the testing and deployment of microservices.</p>"},{"location":"Architecture/Reference/12_software_architecture_styles-software_engineers_should_know/#11-event-driven","title":"11. Event Driven","text":"<p>Event Driven Architecture (EDA) is an approach to designing software systems that enables rapid and efficient communication between different components or services. In this paradigm, different software components communicate with each other using events, rather than through direct requests or responses.</p> <p>In EDA, events are generated by different components of a software system, such as a user interface or a backend service. These events are then broadcast to other components of the system, which can subscribe to them and act on them as needed.</p> <p>For example, consider a simple e-commerce application. When a new order is placed, the order processing service can generate an \u201corder created\u201d event, which is then broadcast to other services such as inventory management, shipping, and billing. Each of these services can then process the event and make updates to their respective systems.</p> <p>Benefits of EDA</p> <p>One of the key benefits of EDA is its ability to decouple different components of a software system. When different components communicate through events rather than direct requests, they become less dependent on each other. This makes it easier to change or update individual components of the system without affecting the rest of the system.</p> <p>Another benefit of EDA is its scalability. Because events are broadcast to multiple components of the system, it is possible to process large volumes of data and transactions in parallel. This makes it easier to handle high traffic and spikes in demand.</p> <p>Challenges of EDA</p> <p>While EDA has many benefits, it also has some challenges. One of the main challenges is managing the complexity of event-driven systems. Because events can be generated and consumed by many different components, it can be difficult to track and debug issues that arise.</p> <p>Another challenge is ensuring that events are processed in the correct order. Because events can be generated and processed asynchronously, it is possible for events to be processed out of order. This can cause issues such as data inconsistencies or incorrect calculations.</p>"},{"location":"Architecture/Reference/12_software_architecture_styles-software_engineers_should_know/#12-stream-based","title":"12. Stream Based","text":"<p>As software development becomes more complex and demands greater scalability, traditional architectures are becoming less and less effective. Stream-based architecture is emerging as a promising alternative that enables developers to build systems that can handle massive amounts of data in real-time.</p> <p>At its core, stream-based architecture is based on the principles of event-driven programming. Instead of processing data in batches, stream-based systems process data as it is generated in real-time. This allows developers to build systems that can respond to changes in data with minimal latency.</p> <p>Benefit of Stream-Based Architecture</p> <p>One of the key benefits of stream-based architecture is its scalability. Because data is processed in real-time, stream-based systems can handle massive amounts of data without the need for complex batch processing pipelines. This makes it possible to build systems that can process millions of events per second, making it ideal for use cases like sensor data processing, financial trading, and online advertising.</p> <p>Another benefit of stream-based architecture is its flexibility. Because data is processed in real-time, it is possible to build systems that can respond to changes in data with minimal latency. This makes it possible to build complex, event-driven systems that can adapt to changing business requirements. For example, in an e-commerce platform, stream-based architecture can be used to track user activity in real-time and respond with personalized recommendations and promotions based on the user\u2019s browsing and purchasing history.</p> <p>Furthermore, stream-based architecture can provide significant cost savings. Traditional batch processing pipelines require expensive hardware and complex software infrastructure to manage the data processing. On the other hand, stream-based systems can be built on inexpensive commodity hardware, making it much easier to scale and maintain.</p> <p>Finally, stream-based architecture is highly fault-tolerant. Because data is processed in real-time, it is possible to build systems that can automatically recover from failures without the need for manual intervention. This makes it possible to build systems that can operate at scale with high levels of reliability, reducing the risk of data loss or system downtime.</p>"},{"location":"Architecture/Reference/23-fundamental-principles-in-sw-arch/","title":"23 Fundamental Principles in Software Architecture","text":"<p>Software Architecture bases on set of basic principles that is actual for every kind of software system. Experienced Software Architects are aware of them and able to spot the right places in their software products to implement specific principle. Let us have a quick overview over some basic principles that Software Architects deals with on daily basis:</p> <p>1.Dependency Inversion\u2026 This principle states that direction of dependency should be towards abstraction not implementation. If compile-time dependency flows in direction of run-time execution this makes directed dependency. With Dependency Inversion we invert the direction of dependency control.</p> <p>2.Separation of Concerns\u2026 This principle states that a software system should be separated by the kind of work it does. For Example: It is noteworthy to separate the software system into different pieces by business logic, infrastructure or user interface. By splitting the system into different parts based on different activity areas makes it easier to develop/test/deploy. SoC is a driving force behind Software Architecture Patterns like Domain Driven Design, Hexagonal Architecture, Clean Architecture.</p> <p>3.Inversion of Control\u2026</p> <p>This principle is similar to Dependency Inversion Principle but in broader context. IoC inverts the flow of control which is managed by different third party frameworks such as Spring Framework. Unlike traditional Java EE programs where Beans are initialized procedurally by the engineer that developed it, Spring takes control of Configuration Beans, which means inverting the control.</p> <p>4.Dependency Injection\u2026</p> <p>This Principle states that for example in java terms: dependency should be injected through constructor in run-time. Action Interface is injected in Human class through its HumanAction Implementation, that decides in run-time which specific action to implement. This technique gives some flexibility of dependencies:</p> <pre><code>package az.alizeynalli.di;\n\npublic interface Action {\n    void do();\n}\n\npublic class HumanAction implements Action {\n\n    @Override\n    public void do() {\n        System.out.print(\"run\");\n    }\n}\n\npublic class Human  {\n\n    Action action;\n\n    public Human(Action action) {\n        this.action = action;\n    }\n\n    @Override\n    public void do() {        \n        actoin.do();        \n    }\n}\n\n    public static void main(String[] args) {\n        Human human = new Human(new HumanAction);\n        human.do();\n    }\n</code></pre> <p>5.Single Responsibility\u2026</p> <p>This principle\u2019s main idea is to limit each building block of a software system by one and only responsibility. No matter what is the scope of a building block, be it plugin, package, class, function even a variable. Each of these building blocks should have only one responsibility. </p> <p>6.Don\u2019t Repeat Yourself (DRY)\u2026</p> <p>This principle aims to eliminate redundancy in code by avoiding duplicate code. If there is existing functionality for some behaviour this should be repeatedly used, instead of having same code snippet in multiple instances.</p> <p>Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.</p> <p>7.Open-Closed\u2026</p> <p>A Software artifact should be open for extension but closed for modification.</p> <p>This simple description of the principle was firstly introduced by Bertrand Meyer. Software system that needs modification each time for any additional functionality is just a big mess. On the other hand, this kind of chaotic program is welcoming occasional bugs every time modification is made. Preferably, every new functionality should be maximum of new code and minimum of change in old code, in ideal world: zero changes in old code.</p> <p>8.Persistence Ignorance\u2026</p> <p>PI bases on the idea that code should be unaffected by whichever database or persistence technology is chosen. Business Logic should be free of any technology chosen to be applied. If tomorrow, there is better alternative persistence technology which is more effective and for better price, changing this part of software system should not affect upper abstraction layers.</p> <p>9.YAGNI\u2026</p> <p>You ain\u2019t gonna need it. This principle tries to avoid premature optimization of a software system. Often developers overengineer some things in a software system with the vision that some time in future it will be helpful. But this time often never comes.</p> <p>10.Boy Scout Rule\u2026</p> <p>Always leave the campground cleaner than you found it.</p> <p>The main idea here is to always keep refactoring code as you encounter anti-patterns while developing further. This leads to better code quality over time.</p> <p>11.Liskov-Subsititution\u2026</p> <p>If for each object o1 of type S there is an object o2 of type T such that for all programs P defined in terms of T, the behaviour of P is unchanged when o1 is substituted for o2 then S is a subtype of T.</p> <p>This definition from Barbara Liskov might sound pretty confusing but in essence, it is a simple and easy to understand principle. If we restate the above given definition, the principle\u2019s motto is: when using inheritance, hierarchy of inheritance should be from functional and business logic aspect consistent. The subtypes should be mutually substitutable and not alter behavior of parent class. As a simple example we can take \u201cinfamous square/rectangle\u201d problem. Where square should not be subtype of rectangle, because definition of height and length of these two geometric forms are different (square\u2019s height and weight are equal whereas for rectangle they will vary).</p> <p>12.Encapsulation\u2026</p> <p>Different building blocks of a Software System should make use of Encapsulation by restricting access to its components from outside world. This achieved by setting components private in a class scope or setting access restrictions in plugin scope (in terms of java) so hiding information.</p> <p>13.Loose Coupling\u2026</p> <p>One of the most important principles in Software Architecture is Loose Coupling which means simply put loose dependencies. This principle states that software systems should be loosely dependent on each other. If one part of software systems changes, this should influence other parts minimally. Loose Coupling is possible through Dependency Inversion, Asynchronous Messaging Middleware, Event Sourcing etc. </p> <p>14. Cohesion\u2026</p> <p>Cohesion refers to the degree to which the elements inside a module belong together. In one sense, it is a measure of the strength of relationship between the methods and data of a class and some unifying purpose or concept served by that class.</p> <p>It is a best practice to have highly cohesive classes, which motivates single responsibility principle, loose coupling etc.</p> <p>15. Interface Segregation\u2026</p> <p>Interface-Segregation Principle states that no client should be forced to depend on methods it does not use.</p> <p>We should make it clear that, this principle is applicable mostly to statically-typed programming languages like Java, C etc. In dynamically typed languages like Python or Ruby this principle does not make a big sense.</p> <p>We can imagine a situation that our Income and Expense Use Cases are dependent on a functionality that holds business logic for both cases. So Income Use Case has an abundant dependency on a functionality that is used for Expense Use Case and Expense Use Case has the same issue in respect to Income Use Case. Following is the Violation of ISP based on above discussion:</p> <pre><code>package az.alizeynalli.cashflow.core.service;\n\npublic interface ConverterService {\n    Income convertIncome(Income income);\n    Expense convertExpense(Expense expense);\n}\n\n@Component\npublic class ExpenseConverterServiceImpl implements ConverterService {\n\n    @Override\n    public Income convertIncome(Income income) {\n        throw new UnsupportedOperationException();\n    }\n\n    @Override\n    public Expense convertExpense(Expense expense) {\n        // convert expense here\n        return expense;\n    }\n}\n\n@Component\npublic class IncomeConverterServiceImpl implements ConverterService {\n\n    @Override\n    public Income convertIncome(Income income) {\n        // convert income here\n        return income;\n    }\n\n    @Override\n    public Expense convertExpense(Expense expense) {\n\n        throw new UnsupportedOperationException();\n    }\n}\n</code></pre> <p>16. Bounded Context\u2026</p> <p>Bounded contexts are a central pattern in Domain-Driven Design. They provide a way of tackling complexity in large applications or organizations by breaking it up into separate conceptual modules. Each conceptual module then represents a context that is separated from other contexts (hence, bounded), and can evolve independently. Each bounded context should ideally be free to choose its own names for concepts within it, and should have exclusive access to its own persistence store. </p> <p>17.Stable Dependencies\u2026</p> <p>This principle states that different building blocks of a software system should only depend on artifacts that reliable, stable. This principle makes more sense in docker image terms, where you import different dependencies from docker hub without even knowing how reliable/stable are they.</p> <p>18. Polymorphism\u2026</p> <p>This actually belongs to 4 Pillars of Object Oriented Programming and motivates usage of interfaces (in java terms!) which can be provisioned in multiple forms. Polymorphism means: entity with multiple forms.</p> <p>19. Modularization\u2026</p> <p>Modularization is the process of dividing a software system into multiple independent modules where each module works independently. This principle is another form of single responsibility separation of concerns principles applied to the static structure of a software system.</p> <p>20. Abstraction\u2026</p> <p>This also belongs to 4 Pillars of Object Oriented Programming and states:</p> <p>The process of removing physical, spatial, or temporal details or attributes in the study of objects or systems to focus attention on details of greater importance; it is similar in nature to the process of generalization;</p> <p>21. Keep It Simple, Stupid (KISS)\u2026</p> <p>As it is understandable from the above statement this principle motivates software engineers to keep the code simple and stupid(understandable) to avoid potential future misunderstandings from other peer engineers.</p> <p>22. Incremental/Iterative Approach\u2026</p> <p>This principle is basics of Agile Software Development Manifesto, that bases on the idea that software system should be developed on incremental and iterative manner. That means with every iteration software system is incremented and gone live.</p> <p>23. Least Knowledge\u2026</p> <p>Or information envying is another term to encapsulation or information hiding principles which states that different parts of software system should only have knowledge that they need.</p>"},{"location":"Architecture/Reference/7-architecture-design-patterns/","title":"7 Architecture Design Patterns \u2014 You wish you knew before interview","text":"<p>If you landed on this blog, I believe you know what modern architecture design patterns are. But for some of our less experienced friends here, think of architecture design patterns as the way you design your application(s) such that they scale and don\u2019t need your resignation for that.</p> <p>Architecture Design Patterns, in a nutshell, are design patterns for High Level Design.</p> <p>Modern problems demand modern solutions. For applications to cater to enterprises or even an internet-level audience, they need to be scalable, available, secure, and resilient. Without a doubt, all major league companies are looking for developers who can grasp and solve these difficulties.</p> <p>The question now is: how do developers solve these problems? One way is to follow good architectural design patterns. Here I present you 7 deadly Sins:-</p>"},{"location":"Architecture/Reference/7-architecture-design-patterns/#circuit-breaker-pattern","title":"Circuit Breaker Pattern","text":"<p>Michael Nygard\u2019s book, Release It!, popularized the Circuit Breaker pattern, which can prevent an application from continually attempting to execute an action that is likely to fail, allowing it to proceed without waiting for the problem to be corrected or spending CPU cycles while determining the fault\u2019s duration.</p> <p>The Circuit Breaker pattern also allows an application to determine whether or not the issue has been remedied. If the problem appears to be resolved, the program can attempt to perform the operation.</p> <p>The Circuit Breaker pattern serves a distinct purpose than the Retry pattern. The Retry pattern allows an application to retry an operation in the hope that it will succeed the next time.</p> <p>The Circuit Breaker design prohibits an application from doing a risky activity. An application can use the Retry pattern to trigger an action through a circuit breaker to combine these two patterns. The retry logic, on the other hand, should be alert to any exceptions supplied by the circuit breaker and should cease repeat attempts if the circuit breaker indicates that a fault is not temporary.</p> <p></p>"},{"location":"Architecture/Reference/7-architecture-design-patterns/#event-sourcing-pattern","title":"Event Sourcing Pattern","text":"<p>Most apps operate with data, and the common method is for the program to keep the data in its present state by updating it when users interact with it. In the classic create, read, update, and delete (CRUD) architecture, for example, a typical data operation is to receive data from the store, make some changes to it, and then update the current state of the data with the new values\u2014 often by utilizing transactions that lock the data.</p> <p>The Event Sourcing design defines a method for handling data activities that are triggered by a series of events, each of which is recorded in an append-only store. Application code delivers a series of events to the event store, where they are persisted, that must describe each action that has occurred on the data. Each event describes a collection of data changes (for example, \"AddedItemToOrder\").</p> <p></p> <p>The events are saved in an event store, which serves as the system of record (the official data source) for the data\u2019s present state. These events are often published by the event retailer so that consumers are aware and can handle them if necessary. Consumers may, for example, start tasks that apply the operations in the events to other systems, or they could execute any other associated action required to finish the process. It\u2019s worth noting that the application code that generates the events is separate from the systems that subscribe to them.</p>"},{"location":"Architecture/Reference/7-architecture-design-patterns/#sidecar-pattern","title":"SideCar Pattern","text":"<p>Monitoring, logging, configuration, and networking services are frequently required by applications and services. These extraneous chores might be carried out as distinct components or services.</p> <p>A sidecar service is not always part of the application, but it is linked to it. It follows the parent application everywhere it goes. Sidecars are procedures or services that are delivered alongside the principal application. The sidecar on a motorbike is coupled to one motorcycle, and each motorcycle can have its own sidecar. A sidecar service, similarly, mirrors the fate of its parent application. A sidecar instance is deployed and hosted alongside each instance of the application.</p> <p></p> <p>They can execute in the same process as the application if they are tightly integrated, making optimal use of shared resources. This, however, implies that they are not properly separated, and a failure in one of these components can affect other components or the entire application. Furthermore, they must normally be written in the same language as the parent program. As a result, the component and the application are highly dependent on one another.</p>"},{"location":"Architecture/Reference/7-architecture-design-patterns/#cqrs","title":"CQRS","text":"<p>CQRS stands for Command and Query Responsibility Segregation, a pattern that isolates data store read and update processes. CQRS implementation in your application can improve its performance, scalability, and security. The flexibility gained by moving to CQRS enables a system to evolve more effectively over time and prevents update instructions from triggering merge conflicts at the domain level.</p> <p></p> <p>Separate query and update models make design and implementation easier. although, CQRS code cannot be automatically generated from a database schema using scaffolding techniques such as O/RM tools (although, you can add your customised on top of the generated code).</p> <p>You can physically split the read and write data for more isolation. In that instance, the read database can utilise its own query-optimized data schema. It can, for example, store a materialised view of the data to avoid complex joins or O/RM mappings. It may even employ a different sort of data storage. For example, the write database could be relational, and the read database could be a document database.</p>"},{"location":"Architecture/Reference/7-architecture-design-patterns/#rate-limiting-pattern","title":"Rate Limiting Pattern","text":"<p>To prevent excessive resource consumption, some services impose limits on how fast other applications or services can access them. This is called throttling. You can use a rate limiting pattern to reduce or avoid throttling errors caused by these limits and to estimate throughput more accurately.</p> <p>A rate-limiting pattern can be useful in many situations, but it is especially helpful for large-scale repetitive automated tasks such as batch processing.</p> <p>By limiting the amount of records supplied to a service during a specific time, rate limiting can lower your traffic and possibly increase throughput.</p> <p>Various measures may be used to throttle a service over time, including:</p> <p>\u2014 the quantity of actions (60 requests, for instance). \u2014 the volume of data (50 GB per minute, for instance). \u2014 the relative expense of operations (42,000 RUs per second, for instance).</p> <p>Regardless of the metric employed for throttling, the rate limiting approach you choose will include regulating the volume and/or size of operations delivered to the service over a predetermined time frame in order to maximize your use of the service without going over the throttling limit.</p>"},{"location":"Architecture/Reference/7-architecture-design-patterns/#strangler-fig","title":"Strangler Fig","text":"<p>Migrate a legacy system incrementally by gradually replacing certain functionalities with new apps and services. The old system is eventually choked by the new system, which eventually replaces all of the features of the legacy system, enabling you to decommission it.</p> <p>Replace specific functionalities in stages with fresh software and services. Make a fa\u00e7ade that catches requests headed for the legacy backend system. These requests are forwarded by the fa\u00e7ade to either the new services or the legacy application. Customers can use the same interface while existing functionality are progressively moved to the new system, completely ignorant of the transition.</p> <p></p> <p>This method helps spread out the development work across time and reduce migration risk. You may add functionality to the new system at any rate you like while ensuring the legacy application continues to work because the fa\u00e7ade safely directs users to the appropriate application. The legacy system gradually becomes \u201cstrangled\u201d and is no longer required over time as features are transferred to the new system. After finishing this procedure, the legacy system can be safely retired.</p> <p>Health Endpoint Monitoring Pattern</p> <p>The Health Endpoint Monitoring pattern can be used to ensure that programmes and services are operating properly. This pattern outlines how functional checks should be used in an application. Through open endpoints, external tools have regular access to these checks.</p> <p>Sending requests to an endpoint on your application will enable health monitoring. After running all essential tests, the programme should indicate its state.</p> <p>Usually, a health monitoring check combines two elements:</p> <p>When a request is made to a health verification endpoint, the application or service executes checks, if any. The evaluation of the outcomes by the system or tool that conducts the health verification check The response code indicates the application\u2019s status. The status of the app\u2019s components and services may optionally be provided in the response code. The latency or reaction time check is carried out by the monitoring tool or framework.</p> <p>The pattern is seen in the following figure.</p> <p></p>"},{"location":"Architecture/Reference/Git-branching/","title":"Git Branching Methodologies","text":""},{"location":"Architecture/Reference/Git-branching/#trunk-based-development-flow","title":"Trunk Based Development Flow","text":"<pre><code>gitGraph TB:\n  commit id: \"1\"\n  commit id: \"2\"\n  branch \"Feature 1\"\n  checkout \"Feature 1\"\n  commit id: \"3\"\n  checkout main\n  branch \"Feature 2\"\n  commit id: \"4\"\n  checkout \"Feature 2\"\n  commit id: \"5\"\n  checkout main\n  branch \"Feature 3\"\n  checkout \"Feature 3\"\n  commit id: \"5\"\n  checkout main\n  merge \"Feature 3\"\n  checkout \"Feature 2\"\n  merge main\n  checkout \"Feature 1\"\n  merge main\n  commit id: \"6\"\n  checkout \"Feature 2\"\n  commit id: \"7\"\n  commit id: \"8\"\n  checkout \"Feature 1\"\n  commit id: \"9\"\n  checkout main\n  merge \"Feature 1\"\n  checkout \"Feature 2\"\n  merge main\n  commit id: \"10\"\n</code></pre>"},{"location":"Architecture/Reference/Git-branching/#gitflow","title":"GitFlow","text":"<pre><code>gitGraph TB:\n  commit id: \"1\"\n  commit id: \"2\"\n  branch develop\n  checkout develop\n  commit id: \"3\"\n  commit id: \"4\"\n  checkout main\n  merge develop id: \"5\" tag: \"v1.0\"\n  checkout develop\n  commit id: \"6\"\n  branch feature-A\n  checkout feature-A\n  commit id: \"7\"\n  checkout develop\n  commit id: \"8\"\n  checkout main\n  merge feature-A id: \"9\" tag: \"v1.1\"\n  checkout develop\n  commit id: \"10\"\n  branch release-1.0\n  checkout release-1.0\n  commit id: \"11\"\n  checkout main\n  merge release-1.0 id: \"12\" tag: \"v1.0.1\"\n  checkout develop\n  merge release-1.0 id: \"13\"\n  commit id: \"14\"\n  branch hotfix-1.0.2\n  checkout hotfix-1.0.2\n  commit id: \"15\"\n  checkout main\n  merge hotfix-1.0.2 id: \"16\" tag: \"v1.0.2\"\n  checkout develop\n  merge hotfix-1.0.2 id: \"17\"\n  commit id: \"18\"\n</code></pre>"},{"location":"Architecture/Reference/Git-branching/#github-flow","title":"GitHub Flow","text":"<pre><code>gitGraph\n  commit id: \"1\"\n  commit id: \"2\"\n  commit id: \"3\"\n  commit id: \"4\"\n  commit id: \"5\"\n  commit id: \"6\"\n  commit id: \"8\"\n  commit id: \"9\"\n  commit id: \"10\"\n  commit id: \"12\"\n  commit id: \"13\"\n  commit id: \"14\"\n  commit id: \"15\"\n  main --&gt; main: Merge feature-A\n  main --&gt; main: Merge feature-B\n  main --&gt; main: Merge hotfix-1.0.1\n</code></pre>"},{"location":"Architecture/Reference/Git-branching/#gitlab-flow","title":"GitLab Flow","text":""},{"location":"Architecture/Reference/The-important-architecturla-patterns-you-need-to-know/","title":"Software Architecture: The Most Important Architectural Patterns You Need to Know","text":""},{"location":"Architecture/Reference/The-important-architecturla-patterns-you-need-to-know/#explaining-common-different-architecture-patterns","title":"Explaining common different architecture patterns","text":"<p>[</p> <p>An architectural pattern is a general, reusable solution to a commonly occurring problem in software architecture within a given context.</p> <p>A pattern is a solution to a problem in a context.</p> <p>Many programmers are nowadays still confused about the difference between architecture patterns or don\u2019t even know much about it.</p> <p>Let me explain to you\u2026!</p> <ul> <li>Layered Architecture</li> <li>Pipe and Filter</li> <li>Client Server</li> <li>Model View Controller</li> <li>Event Driven Architecture</li> <li>Microservices Architecture</li> </ul>"},{"location":"Architecture/Reference/The-important-architecturla-patterns-you-need-to-know/#layered-architecture","title":"Layered Architecture","text":"<p>The most common architecture pattern is the layered architecture or known as the n-tier architecture. It is widely known by most software architects, designers, developers. Although, there are no specific restrictions in terms of the number and type of layers that must exist, most layered architecture consists of four tiers: presentation, business, persistence and database as follows.</p> <p></p> <p>an popular example of n-tier architecture</p>"},{"location":"Architecture/Reference/The-important-architecturla-patterns-you-need-to-know/#context","title":"Context","text":"<p>All complex systems experience the need to develop and evolve portions of the system independently. For this reason, the developers of the system need clear and well-documented separation of concerns, so that modules of the system may be independently developed and maintained.</p>"},{"location":"Architecture/Reference/The-important-architecturla-patterns-you-need-to-know/#problem","title":"Problem","text":"<p>The software needs to be segmented in such a way that the modules can be developed and evolved separately with little interaction among the parts, supporting portability, modifiability, and reuse.</p>"},{"location":"Architecture/Reference/The-important-architecturla-patterns-you-need-to-know/#solution","title":"Solution","text":"<p>To achieve this separation of concerns, the layered pattern divides the software into units called layers. Each layer is a grouping of modules that offers a cohesive set of services. The usage must be unidirectional. Layers completely partition a set of software, and each partition is exposed through a public interface.</p> <ul> <li>The first concept is each of the layers has a specific role and responsibility. For example, the presentation layer would be responsible for handling all UI. Because this separation of concerns within the layered architecture makes it easy to build effective roles and responsibility.</li> <li>On the second concept, the layered architecture pattern is a technically partitioned architecture as opposed to a domain partitioned architecture. They are groups of components, rather being by domain.</li> <li>The last concept is that each of the layers in the layered architecture is marked as being either closed or open. A closed layer means that a request moves from layer to layer, it must go through the layer right below it to get to the next layer below that one. The request cannot skip any layers.</li> </ul> <p></p> <p>Closed layers and request access</p>"},{"location":"Architecture/Reference/The-important-architecturla-patterns-you-need-to-know/#weakness","title":"Weakness","text":"<p>Layers contribute to a performance penalty. The pattern does not lend itself to high-performance applications because it is not efficient to go through multiple layers of the architecture to fulfill a business request.</p> <p>The addition of layers also adds up-front cost and complexity to a system.</p>"},{"location":"Architecture/Reference/The-important-architecturla-patterns-you-need-to-know/#usages","title":"Usages","text":"<p>We should use this style for small, simple applications or websites. It is a good choice for situations with a very tight budget and time constraints.</p>"},{"location":"Architecture/Reference/The-important-architecturla-patterns-you-need-to-know/#multi-tier-pattern","title":"Multi-Tier Pattern","text":""},{"location":"Architecture/Reference/The-important-architecturla-patterns-you-need-to-know/#context_1","title":"Context","text":"<p>In a distributed deployment, there is often a need to distribute a system\u2019s infrastructure into distinct subsets.</p>"},{"location":"Architecture/Reference/The-important-architecturla-patterns-you-need-to-know/#problem_1","title":"Problem","text":"<p>How can we split the system into a number of computationally independent execution structures: groups of software and hardware connected by some communications media?</p>"},{"location":"Architecture/Reference/The-important-architecturla-patterns-you-need-to-know/#solution_1","title":"Solution","text":"<p>a multi-tier example \u2014 consumer website J2EE</p> <p>The execution structures of many systems are organized as a set of logical groupings of components. Each grouping is termed a tier.</p>"},{"location":"Architecture/Reference/The-important-architecturla-patterns-you-need-to-know/#weakness_1","title":"Weakness","text":"<p>Substantial up-front cost and complexity.</p>"},{"location":"Architecture/Reference/The-important-architecturla-patterns-you-need-to-know/#usages_1","title":"Usages","text":"<p>Used in distributed systems.</p>"},{"location":"Architecture/Reference/The-important-architecturla-patterns-you-need-to-know/#pipe-and-filter","title":"Pipe and Filter","text":"<p>One of the patterns in software architecture that appears, again and again, is the pipe-filter pattern.</p> <p></p> <p>the pipe filter style</p>"},{"location":"Architecture/Reference/The-important-architecturla-patterns-you-need-to-know/#context_2","title":"Context","text":"<p>Many systems are required to transform streams of discrete data items, from input to output. Many types of transformations occur repeatedly in practice, and so it is desirable to create these as independent, reusable parts.</p>"},{"location":"Architecture/Reference/The-important-architecturla-patterns-you-need-to-know/#problem_2","title":"Problem","text":"<p>Such systems need to be divided into reusable, loosely coupled components with simple, generic interactionmechanisms. In this way they can be flexibly combined with each other. The components, being generic and loosely coupled, are easily reused. The components, being independent, can execute in parallel.</p>"},{"location":"Architecture/Reference/The-important-architecturla-patterns-you-need-to-know/#solution_2","title":"Solution","text":"<p>Pipes in this architecture form the communication channel between filters. The first concept is each of the pipes is un-directional and point to point for performance reasons, accepting input from one source and always directing output to another.</p> <p>There are four types of filters exist within this style as follows.</p> <ul> <li>producer (<code>source</code>): the starting point of a process.</li> <li>transformer (<code>map</code>): performs a transformation on some or all of the data.</li> <li>tester (<code>reduce</code>): tests one or more criteria.</li> <li>consumer (<code>sink</code>): the terminating point.</li> </ul>"},{"location":"Architecture/Reference/The-important-architecturla-patterns-you-need-to-know/#weakness_2","title":"Weakness","text":"<p>Not good choice for interactive systems, because of their transformational character.</p> <p>Excessive parsing and unparsing leads toloss of performance and increased complexity in writing the filters themselves.</p>"},{"location":"Architecture/Reference/The-important-architecturla-patterns-you-need-to-know/#usages_2","title":"Usages","text":"<p>The pipe-filter architecture uses in a variety of applications, especially tasks that facilitate simple, one-way processing such as EDI, ETL tools.</p> <p>Compilers: the consecutive filters perform lexical analysis, parsing, semantic analysis, and code generation.</p>"},{"location":"Architecture/Reference/The-important-architecturla-patterns-you-need-to-know/#client-server","title":"Client Server","text":""},{"location":"Architecture/Reference/The-important-architecturla-patterns-you-need-to-know/#context_3","title":"Context","text":"<p>There are shared resources and services that large numbers of distributed clients wish to access, and for which we wish to control access or quality of service.</p>"},{"location":"Architecture/Reference/The-important-architecturla-patterns-you-need-to-know/#problem_3","title":"Problem","text":"<p>By managing a set of shared resources and services, we can promote modifiability and reuse, by factoring out common services and having to modify these in a single location, or a small number of locations. We want to improve scalability and availability by centralizing the control of these resources and services while distributing the resources themselves across multiple physical servers.</p>"},{"location":"Architecture/Reference/The-important-architecturla-patterns-you-need-to-know/#solution_3","title":"Solution","text":"<p>In a client-server style, components and connectors have a particular behavior.</p> <ul> <li>Components, called \u201cclients,\u201d send requests to a component, called \u201cserver,\u201d and wait for a reply.</li> <li>A server component receives a request from a client and sends it the reply.</li> </ul>"},{"location":"Architecture/Reference/The-important-architecturla-patterns-you-need-to-know/#weakness_3","title":"Weakness","text":"<p>The server can be a performance bottleneck and a single point of failure.</p> <p>Decisions about where to locate functionality (in the client or in the server) are often complex and costly to change after a system has been built.</p>"},{"location":"Architecture/Reference/The-important-architecturla-patterns-you-need-to-know/#usages_3","title":"Usages","text":"<p>We can use the client-server style to model a part of a system that has many components sending requests (clients) to another component (server) that offer services: online applications such as email, document sharing and banking.</p>"},{"location":"Architecture/Reference/The-important-architecturla-patterns-you-need-to-know/#model-view-controller","title":"Model View Controller","text":""},{"location":"Architecture/Reference/The-important-architecturla-patterns-you-need-to-know/#context_4","title":"Context","text":"<p>The user interface is typically the most frequently modified portion of an interactive application. Users often wish to look at data from different perspectives, such as a bar graph or a pie chart. These representations should both reflect the current state of the data.</p>"},{"location":"Architecture/Reference/The-important-architecturla-patterns-you-need-to-know/#problem_4","title":"Problem","text":"<p>How can user interface functionality be kept separate from application functionality and yet still be responsive to user input, or to changes in the underlying application\u2019s data?</p> <p>And how can multiple views of the user interface be created, maintained, and coordinated when the underlying application data changes?</p>"},{"location":"Architecture/Reference/The-important-architecturla-patterns-you-need-to-know/#solution_4","title":"Solution","text":"<p>The model-view-controller (MVC) pattern separates application functionality into three kinds of components as follows.</p> <ul> <li>A model, which contains the application\u2019s data.</li> <li>A view, which displays some portion of the underlying data and interacts with the user.</li> <li>A controller, which mediates between the model and the viewand manages the notifications of state changes.</li> </ul>"},{"location":"Architecture/Reference/The-important-architecturla-patterns-you-need-to-know/#weakness_4","title":"Weakness","text":"<p>The complexity may not be worth it for simple user interfaces.</p> <p>The model, view, and controller abstractions may not be good fits for some user interface toolkits.</p>"},{"location":"Architecture/Reference/The-important-architecturla-patterns-you-need-to-know/#usages_4","title":"Usages","text":"<p>MVC is an architectural pattern that is commonly used in web, mobile applications while developing user interfaces.</p>"},{"location":"Architecture/Reference/The-important-architecturla-patterns-you-need-to-know/#event-driven-architecture","title":"Event Driven Architecture","text":""},{"location":"Architecture/Reference/The-important-architecturla-patterns-you-need-to-know/#context_5","title":"Context","text":"<p>Computational and information resources need to be provided to handle incoming independent asynchronous application-generated events in a manner that can scale up as demand increases.</p>"},{"location":"Architecture/Reference/The-important-architecturla-patterns-you-need-to-know/#problem_5","title":"Problem","text":"<p>Construct distributed systems that can service asynchronous arriving messages associated with an event, and that can scale from small and simple to large and complex.</p>"},{"location":"Architecture/Reference/The-important-architecturla-patterns-you-need-to-know/#solution_5","title":"Solution","text":"<p>Deploy independent event processes/processors for event handling. Arriving events are queued. A scheduler pulls events from the queue and distributes them to the appropriate event handler based on a scheduling policy.</p>"},{"location":"Architecture/Reference/The-important-architecturla-patterns-you-need-to-know/#weakness_5","title":"Weakness","text":"<p>Performance and error recovery may be issues.</p>"},{"location":"Architecture/Reference/The-important-architecturla-patterns-you-need-to-know/#usages_5","title":"Usages","text":"<p>An e-commerce application that uses this approach would work as follows: The Order Service creates an Order in a pending state and publishes an <code>OrderCreated</code> event.</p> <ul> <li>The Customer Service receives the event and attempts to reserve credit for that Order. It then publishes either a Credit Reserved event or a <code>CreditLimitExceeded</code> event.</li> <li>The Order Service receives the event from the Customer Service and changes the state of the order to either approved or canceled</li> </ul>"},{"location":"Architecture/Reference/The-important-architecturla-patterns-you-need-to-know/#microservices-architecture","title":"Microservices Architecture","text":""},{"location":"Architecture/Reference/The-important-architecturla-patterns-you-need-to-know/#context_6","title":"Context","text":"<p>Deploy server-based enterprise applications that support a variety of browsers and native mobile clients. The application handles client requests by executing business logic, accessing a database, exchanging messages with other systems, and returning responses. The application might expose a 3rd party API.</p>"},{"location":"Architecture/Reference/The-important-architecturla-patterns-you-need-to-know/#problem_6","title":"Problem","text":"<p>Monolithic applications can become too large and complex for efficient support, and deployment for optimal distributed resource utilization such as in cloud environments.</p>"},{"location":"Architecture/Reference/The-important-architecturla-patterns-you-need-to-know/#solution_6","title":"Solution","text":"<p>Build applications as suites of services. Each service is independently deployable and scalable and has its own API boundary. Different services can be written in different programming languages, manage their own database, and developed by different teams.</p>"},{"location":"Architecture/Reference/The-important-architecturla-patterns-you-need-to-know/#weakness_6","title":"Weakness","text":"<p>Systems must be designed to tolerate service failures that require more system monitoring. Service choreography and event collaboration overhead.</p> <p>We also need more memory.</p>"},{"location":"Architecture/Reference/The-important-architecturla-patterns-you-need-to-know/#usages_6","title":"Usages","text":"<p>Many use cases are applicable for a microservices architecture, especially those that involve an extensive data pipeline. For example, a microservices-based system would be ideal for a reporting system on a company\u2019s retail store sales. Each step in the data preparation process would be handled by a microservice: data collection, cleansing, normalization, enrichment, aggregation, reporting, etc.</p> <p>Easy, right?</p>"},{"location":"Architecture/Reference/best-practices-when-documenting-your-code-for-software-engineers/","title":"Best Practices When Documenting Your Code for Software Engineers","text":"<p>It\u2019s all about clear, asynchronous communication</p> <p></p> <p>As a software engineer, it is very important to acquire the skill of writing high-quality documentation. Due to the recent increase in remote work, it has become even more important to be better at asynchronous communication. Remote company GitLab does an excellent job of defining asynchronous communication:</p> <p>\u201cAsynchronous communication is the art of communicating and moving projects forward without the need for additional stakeholders to be available at the same time your communique is sent.\u201d</p> <p>High-quality documentation is an easier way to achieve effective asynchronous communication. In this article, I am going to talk about some interesting tips that I have found very useful in my personal experience.</p>"},{"location":"Architecture/Reference/best-practices-when-documenting-your-code-for-software-engineers/#google-tech-writing-course","title":"Google Tech Writing Course","text":"<p>Google offers a free tech writing course for software engineers. It starts with the fundamentals of tech writing. There are two courses and the content is as shown below:</p> <p></p> <p>TOC \u2014 Google Tech Writing One</p> <p></p> <p>TOC \u2014 Google Tech Writing Two</p> <p>Being good at tech writing does not happen overnight. It takes practice. I personally prefer visiting this course each month to remind myself of the best practices.</p>"},{"location":"Architecture/Reference/best-practices-when-documenting-your-code-for-software-engineers/#using-the-divio-documentation-framework","title":"Using the Divio Documentation Framework","text":"<p>Amongst all other documentation frameworks, I personally like Divio the best. The documentation systems suggested there are easy and universally applicable.</p> <p>The framework suggests classifying documentation in the following types:</p> <ul> <li>Tutorials \u2014 Learning-oriented</li> <li>How-To Guides \u2014 Problem-solving-oriented</li> <li>Explanation \u2014 Understanding-oriented</li> <li>Reference \u2014 Information-oriented</li> </ul> <p>The scheme is widely adopted by a lot of famous open source projects and enterprises.</p> <p>Here is a great video explaining the details of the framework:</p>"},{"location":"Architecture/Reference/best-practices-when-documenting-your-code-for-software-engineers/#use-markdown-based-systems-for-documentation","title":"Use Markdown-Based Systems for Documentation","text":"<p>In a typical enterprise, there are various ways you can maintain your documentation. Some people prefer creating MS Word/Excel documents and uploading those in SharePoint or OneDrives. The biggest problem with such documents is that they are not searchable using your internal search engine. Hence I personally prefer using Markdown-based documentation systems. Creating and maintaining documentation is easy and the documentation is searchable.</p> <p>If you are not familiar with Markdown, you can easily master it. Check out this free recommended course from GitHub.</p>"},{"location":"Architecture/Reference/best-practices-when-documenting-your-code-for-software-engineers/#using-mermaid-js-for-diagrams","title":"Using Mermaid JS for Diagrams","text":"<p>According to Mermaid itself, it \u201cis a Javascript-based diagramming and charting tool that uses Markdown-inspired text definitions and a renderer to create and modify complex diagrams.\u201d If you are using GitLab or Azure DevOps, Mermaid is natively supported. If you are using GitHub or Atlassian products, then there are plug-ins available.</p> <p>With Mermaid, creating and updating diagrams is very easy and you don\u2019t need to have any UML tools like Visio/draw.io installed on every developer\u2019s workstation.</p> <p>Here are some sample diagrams created with Mermaid</p> <p></p> <p>Sample Sequence Diagram using Mermaid</p> <p></p> <p>Sample Class Diagram using Mermaid</p> <p>You can try out creating diagrams using the Mermaid Live Editor as well.</p>"},{"location":"Architecture/Reference/best-practices-when-documenting-your-code-for-software-engineers/#use-templates","title":"Use Templates","text":"<p>There are numerous templates available on various sites like Confluence that can be used for specific types of documents. For example:</p> <ul> <li>Software Architecture Review Template</li> <li>Architecture Decision Record Template</li> <li>Incident Postmortem Template</li> <li>DevOps Runbook</li> <li>Decision Template</li> <li>Writing Guidelines</li> <li>OKR Template</li> <li>Etc.</li> </ul>"},{"location":"Architecture/Reference/best-practices-when-documenting-your-code-for-software-engineers/#refer-to-style-guides","title":"Refer to Style Guides","text":"<p>If your team does not have a style guide already, refer to what the Googles and Microsofts of the world do:</p> <ul> <li>Microsoft Style Guide</li> <li>Google Developer Documentation Style Guide</li> </ul>"},{"location":"Architecture/Reference/best-practices-when-documenting-your-code-for-software-engineers/#references","title":"References","text":"<ul> <li>Google Tech Writing Course</li> <li>Divio Documentation Framework</li> <li>Mermaid</li> </ul>"},{"location":"Architecture/Reference/codeImplementation/","title":"Code - General Implementation","text":""},{"location":"Architecture/Reference/codeImplementation/#before-you-begin","title":"Before You Begin","text":"<ul> <li>CDG-1      Do you understand the design you are about to construct?</li> <li>CDG-2      Does the design provide an appropriate level of detail for coding to begin?</li> <li>CDG-3      Is the design to be implemented straightforward and feasible, or should it be revisited before attempting to construct it?</li> <li>CDG-4      Do you understand the language and technology well enough to implement the design?</li> </ul>"},{"location":"Architecture/Reference/codeImplementation/#general","title":"General","text":"<ul> <li>CDG-5      Is the code written in terms of the problem domain as much as possible rather than in terms of computer-science or programming language structures?</li> <li>CDG-6      Is the code traceable to upstream design and requirements artifacts?</li> <li>CDG-7      Does the code have documented test cases and/or unit tests as defined by the project?</li> <li>CDG-8      Does the code adhere to the designated coding standard?</li> <li>CDG-9      Does the code adhere to designated coding styles and / or templates?</li> <li>CDG-10   Does the code compile with no warnings from the compiler?</li> </ul>"},{"location":"Architecture/Reference/codeImplementation/#understandability","title":"Understandability","text":"<ul> <li>CDG-11   Does the code read from top to bottom?</li> <li>CDG-12   Are implementation details hidden as much as possible?</li> <li>CDG-13   Is the code straightforward and does it avoid \"cleverness\"?</li> <li>CDG-14   Has tricky code been rewritten rather than commented?</li> <li>CDG-15   Do you thoroughly understand your code?</li> <li>CDG-16   Is it easy to understand?</li> </ul>"},{"location":"Architecture/Reference/codeImplementation/#performance","title":"Performance","text":"<ul> <li>CDG-17   Are the affects of resource constraints on the technology and operational environment understood and within the bounds of the performance requirements?</li> <li>CDG-18   Are the affects of system load on the technology and operational environment understood and within the bounds of the performance requirements?</li> <li>CDG-19   Is the expected priority of efficient or highly optimized code clear for various areas of the system?</li> <li>CDG-20   Has profiling support been planned for areas of the code at risk for performance issues?</li> </ul>"},{"location":"Architecture/Reference/codeImplementation/#assertions-and-tracing","title":"Assertions and Tracing","text":"<ul> <li>CDG-21   Are assertions used to document assumptions?</li> <li>CDG-22   Are assertions used to aid debugging?</li> <li>CDG-23   Are tracing statements used to document events and aid debugging?</li> <li>CDG-24   Assertions are not being used to handle errors that should be handled in the code?</li> </ul>"},{"location":"Architecture/Reference/codeImplementation/#error-handling","title":"Error Handling","text":"<ul> <li>CDG-25   Is it easy to differentiate between nominal path processing and error processing?</li> <li>CDG-26   Are error conditions handled appropriately as per the requirements and design? (i.e., the level of robustness in detecting and responding to errors matches the needs of the system: not too little and not too much).</li> <li>CDG-27   When attempting recovery from error conditions, are assumptions reasonable?</li> </ul>"},{"location":"Architecture/Reference/codeImplementation/#code-changes","title":"Code Changes","text":"<ul> <li>CDG-28   Is the change part of a systematic change strategy?</li> <li>CDG-29   Has the change been reviewed as thoroughly as initial development would be?</li> <li>CDG-30   Does the change enhance the program's internal quality rather than degrading it?</li> <li>CDG-31   Have you improved the system's modularity by breaking routines into smaller routines, when possible?</li> <li>CDG-32   Have you improved the programming style--variable names, routine names, formatting, comments, and so on?</li> <li>CDG-33   If changes cause you to look for ways to share code, have you considered putting the shared code at a higher level as well as considered putting it at a lower level?</li> <li>CDG-34   Does this change make the next change easier?</li> </ul>"},{"location":"Architecture/Reference/codeImplementation/#layout","title":"Layout","text":"<ul> <li>CDG-35   Does the program's layout show its logical structure?</li> <li>CDG-36   Is formatting done primarily to illuminate the logical structure of the code?</li> <li>CDG-37   Is the formatting scheme used consistently?</li> <li>CDG-38   Are related statements grouped together?</li> <li>CDG-39   Are blank lines used to separate code elements including functions, control sequences, related blocks of code, etc?</li> <li>CDG-40   Does the formatting scheme result in code that's easy to maintain?</li> <li>CDG-41   Does the formatting scheme improve code readability?</li> <li>CDG-42   Have relatively independent groups of statements been moved into their own routines?</li> <li>CDG-43   Are references to variables as close together as possible, both in total live time and from each reference to a variable to the next?</li> </ul>"},{"location":"Architecture/Reference/codeImplementation/#individual-statements","title":"Individual Statements","text":"<ul> <li>CDG-44   Are continuation lines indented sensibly?</li> <li>CDG-45   Are groups of related statements aligned?</li> <li>CDG-46   Are groups of unrelated statements unaligned?</li> <li>CDG-47   Does each line contain one statement?</li> <li>CDG-48   Is each statement written without side effects?</li> <li>CDG-49   Are data declarations aligned?</li> <li>CDG-50   Is there one data declaration per line?</li> </ul>"},{"location":"Architecture/Reference/git_branching_strategy/","title":"Choosing the Right Git Branching Strategy: A Comparative Analysis","text":"<p>Effective branch management is crucial for successful collaboration and efficient development with Git. In this article, we will explore four popular branching strategies \u2014 Git-Flow, GitHub-Flow, GitLab-Flow, and Trunk Based Development. By understanding their pros, cons, and ideal use cases, you can determine the most suitable approach for your project.</p>"},{"location":"Architecture/Reference/git_branching_strategy/#git-flow","title":"Git-Flow","text":"<p>Git-Flow is a comprehensive branching strategy that aims to cover various scenarios. It defines specific branch responsibilities, such as main/master for production, develop for active development, feature for new features, release as a gatekeeper to production, and hotfix for addressing urgent issues. The life-cycle involves branching off from develop, integrating features, creating release branches for testing, merging into main/master, and tagging versions.</p>"},{"location":"Architecture/Reference/git_branching_strategy/#pros","title":"Pros","text":"<p>- Well-suited for large teams and aligning work across multiple teams. - Effective handling of multiple product versions. - Clear responsibilities for each branch. - Allows for easy navigation of production versions through tags.</p>"},{"location":"Architecture/Reference/git_branching_strategy/#cons","title":"Cons","text":"<p>- Complexity due to numerous branches, potentially leading to merge conflicts. - Development and release frequency may be slower due to multi-step process. - Requires team consensus and commitment to adhere to the strategy.</p> <p></p> <p>Git-Flow</p>"},{"location":"Architecture/Reference/git_branching_strategy/#github-flow","title":"GitHub-Flow","text":"<p>GitHub-Flow simplifies Git-Flow by eliminating release branches. It revolves around one active development branch (often main or master) that is directly deployed to production. Features and bug fixes are implemented using long-living feature branches. Feedback loops and asynchronous collaboration, common in open-source projects, are encouraged.</p>"},{"location":"Architecture/Reference/git_branching_strategy/#pros_1","title":"Pros","text":"<p>- Faster feedback cycles and shorter production cycles. - Ideal for asynchronous work in smaller teams. - Agile and easier to comprehend compared to Git-Flow.  </p>"},{"location":"Architecture/Reference/git_branching_strategy/#cons_1","title":"Cons","text":"<p>- Merging a feature branch implies it is production-ready, potentially introducing bugs without proper testing and a robust CI/CD process. - Long-living branches can complicate the process. - Challenging to scale for larger teams due to increased merge conflicts. - Supporting multiple release versions concurrently is difficult.</p> <p></p> <p>GitHub-flow</p>"},{"location":"Architecture/Reference/git_branching_strategy/#gitlab-flow","title":"GitLab-Flow","text":"<p>GitLab-Flow strikes a balance between Git-Flow and GitHub-Flow. It adopts GitHub-Flow\u2019s simplicity while introducing additional branches representing staging environments before production. The main branch still represents the production environment.</p>"},{"location":"Architecture/Reference/git_branching_strategy/#pros_2","title":"Pros","text":"<p>- Can handle multiple release versions or stages effectively. - Simpler than Git-Flow. - Focuses on quality with a lean approach.</p>"},{"location":"Architecture/Reference/git_branching_strategy/#cons_2","title":"Cons","text":"<p>- Complexity increases when maintaining multiple versions. - More intricate compared to GitHub-Flow.</p> <p></p> <p>GitLab-Flow</p>"},{"location":"Architecture/Reference/git_branching_strategy/#trunk-based-development","title":"Trunk Based Development","text":"<p>Trunk Based Development promotes a single shared branch called \u201ctrunk\u201d and eliminates long-living branches. There are two variations based on team size: smaller teams commit directly to the trunk, while larger teams create short-lived feature branches. Frequent integration of smaller feature slices is encouraged to ensure regular merging.</p>"},{"location":"Architecture/Reference/git_branching_strategy/#pros_3","title":"Pros","text":"<p>- Encourages DevOps and unit testing best practices. - Enhances collaboration and reduces merge conflicts. - Allows for quick releases.</p>"},{"location":"Architecture/Reference/git_branching_strategy/#cons_3","title":"Cons","text":"<p>- Requires an experienced team that can slice features appropriately for regular integration. - Relies on strong CI/CD practices to maintain stability.</p> <p></p> <p>Trunk Based Development \u2014 TBD</p>"},{"location":"Architecture/Reference/git_branching_strategy/#conclusion","title":"Conclusion","text":"<p>Each branching strategy \u2014 Git-Flow, GitHub-Flow, GitLab-Flow, and Trunk Based Development \u2014 offers its own advantages and considerations. Choosing the right strategy depends on your specific project requirements. Git-Flow suits large teams and complex projects, while GitHub-Flow excels in open-source and small team environments. GitLab-Flow provides a compromise between Git-Flow and GitHub-Flow, while Trunk Based Development is ideal for experienced teams focused on collaboration and quick releases. Select the strategy that aligns with your team\u2019s capabilities, project complexity, and desired workflow to maximize efficiency and success.</p>"},{"location":"Architecture/Reference/habits_of_great_software_engineers/","title":"Habits of great software engineers","text":"<p>The role of a software developer often gets distilled down to a singular activity: coding. While coding is undeniably the heartbeat of the profession, defining a developer by this act alone is akin to defining a painter by their ability to mix colors. It's a crucial part but just the tip of the iceberg. The true essence of a software developer's role combines many different skills, mindsets, and disciplines.</p> <p>Imagine a world where every software developer is just a coder. In such a world, code might get written, but would it solve any problems? Would the code be even useful or just an implementation of something fancy? The difference between a developer and a great developer is the breadth and depth of their approach in delivering value.</p> <p>I want to talk more about what makes a great software developer. What are the habits of highly effective developers? And I\u2019m not going to talk about coding (too much).</p> <p>TL;DR; for those who want to know if there's value before they scroll down. I talk about:</p> <ol> <li>Focusing beyond the code - as a developer you will code 20% of your time. You should excel at coding nonetheless, but it won't be enough to be great.</li> <li>Efficiency / Antifragility \u2014 Making sure everything around you runs smoothly and has forward momentum</li> <li>Joy of tinkering - build projects, try out frameworks, build stuff on the side. Keeps the spark alive.</li> <li>Knowing the why \u2014 It's important to know why your code does what it does, too many abstractions nowadays that rarely someone thinks below the level of their language e.g JS devs not thinking about the engine that runs their code.</li> <li>Thinking in systems \u2014 knowing how your code impacts not only your individual system but other parts of the business/application/life.</li> <li>Tech detox \u2014 Recharging away from your monitor makes you a better programmer.</li> <li>The art of approximation \u2014 Knowing important tech numbers to approximate calculations when making decisions when programming.</li> <li>If this sounds interesting there's a few more things like that at the bottom. But you'll have to read it.</li> </ol> <p>Disclaimer: Purely subjective thoughts, yours may vary.</p>"},{"location":"Architecture/Reference/habits_of_great_software_engineers/#focusing-beyond-the-code","title":"Focusing beyond the code","text":"<p>Coding is to a developer what a brush is to a painter or a chisel to a sculptor. It's the primary tool, the foundational skill upon which everything else is built. Every application, every website, and every digital solution starts with a line of code. Someone wrote it. You probably write it daily as well.</p> <p>However, while coding is fundamental, it's essential to recognize that it's not the actual purpose. It's about writing meaningful lines of code. It's about solving problems with the code. A line of code means nothing if there\u2019s no context to it.</p> <p>Being a great developer means being efficient in coding. It\u2019s not something you can skip. It's the entry ticket to the world of software development. But what separates the good from the great is the ability to see beyond the immediate lines of code. How will it interact with other components? How will it scale? How maintainable is it? These are the questions that a decent software developer constantly grapples with.</p> <p>We\u2019re not going too deep on the coding; there are better teachers than me out there who share practical wisdom on how to master the machine. Here are some books purely on coding/programming that will boost your skills immensely:</p> <ul> <li>Cracking the Coding Interview, McDowell [Link to Amazon]</li> <li>Introduction to Algorithms, Cormen [Link to Amazon]</li> <li>Clean Code, Martin [Link to Amazon]</li> <li>Coders at Work, Seibel [Link to Amazon]</li> </ul>"},{"location":"Architecture/Reference/habits_of_great_software_engineers/#the-pursuit-of-efficiency","title":"The Pursuit of Efficiency","text":"<p>All the best developers that I\u2019ve met have been highly efficient. I don\u2019t know how they manage to do it, but it seems they\u2019re always one step ahead of you. It\u2019s a feeling when you\u2019re near them; the progress is felt in the air. Everything moves smoothly \u2014 challenges get resolved in a timely matter, and things are under control and moving toward the purpose that the engineer has set.</p> <p>Great feeling.</p> <p>Some may argue that efficiency = the opposite of stability. But this is not the kind of efficiency I'm talking about. I'm talking more in terms of Antifragility. No running around and doing everything as fast as possible. You don't have to make tradeoffs by reducing the buffers that you have, and be wary of making changes that reduce your resiliency to unexpected things.</p> <p>So we\u2019re talking about staying efficient. At its core, efficiency is about progress \u2014 momentum, ensuring that the wheels of development are always turning. To make it clear what I\u2019m talking about, let\u2019s take a look at the opposite. Every developer knows the feeling of being \"stuck\" \u2013 whether it's a particularly challenging bug \u2014 where you start doubting your competence or a piece of code that just won't cooperate. The progress seems to have come to a halt. The pursuit of efficiency, in this case, means not letting these obstacles impede you. It's about thinking on your feet, finding resources to solve the issue, finding alternative solutions, and keeping the end goal in sight.</p> <pre><code>\ud83c\udfc4 Think of it as adopting a proactive mindset, where doing something \n\u2013 even if it doesn\u2019t solve your problem directly \u2013 is better than doing nothing.\n</code></pre> <p>This means breaking a complex problem into smaller, more manageable tasks. It means seeking input from a colleague when you're feeling stuck or temporarily setting aside a challenging task to focus on another aspect of the project. The key is to maintain forward momentum with small increments.</p> <p>You might say, \u201cSolving hard problems requires time. You shouldn\u2019t hurry\u201d. And you will be correct. Solving complex problems does require a lot of time. But even solving one big problem has forward momentum \u2014 For example getting a new exception after hours of debugging is cause for celebration as you move closer to figuring out the issue.</p>"},{"location":"Architecture/Reference/habits_of_great_software_engineers/#the-joy-of-tinkering","title":"The Joy of Tinkering","text":"<p>I will be honest: great developers aren't just skilled or knowledgeable; they're passionate. They're eyes light up at the mention of a new programming language. They spend hours diving deep into a challenging problem not just because they have to but because they want to. They're driven by an insatiable curiosity, a hunger to know more, do more, and be more.</p> <p>I have nothing against people who are not passionate about programming; it\u2019s okay, but these people will also not be pursuing greatness doing 9-5.</p> <p>This passion manifests itself in various ways, but one of the most evident is the joy of exploration. Great developers are explorers at heart. They're not content with just knowing the tools and technologies of today; they're always on the lookout for what's on the horizon. They tinker, they experiment, they play. Whether it's a new framework, a novel algorithm, or an emerging tech trend, they dive in headfirst, eager to learn, understand, and master.</p> <p>https://youtu.be/nctqc8FBJ2U</p> <p>So here's George Hotz having great time tinkering with LLaMa and building a chatbot, can you see the joy while he's coding? I find this so cool.</p> <p>This kind of tinkering keeps the spark alive. In a field as vast and ever-evolving as software development, it's easy to feel overwhelmed or stuck in a rut. However, by embracing curiosity and actively seeking new challenges and learning opportunities, developers can keep their skills sharp and enthusiasm high.</p> <p>Moreover, this exploration has a more profound, more intrinsic value: the sheer joy of the process. I think great developers also enjoy being passionate about programming. From my personal side, I can tell you I could not see my life without some kind of programming.</p>"},{"location":"Architecture/Reference/habits_of_great_software_engineers/#knowing-the-why","title":"Knowing the Why","text":"<p>Nowadays, developers often find themselves engrossed in specific layers or components, be it perfecting a REST API request or finetuning CSS for that impeccable web design. We\u2019ve gotten very high in abstractions in the last decade or so. Nobody writes assembly, and many developers have never even seen it. Developers usually just work with what they have and don\u2019t ask questions about why it works the way it does. There's an underlying layer of understanding that often goes overlooked: knowing why things are the way they are.</p> <p>Now, it's a valid argument that a developer doesn't need to be an expert in every layer of the stack. One doesn't need to trace the journey from circuit boards to bits and bytes for every line of code written. But having a foundational understanding and a sense of the bigger picture can be incredibly empowering.</p> <p>Frontend Developers \u2014 why and how the CSS is rendered? So many cool things in the Blink rendering engine will change how you think about the page. Backend Developers \u2014 why and how the Python interpreter works? There are so many fascinating things in the CPython interpreter/compiler that you\u2019ll be surprised how your code runs.</p> <p>Knowing the WHY/HOW behind the code offers several advantages:</p> <ol> <li>Problem Solving: When challenges arise, understanding the underlying logic can guide you towards an answer much faster. Even the errors will be clearer when you know how they are thrown.</li> <li>Informed Decisions: Your knowledge of the underlying systems will subconsciously influence every decision you make. Whether it's choosing a protocol, seeing a function and understanding immediately it can run in O(n), or ensuring security, a deeper understanding equips a developer to make highly effective decisions.</li> <li>Bridging Gaps: In multidisciplinary teams, grasping the broader landscape can foster better communication and collaboration, bridging the gap between specialists of different domains.</li> <li>Innovation: Often, groundbreaking solutions emerge at the intersection of disciplines. Knowing the 'why' of various layers can spark innovative ideas and approaches.</li> </ol> <p>I\u2019m not saying you should know everything. It\u2019s more about not just blindly accepting things at face value but delving deeper and expanding one's horizons. I guarantee you this knowledge will be useful to you.</p>"},{"location":"Architecture/Reference/habits_of_great_software_engineers/#thinking-in-systems","title":"Thinking in Systems","text":"<p>This is similar to the first part of not just focusing on the code but thinking about systems and their interactions. In my eyes, a great developer doesn\u2019t just see the individual pieces; they see the entire puzzle, understanding not only how each piece fits into the current puzzle but also what the puzzle is and if there are more puzzles that need to be interacted with.</p> <p>Systems thinking is about recognizing that software is made up of numerous components that interact with each other in complex ways. It's not enough to ensure that each component works well separately; it's crucial to understand how it works as part of the whole and what implications it has on the company. Simply \u2014 focus not only on unit tests but also E2E tests. It's about asking questions like: Why is this component necessary for the business? If this component fails, how will it impact other systems? How can we design our software to be resilient?</p> <p>Furthermore, systems thinking extends beyond the software itself. Great developers understand that software doesn't exist in a vacuum. It interacts with users, with other systems, with external databases, and even with other non-IT departments.</p> <p>It's about seeing the forest and the trees, understanding both the macro and the micro level of the things that you develop. Imagine you\u2019re a YouTube Engineer, given a task to improve the algorithm to increase the average time a user spends on YouTube. A straightforward task, you might think, but when you take a step back and look at the issue from a macro level, you\u2019ll see that there are many complex systems at play \u2014 from Scalability to UX to moral considerations to legal department.</p> <p>Or a better, recent example \u2014 imagine you\u2019re an FTX Engineer, and you\u2019re asked to allow accounts to go into the negative. Again, it is a straightforward feature from the perspective of your individual system \u2014 a single line of code. But again, let\u2019s step back and think of the risk management system, compliance system, and every other system affected by this change.</p>"},{"location":"Architecture/Reference/habits_of_great_software_engineers/#recharging-beyond-the-pixels","title":"Recharging Beyond the Pixels","text":"<p>In the digital age, screens have become ubiquitous. From the workstation where you transform code into applications to the smartphones that keep us connected 24/7, technology is an ever-present force in our lives. And for developers, this immersion is even more profound.</p> <p>Great developers aren't just masters of their craft but well-rounded individuals who understand the value of experiences beyond the digital realm. They recognize that while technology can expand horizons, it can also, paradoxically, become a limiting bubble.</p> <pre><code>\ud83c\udfc4Constant immersion in the digital world can lead to a narrowed perspective. \nThere\u2019s so much more outside of the tech bubble.\n</code></pre> <p>I won\u2019t talk too much about the dangers of constant screen time. Physically, it can lead to ailments like eye strain, disrupted sleep patterns, and sedentary lifestyle-related issues. Mentally, it can result in burnout, increased stress, and a feeling of being perpetually \"wired.\" Moreover, a predominantly online life can lead to a sense of isolation and a disconnection from the tangible, real world around us.</p> <p>But stepping away from the screens, even momentarily, can work wonders. A tech detox can be incredibly rejuvenating, be it a short walk in the park, a weekend getaway, or even a few hours spent on a non-digital hobby.</p> <p>Moreover, these breaks from technology serve as a reminder of the bigger picture. They ground us, reminding us of the real-world implications of their work, of the people and communities we serve, and of the myriad experiences and challenges that shape human lives.</p>"},{"location":"Architecture/Reference/habits_of_great_software_engineers/#the-art-of-approximation","title":"The Art of Approximation","text":"<p>How fast can you read 10GB from RAM? From SSD? There\u2019s a subtle yet crucial skill that many developers overlook: the art of approximation. It's not about knowing everything but about having a mental toolkit of numbers to guide decisions, shape solutions, and prevent costly missteps.</p> <p>Amidst the lines of logic and structures, there are numbers that matter. If you're building a high-throughput application, what's the storage cost for logging at 100,000 RPS? While the exact numbers might vary based on various factors, having a rough estimate can be invaluable. It can guide architectural decisions, inform optimizations, and provide a reality check on feasibility.</p> <p>I\u2019ve seen this cool concept called \u201cThe Napkin Math\u201d \u2014 for situations where you need to quickly approximate how much it will cost or how fast it will be. In today's cloud-centric world, where scalability and performance are paramount, costs can soon spiral out of control if not kept in check. Being able to approximate calculations on the fly can provide a solid roadmap. It can help you anticipate costs, allocate resources efficiently, and design performant and cost-effective systems.</p> <p>https://youtu.be/IxkSlnrRFqc</p> <p>I won\u2019t talk too in-depth about this - but watch the talk. It\u2019s great.</p>"},{"location":"Architecture/Reference/habits_of_great_software_engineers/#transfering-knowledge-to-other-problems","title":"Transfering Knowledge to Other Problems","text":"<p>One of the most profound moments in a student's life is the realization that learning isn't just about absorbing information but understanding its essence and applying it to similar problems. This truth, often first encountered in math classes, extends far beyond the classroom and is especially pertinent in software development.</p> <p>Think back to those math problems. You'd spend hours understanding a concept, practicing it with a specific set of problems, only to be presented with a different challenge during exams. The numbers changed, the context shifted, but the underlying principle remained unchanged. The real test wasn't just your knowledge of the concept but your ability to adapt and apply it to a new scenario.</p> <p>I find this adaptability and transfer mindset quite important. Challenges are constant, but they rarely come in familiar packages. A coding solution that worked for one project might not fit another, even if they seem similar. The true mark of a developer's skill is their ability to take their knowledge and mold it to fit the task at hand.</p> <p>If it looks like a duck, swims like a duck, and quacks like a duck, then it probably is a duck.</p> <p>\ud83c\udfc4 Experience plays a pivotal role in this. With each challenge faced, a developer adds to their repertoire, expanding their understanding and refining their approach. I tell my developers, \u201cEvery bug you solve today is a skill tomorrow.\u201d</p> <p>Static knowledge, rigid and unyielding, can become a limitation. The real magic lies in understanding and grasping the core principles so that they can be reshaped and repurposed as needed.</p>"},{"location":"Architecture/Reference/habits_of_great_software_engineers/#making-hard-things-easy","title":"Making Hard Things Easy","text":"<p>Julia Evans has a great talk on making hard things easy. That\u2019s where I stole the title of this section as well.</p> <p>There's a truth often attributed to the genius of Albert Einstein: \"If you can't explain it simply, you don't understand it well enough.\" In software engineering especially, the pinnacle of understanding isn't just about mastering the hard things but about making those hard things easy for others.</p> <p>I\u2019ve met quite a few developers who explained complex things to me in such simple terms that I was surprised that a) I understood it and b) that the concepts were not as complicated as I feared.</p> <p>For example, I didn\u2019t know much about network programming or Linux sockets. I spent days googling, but the information I found wasn\u2019t really clicking with me. It might say a lot about Google search quality, but then I found the beej\u2019s guide , and it clicked into place for me.</p> <p>I think it\u2019s a mark of great engineers if they can explain something and be understood not just by their fellow programmers who work in the same field but also by average people.</p> <p>Furthermore, making hard things easy is about leveling the playing field. It's about recognizing that knowledge shouldn't be a guarded treasure but a shared resource. By simplifying concepts by making them accessible, you empower others. You give them the tools to rise, to reach your level of understanding, and perhaps even surpass it.</p>"},{"location":"Architecture/Reference/microservices-checklist/","title":"Microservices Checklist \u2014 Cover All Aspects of Microservices Architecture","text":"<p>We are going to learn our Microservices Checklist and cover All Aspects with exploring vertical topics of Microservices Architecture.</p> <p></p> <p>Vertical Considerations</p> <p>Before design any architecture, we should evaluate and verify some vertical topics and question to our architecture in order to make sure that we have calculated every tradeoffs and risks at acceptable level for your project.</p>"},{"location":"Architecture/Reference/microservices-checklist/#software-architecture-design","title":"Software Architecture Design","text":"<p>Software architecture is always a balancing act between trade-offs and compromises. There is no single design or architecture that is perfect for every situation. Instead, software architects must carefully consider the trade-offs and make decisions based on the specific requirements, constraints, and goals of the software system.</p> <p>For example, a monolithic architecture may be simpler and easier to manage, but it may not scale well as the system grows. On the other hand, a microservices-based architecture may provide greater scalability and flexibility, but it may be more complex and difficult to manage. In the previous article, you can read the Evolution of Architectures; Monolithic, Microservices and Serverless.</p> <p>The key point is that there is no single \u201cbest\u201d solution for software architecture, and software architects must constantly make trade-offs and compromises based on the specific requirements, constraints, and goals of the system. The goal is to find the right balance that meets the needs of the system and the stakeholders.</p> <p>So to verify any architecture, we should think every aspects of design and make sure that cover all different angle of the design. During this article, we will discuss which vertical considerations could be think when we design microservices architecture.</p>"},{"location":"Architecture/Reference/microservices-checklist/#microservices-building-blocks","title":"Microservices Building Blocks","text":"<p>We can start to discuss Vertical Considerations of microservices architectures. These are:</p> <ul> <li>Microservices Decomposition \u2014 Breaking Down Microservices</li> <li>Microservices Communications (Sync / Async Message-Based Communication, API Gws)</li> <li>Microservices Data Management (Databases / Query / Commands)</li> <li>Microservices Transaction Management</li> <li>Microservices Distributed Caching</li> <li>Microservices Deployments with Containers and Orchestrators</li> <li>Microservices Resilience with Distributed Logging, Tracing and Health</li> <li>Microservices Testing; Contract Testing, Integration Testing, E2E Test</li> <li>Microservices Security; Authentication and Authorization</li> </ul> <p>with applying microservices design patterns and practices.</p> <p></p> <p>Vertical Considerations</p> <p>According to this image, we can evaluate and verify any architecture with checking all these vertical considerations.</p>"},{"location":"Architecture/Reference/microservices-checklist/#microservices-building-blocks-sub-components","title":"Microservices Building Blocks \u2014 Sub Components","text":"<p>Now we can go one more level to identify and check sub components of building blocks. Here you can reach the sub components of these Microservices Building Blocks:</p>"},{"location":"Architecture/Reference/microservices-checklist/#microservices-decomposition-breaking-down-microservices","title":"Microservices Decomposition \u2014 Breaking Down Microservices:","text":"<ul> <li>DDD \u2014 Bounded Context</li> <li>Business Capabilities</li> </ul>"},{"location":"Architecture/Reference/microservices-checklist/#microservices-communications","title":"Microservices Communications:","text":"<ul> <li>Synchronous Communication</li> <li>Asynchronous Communication</li> <li>Poll-Based Communications</li> </ul> <p>So in this building block, we should also go one more deep level and identify consideration topics as bellowed:</p>"},{"location":"Architecture/Reference/microservices-checklist/#microservices-synchronous-communication","title":"Microservices Synchronous Communication","text":"<ul> <li>Sync Communication Types: REST / gRPC / GraphQL / WebSocket</li> <li>API Gateway Requirements: Discovery, Registry, Route, Aggregation, Composition, Authentication</li> <li>Service-to-service Integration Considerations : Backend Microservices / 3rd party calls / B2B Gateways / IoT Devices</li> <li>Headless Architecture Decisions: Micro-frontend designs, Edge Functions</li> </ul>"},{"location":"Architecture/Reference/microservices-checklist/#microservices-asynchronous-communication","title":"Microservices Asynchronous Communication","text":"<ul> <li>Async Com Types: 1\u20131 / 1-many (point-to-point / publish-subscribe)</li> <li>Async Com Way: Fire&amp;Forget / Callback</li> <li>Async Tools: Message Broker / Event Bus / Queue / DLQ</li> <li>Async Patterns: Pub-Sub / Fanout / Topic Queue Chain / Event Filters / Rule Engine</li> <li>EDA Design Considerations: Event Backbone / Event Queue Topic Design / Real-time Event Streams / Event Filters, Routers, Deserializers / Event Stores</li> </ul> <p>Lets continue with other sub components of Microservices Building Blocks.</p>"},{"location":"Architecture/Reference/microservices-checklist/#microservices-data-management-databases-query-commands","title":"Microservices Data Management (Databases / Query / Commands)","text":"<ul> <li>Database Chooses</li> <li>Queries</li> <li>Commands \u2014 Consistency</li> <li>Distributed Transactions</li> <li>Caching</li> </ul> <p>So in this building block, we should also go one more deep level and identify consideration topics as bellowed:</p>"},{"location":"Architecture/Reference/microservices-checklist/#database-chooses","title":"Database Chooses","text":"<ul> <li>DB Types : Relational / NoSQL \u2014 Document, Key/Value, Wide Column, Graph, Time Series, DWH</li> <li>DB Scale Options : Master-Slave/ Masterless, Replication, Sharding, Read/Write</li> <li>DB Capabilities: CDC / Streaming / Sharding / K8s Management DBs / DWH Reporting / Big Data Analysis / AI/ML model processing</li> </ul>"},{"location":"Architecture/Reference/microservices-checklist/#queries","title":"Queries","text":"<ul> <li>API Gateway / Composition / Aggregation / BFF</li> <li>CQRS / Materialized View / Event Sourcing / Read Database</li> <li>Analytics/AI-ML/Reporting/Real-time stream analysis and processing / Big Data Analysis</li> </ul>"},{"location":"Architecture/Reference/microservices-checklist/#commands-consistency","title":"Commands \u2014 Consistency","text":"<ul> <li>Consistency: Strict / Eventual Consistency</li> <li>CQRS / Write Database / ACID / Event Sourcing / Repayable Snapshot / Single source of truth</li> </ul>"},{"location":"Architecture/Reference/microservices-checklist/#microservices-distributed-transactions","title":"Microservices Distributed Transactions","text":"<ul> <li>Transaction Management: 2PC / SAGA (Orchestrator / Choreography )</li> <li>Outbox / Dual Write / Change Data Capture / Message Broker Event Bus / read-after-write consistency</li> <li>MS Design : Idempotency / Stateless / Immutable events</li> </ul>"},{"location":"Architecture/Reference/microservices-checklist/#microservices-distributed-caching","title":"Microservices Distributed Caching","text":"<ul> <li>Cache Type: Static Content (CDN) / In-memory / Distributed</li> <li>Cache Settings: Cache Expire / TTL / Hit \u2014 Miss \u2014 Invalidation</li> </ul> <p>Lets continue with other sub components of Microservices Building Blocks.</p>"},{"location":"Architecture/Reference/microservices-checklist/#microservices-deployments-with-containers-and-orchestrators","title":"Microservices Deployments with Containers and Orchestrators","text":"<ul> <li>IaC</li> <li>Devops CI/CD</li> <li>Network Management</li> </ul> <p>So in this building block, we should also go one more deep level and identify consideration topics as bellowed:</p>"},{"location":"Architecture/Reference/microservices-checklist/#iac","title":"IaC","text":"<ul> <li>Multi-Cloud Deployments \u2014 EKS, AKS, GKS</li> <li>PaaS, Managed K8s (Openshift), Databases (k8cassandra, ksql), EventBus (Confluence Kafka), Api Gw</li> <li>Serverless options, FAAS, Serverless and Edge Functions, CDN</li> </ul>"},{"location":"Architecture/Reference/microservices-checklist/#devops-cicd","title":"Devops CI/CD","text":"<ul> <li>Deployments: Containers, Orchestrators, Serverless options, Frameworks: Openshift</li> <li>Pipeline Steps, Automation, Devops tools</li> <li>Package Management: Helm Charts, Artifactory Hubs, Re-usable container registry</li> <li>Deployment Strategy: Blue/Green, Canary, Recreate</li> <li>Configurations : Config Server, Encryption, Key Vault Management</li> </ul>"},{"location":"Architecture/Reference/microservices-checklist/#network-management","title":"Network Management","text":"<ul> <li>Load Balancing, Ingress, CDN, DNS Management, Cluster Management, Disaster recovery</li> </ul> <p>Lets continue with other sub components of Microservices Building Blocks.</p>"},{"location":"Architecture/Reference/microservices-checklist/#microservices-resilience","title":"Microservices Resilience","text":"<ul> <li>Observability / Logging</li> <li>Monitoring</li> <li>Tracing</li> <li>Resilient / Fault Tolerance</li> </ul> <p>So in this building block, we should also go one more deep level and identify consideration topics as bellowed:</p>"},{"location":"Architecture/Reference/microservices-checklist/#observability-logging","title":"Observability / Logging","text":"<ul> <li>Centralized Logging, Distributed Logging, Dashboards, ELK Stack</li> <li>Log Id per Request, Service App Logs, Integration Logs</li> </ul>"},{"location":"Architecture/Reference/microservices-checklist/#monitoring","title":"Monitoring","text":"<ul> <li>System Monitoring: CPU, Ram</li> <li>Application Monitoring: Queue Count, unprocessed messages</li> <li>Health Checks : Microservices, Databases, Brokers Event Buses, 3rd party systems</li> </ul>"},{"location":"Architecture/Reference/microservices-checklist/#tracing","title":"Tracing","text":"<ul> <li>Distributed Transactions, Transaction Id, Correlation Id, E2E Request Id, Event Id</li> <li>OpenTelemetry Compliance: Jeager, Zipkin</li> </ul>"},{"location":"Architecture/Reference/microservices-checklist/#resilient-fault-tolerance","title":"Resilient / Fault Tolerance","text":"<ul> <li>API Call Management : Retry, Circuit Breaker, Bulkhead, Rate limiting, Fault Tolerant</li> <li>Kubernetes Patterns &amp; Best Practices : Sidecar, Service Mesh, Service Proxy</li> <li>Async Fault Alarms: DLQ, Notifications, Alarms</li> </ul> <p>Lets continue with other sub components of Microservices Building Blocks.</p>"},{"location":"Architecture/Reference/microservices-checklist/#microservices-testing-contract-testing-integration-testing-e2e-test","title":"Microservices Testing; Contract Testing, Integration Testing, E2E Test","text":"<ul> <li>Pre-Deployment Test : Unit / Integration / Contract Test</li> <li>Post-Deployment Test : E2E SIT Test / Consumer-Driven Test / Chaos Test</li> </ul>"},{"location":"Architecture/Reference/microservices-checklist/#microservices-security-authentication-and-authorization","title":"Microservices Security; Authentication and Authorization","text":"<ul> <li>Authentication</li> <li>Identity Servers: Managed (IS4, Keycloak) and Serverless options (Cognito)</li> <li>Protocols: OAuth2.0 , OpenIDConnect flows</li> <li>Token Types and Claims</li> <li>Authorization</li> <li>API Gw Authentication flows, Claim based authorizations, RBAC</li> <li>Configurations</li> <li>Encryption, Key Vault Management</li> <li>SSL and TLS, Firewalls</li> <li>Audit Logs</li> </ul>"},{"location":"Architecture/Reference/microservices-checklist/#conclusion","title":"Conclusion","text":"<p>These are created from our team when we design and iterate microservices into our cloud-native enterprise applications and projects. So if you have additional consideration feel free to extend this list with adding new considerations regarding to microservices.</p>"},{"location":"Architecture/Reference/naming-conventions/","title":"Cloud Naming Convention","text":"<p>Consistent naming strategy is important and should be an essential part of any cloud effort. Sadly it's often overlooked. It might seem like a luxury when you run a few \"pet\" servers, but it quickly becomes critical as the number of managed resources grows. It is the first step in achieving even basic levels of consistency and prerequisite to establishing any sort of cloud governance.</p> <p>After reading this article, you'll hopefully know how to get from:</p> <pre><code>$ gcloud container clusters list\\\n    --format 'value(name)'\nk8s-cluster\nk8s-cluster\nk8s-cluster\nk8s-cluster\n</code></pre> <p>to something like:</p> <pre><code>$ gcloud container clusters list\\\n    --format 'value(name)'\nste-blog-p-kcl-euwe4-primary\nste-webshop-d-kcl-euwe4-primary\nste-webshop-p-kcl-euwe4-primary\nste-webshop-p-kcl-usce1-primary\n</code></pre> <p>The latter will quickly tell us what type of resources are we dealing with, to which project and environment they belong, where are they located and whether they're functionally equivalent to each other.</p>"},{"location":"Architecture/Reference/naming-conventions/#benefits","title":"Benefits","text":"<p>Consistent and descriptive naming of resources has many benefits:</p> <ul> <li>Indicates the role and ownership of a resource.</li> <li>Helps formalize expectations and promote consistency within an infrastructure.</li> <li>Prevents name clashes when resource names must be unique.</li> <li>Makes resources easier to locate.</li> <li>Reduces effort to understand code and allows developers to focus on more important aspects than arguing over naming standards.</li> <li>Allows to sort and filter resources quickly.</li> <li>Is a prerequisite for establishing any successful cloud governance and automated policy evaluation or enforcement.\\ I'm not quite sure when I first came across this quote, but it since became one of my favourites. Martin Fowler\u00a0attributes it to Phil Karlton.</li> </ul> <p>There are only two hard things in Computer Science: cache invalidation and naming things.</p> <p>Phil Karlton</p>"},{"location":"Architecture/Reference/naming-conventions/#main-properties","title":"Main Properties","text":"<p>Good naming convention must provide clarity and work in both directions:</p> <ul> <li>Clearly define how newly created resources should be named.</li> <li>Identify and indicate the purpose and ownership of existing resources.</li> </ul> <p>We'll focus on how a naming convention for cloud-level resources should look like. GCP is used in our examples, but the concepts and strategies are generic and can be easily adapted to other cloud providers.</p>"},{"location":"Architecture/Reference/naming-conventions/#naming-restrictions","title":"Naming Restrictions","text":"<p>When designing your naming convention, you should take into account limitations imposed by the cloud provider. Each resource comes with a set of naming restrictions. The rule of thumb is to keep it short and simple (use only letters and numbers for individual components, keep\u00a0<code>-</code>\u00a0as separator).</p> <p>GCP limits name length for most of the resources to 62 or 63 characters, Project IDs are limited to 30. Resources must have unique names, either globally or within a given scope. Some resources have additional constraints to take into consideration (e.g. GCP Projects can't be immediately deleted).</p>"},{"location":"Architecture/Reference/naming-conventions/#global-naming-pattern","title":"Global Naming Pattern","text":"<p>First we establish naming pattern that all directly managed resources should follow - Global Naming Pattern.</p> <p><code>[prefix]-[project]-[env]-[resource]-[location]-[description]-[suffix]</code></p> Component Description Req. Constraints <code>prefix</code> Fixed prefix \u2714 len 3, fixed <code>project</code> Project name \u2714 len 4-10, a-z0-9 <code>env</code>\u00a0. Environment \u2714 len 1, a-z, enum <code>resource</code> Resource type \u2714 len 3, a-z, enum <code>location</code> Resource location \u2717 len 1-6, a-z0-9 <code>description</code> Additional description \u2717 len 1-20, a-z0-9 <code>suffix</code> Random suffix \u2717 len 4, a-z0-9 <p>Let's go over the individual components more in detail.</p>"},{"location":"Architecture/Reference/naming-conventions/#fixed-prefix","title":"Fixed Prefix","text":"<p>This is a fixed value prefix used for all resources. Typically some form of abbreviation for your organization name.</p> <ul> <li><code>ste</code>\u00a0for Stepan</li> <li><code>ggl</code>\u00a0for Google</li> </ul>"},{"location":"Architecture/Reference/naming-conventions/#project-name","title":"Project Name","text":"<p>This is different from a GCP Project. Typically one Project will have multiple GCP Projects.We're using flat hierarchy and Project serves as the main mechanism of organizing resources into groups. I like using flat hierarchy as it's very universal and flexible to fit pretty much any organizational structure. You might consider replacing this with some other form of group (e.g. team, product), but in my experience it never quite works in the long term.</p> <ul> <li><code>blog</code>\u00a0for blog project</li> <li><code>webshop</code>\u00a0for web shop project</li> </ul>"},{"location":"Architecture/Reference/naming-conventions/#environment","title":"Environment","text":"<p>Resources belong to deployment environments. It's beneficial to establish a common set of names used across your organization.</p> <ul> <li><code>d</code>\u00a0for development</li> <li><code>s</code>\u00a0for staging</li> <li><code>p</code>\u00a0for production</li> </ul>"},{"location":"Architecture/Reference/naming-conventions/#resource-type","title":"Resource Type","text":"<p>I've tried various mechanisms over the time to construct the abbreviation for resources - most consistent results are achieved if the names are based on the API resource names.Abbreviation of the given resource type. In GCP I tend to use three letters.</p> <p>For larger and more frequently used APIs (e.g. Compute, Kubernetes) first letter stands for the API and the remaining two for the resource type. For APIs with fewer resources, it's the other way around. I know this is not a completely deterministic rule, but this will always be a compromise to it short and usable.</p> <ul> <li><code>cin</code>\u00a0- Compute Engine VM Instance</li> <li><code>cig</code>\u00a0- Compute Engine VM Instance Group</li> <li><code>kcl</code>\u00a0- Kubernetes Engine Cluster</li> <li><code>bqd</code>\u00a0- BigQuery Dataset</li> </ul>"},{"location":"Architecture/Reference/naming-conventions/#resource-location","title":"Resource Location","text":"<p>Location is required when there's a possibility to create a given resource in different locations.</p> <ul> <li>Regional\u00a0- five letter acronym (two letters for the continent, two for cardinal directions, 1 digit)</li> <li>Zonal\u00a0- six letters - Regional + zone</li> <li>Global\u00a0-\u00a0<code>g</code></li> <li> <p>Multi- and Dual-regional\u00a0- follow GCP's own naming (two letters for multi and 4 letters for dual-regional)</p> </li> <li> <p><code>euwe1</code>\u00a0- europe-west1 region</p> </li> <li><code>nane1</code>\u00a0- northamerica-northeast1 region</li> <li><code>euwe1a</code>\u00a0- europe-west1 region, zone a</li> <li><code>eu</code>\u00a0- Europe multi-region</li> <li><code>eur4</code>\u00a0- europe-north1 and europe-west4 dual-region</li> </ul>"},{"location":"Architecture/Reference/naming-conventions/#additional-description","title":"Additional Description","text":"<p>A description used to distinguish between resources of the same type but different roles. For example a group of servers with a different purpose -\u00a0<code>frontend</code>\u00a0and\u00a0<code>backend</code>. This should not be used to differentiate between multiple instances of the same purpose resource, use\u00a0<code>suffix</code>\u00a0instead.</p> <p>It's also beneficial to agree on generic keywords used for description, when there is no better, more specific, term available. This avoids many different names like\u00a0<code>main</code>,\u00a0<code>core</code>,\u00a0<code>common</code>,\u00a0<code>this</code>\u00a0and similar. Often good strategy is to use the Latin ordinal sequence, i.e.\u00a0<code>primary</code>,\u00a0<code>secondary</code>,\u00a0<code>tertiary</code>, etc.</p> <ul> <li><code>frontend</code></li> <li><code>backend</code></li> <li><code>kafka</code></li> </ul>"},{"location":"Architecture/Reference/naming-conventions/#random-suffix","title":"Random Suffix","text":"<p>I typically use a 2-byte number represented in hexadecimal form</p> <ul> <li> <p>good for readability and easily generated with Terraform\u00a0<code>random_id</code>\u00a0resource. Use Suffix to differentiate resource from its peers when there are multiple instances, or when there's a requirement for uniqueness.</p> </li> <li> <p><code>a49f</code></p> </li> </ul>"},{"location":"Architecture/Reference/naming-conventions/#examples","title":"Examples","text":"<p>Let's go over several full examples of how resources should be named based on the above established pattern.</p> <p>All the examples use prefix\u00a0<code>ste</code>\u00a0and belong to Production (<code>p</code>) environment of project\u00a0<code>blog</code>.</p> <ul> <li>Set of functionally equivalent Compute Instances<ul> <li><code>ste-blog-p-cin-euwe1a-nginx-408f</code></li> <li><code>ste-blog-p-cin-euwe1a-nginx-c338</code></li> <li><code>ste-blog-p-cin-euwe1a-nginx-d7aa</code></li> </ul> </li> <li>VPC (Network) and Subnet<ul> <li><code>ste-blog-p-cne-primary</code></li> <li><code>ste-blog-p-csn-euwe1-primary</code></li> </ul> </li> <li>GKE Regional Cluster and Node Pool<ul> <li><code>ste-blog-p-kcl-usce1-primary</code></li> <li><code>ste-blog-p-knp-usce1-primary-cbe7</code></li> </ul> </li> </ul>"},{"location":"Architecture/Reference/naming-conventions/#gcp-projects","title":"GCP Projects","text":"<p>Projects (and Folders) are considered resource containers for the purpose of this naming convention and therefore omit the\u00a0<code>resource</code>\u00a0part of the name.</p> <p>You can notice GCP does this by default for projects created via console - e.g.\u00a0<code>rapid-depot-253717</code>.Project IDs in GCP have to be globally unique and cannot be deleted immediately. This is unfortunate for automation, as you can't create a project with the same name right after it has been deleted. And that's why we include the unique random suffix part.</p> <p>Folders: We don't use GCP folders to organize projects. I generally believe that keeping it simple and flat is beneficial more often than not. However, if you want to further structure your resources, consider adding an additional component to your naming pattern, such as\u00a0<code>[org_group]</code>. Folders can then follow\u00a0<code>[prefix]-[org-group]</code>\u00a0pattern.GCP also allows configuring Project Name. I recommend to set this to the same value as Project ID and forget about it. For all the practical purposes you'll reference the Projects by their IDs.</p> <p>GCP Projects will therefore be named following the\u00a0<code>[prefix]-[project]-[env]-[suffix]</code>\u00a0pattern.</p> <ul> <li><code>ste-blog-p-a8d6</code></li> <li><code>abc-research-d-ab45</code></li> </ul> <p>xkcd - Permanence\u00a0by Randall Munroe</p>"},{"location":"Architecture/Reference/naming-conventions/#exceptions","title":"Exceptions","text":"<p>There will always be exceptions where it's not possible to follow the Global Naming Pattern (for example resource does not allow\u00a0<code>-</code>\u00a0in the name) or when it simply doesn't make sense. A subset of the full pattern should be used if possible and all exceptions documented.</p>"},{"location":"Architecture/Reference/naming-conventions/#service-accounts","title":"Service Accounts","text":"<p>Service accounts follow the\u00a0<code>[resource]-[description]</code>\u00a0pattern only, as the project is already included in the part after\u00a0<code>@</code>\u00a0and therefore there's no need to repeat that bit,</p> <ul> <li><code>svc-frontend@ste-blog-p-a8d6.iam.gserviceaccount.com</code></li> </ul>"},{"location":"Architecture/Reference/naming-conventions/#iam-and-groups","title":"IAM and Groups","text":"<p>This is a complex topic, perhaps for another article, but you should establish a naming convention for groups and a strategy on how to assign permissions. As a rule of thumb, never assign permissions directly to individuals, but to groups only.</p>"},{"location":"Architecture/Reference/naming-conventions/#labelling-resources","title":"Labelling Resources","text":"<p>You should also cover the use of labels (or tags). A good one is to add information to further categorize your resources, such as\u00a0<code>cost-center</code>. Labels are also helpful in situations when you can't manage resource names directly, but you can manage a set of labels that is propagated to the child resources (e.g. GKE Cluster labels or Instance Groups).</p> <p>Do not duplicate information already contained in your naming convention (such as\u00a0<code>project</code>) or create large numbers of unique labels with information that can be obtained from the objects themselves (such as\u00a0<code>creationTimestamp</code>).</p>"},{"location":"Architecture/Reference/naming-conventions/#dns","title":"DNS","text":"<p>DNS naming convention across your infrastructure is again a larger topic, but you should definitely have one. A simple strategy can be creating a subdomain for each GCP project in the\u00a0<code>[project]-[env].&lt;common_dns_domain&gt;</code>\u00a0form. DNS records created for given resources should then follow the\u00a0<code>[resource]-[resource_location]-[description]-[suffix]</code>\u00a0part of the Global Naming pattern and therefore mirror the resource name.</p> <p>This allows for easy subdomain delegation to individual GCP projects.</p> <ul> <li>DNS record for VM with name\u00a0<code>ste-blog-p-cin-euwe1b-frontend-a6bc</code>\u00a0would be\u00a0<code>cin-euwe1b-frontend-a6bc.blog-p.stepan.wtf</code></li> </ul>"},{"location":"Architecture/Reference/naming-conventions/#summary","title":"Summary","text":"<p>You should establish a consistent naming convention as one of the first things when you start using cloud or on a new project. It's one of those things that are really easy to do in the beginning, but much more difficult to fix later on. And you'll benefit from it every day.</p> <p>The key to success with naming conventions is establishing them early on and ruthlessly following across your entire infrastructure. Automation helps a lot.</p> <p>As usual, there's no silver bullet and the actual naming convention should always be tailored to your environment. The main point is having one! And I hope this post gives you a head start.</p>"},{"location":"Architecture/Reference/pragmatic/","title":"The Pragmatic Programmer Quick Reference Guide","text":"<p>This page summarizes the tips and checklists found in The Pragmatic Programmer.</p> <p>Care About Your Craft</p> <p>Why spend your life developing software unless you care about doing it well?</p> <p>Think! About Your Work</p> <p>Turn off the autopilot and take control. Constantly critique and appraise your work.</p> <p>Provide Options, Don\\'t Make Lame Excuses</p> <p>Instead of excuses, provide options. Don\\'t say it can\\'t be done; explain what can be done.</p> <p>Don\\'t Live with Broken Windows</p> <p>Fix bad designs, wrong decisions, and poor code when you see them.</p> <p>Be a Catalyst for Change</p> <p>You can\\'t force change on people. Instead, show them how the future might be and help them participate in creating it.</p> <p>Remember the Big Picture</p> <p>Don\\'t get so engrossed in the details that you forget to check what\\'s happening around you.</p> <p>Make Quality a Requirements Issue</p> <p>Involve your users in determining the project\\'s real quality requirements.</p> <p>Invest Regularly in Your Knowledge Portfolio Make learning a habit.</p> <p>Critically Analyze What You Read and Hear</p> <p>Don\\'t be swayed by vendors, media hype, or dogma. Analyze information in terms of you and your project.</p> <p>It\\'s Both What You Say and the Way You Say It</p> <p>There\\'s no point in having great ideas if you don\\'t communicate them effectively.</p> <p>DRY--Don\\'t Repeat Yourself</p> <p>Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.</p> <p>Make It Easy to Reuse</p> <p>If it\\'s easy to reuse, people will. Create an environment that supports reuse.</p> <p>Eliminate Effects Between Unrelated Things</p> <p>Design components that are self-contained. independent, and have a single, well-defined purpose.</p> <p>There Are No Final Decisions</p> <p>No decision is cast in stone. Instead, consider each as being written in the sand at the beach, and plan for change.</p> <p>Use Tracer Bullets to Find the Target</p> <p>Tracer bullets let you home in on your target by trying things and seeing how close they land.</p> <p>Prototype to Learn</p> <p>Prototyping is a learning experience. Its value lies not in the code you produce, but in the lessons you learn.</p> <p>Program Close to the Problem Domain Design and code in your user\\'s language.</p> <p>Estimate to Avoid Surprises</p> <p>Estimate before you start. You\\'ll spot potential problems up front.</p> <p>Iterate the Schedule with the Code</p> <p>Use experience you gain as you implement to refine the project time scales.</p> <p>Keep Knowledge in Plain Text</p> <p>Plain text won\\'t become obsolete. It helps leverage your work and simplifies debugging and testing.</p> <p>Use the Power of Command Shells</p> <p>Use the shell when graphical user interfaces don\\'t cut it.</p> <p>Use a Single Editor Well</p> <p>The editor should be an extension of your hand; make sure your editor is configurable, extensible, and programmable.</p> <p>Always Use Source Code Control</p> <p>Source code control is a time machine for your work---you can go back.</p> <p>Fix the Problem, Not the Blame</p> <p>It doesn\\'t really matter whether the bug is your fault or someone else\\'s---it is still your problem, and it still needs to be fixed.</p> <p>Don\\'t Panic When Debugging</p> <p>Take a deep breath and THINK! about what could be causing the bug.</p> <p>\\\"select\\\" Isn\\'t Broken.</p> <p>It is rare to find a bug in the OS or the compiler, or even a third-party product or library. The bug is most likely in the application.</p> <p>Don\\'t Assume It---Prove It</p> <p>Prove your assumptions in the actual environment-- with real data and boundary conditions.</p> <p>Learn a Text Manipulation Language.</p> <p>You spend a large part of each day working with text. Why not have the computer do some of it for you?</p> <p>Write Code That Writes Code</p> <p>Code generators increase your productivity and help avoid duplication.</p> <p>You Can\\'t Write Perfect Software</p> <p>Software can\\'t be perfect. Protect your code and users from the inevitable errors.</p> <p>Design with Contracts</p> <p>Use contracts to document and verify that code does no more and no less than it claims to do.</p> <p>Crash Early</p> <p>A dead program normally does a lot less damage than a crippled one.</p> <p>Use Assertions to Prevent the Impossible</p> <p>Assertions validate your assumptions. Use them to protect your code from an uncertain world.</p> <p>Use Exceptions for Exceptional Problems</p> <p>Exceptions can suffer from all the readability and maintainability problems of classic spaghetti code. Reserve exceptions for exceptional things.</p> <p>Finish What You Start</p> <p>Where possible, the routine or object that allocates a resource should be responsible for deallocating it.</p> <p>Minimize Coupling Between Modules</p> <p>Avoid coupling by writing \\\"shy\\\" code and applying the Law of Demeter.</p> <p>Configure, Don\\'t Integrate</p> <p>Implement technology choices for an application as configuration options, not through integration or engineering.</p> <p>Put Abstractions in Code, Details in Metadata</p> <p>Program for the general case, and put the specifics outside the compiled code base.</p> <p>Analyze Workflow to Improve Concurrency Exploit concurrency in your user\\'s workflow.</p> <p>Design Using Services</p> <p>Design in terms of services---independent, concurrent objects behind well-defined, consistent interfaces.</p> <p>Always Design for Concurrency</p> <p>Allow for concurrency, and you\\'ll design cleaner interfaces with fewer assumptions.</p> <p>Separate Views from Models</p> <p>Gain flexibility at low cost by designing your application in terms of models and views.</p> <p>Use Blackboards to Coordinate Workflow</p> <p>Use blackboards to coordinate disparate facts and agents, while maintaining independence and isolation among participants.</p> <p>Don\\'t Program by Coincidence</p> <p>Rely only on reliable things. Beware of accidental complexity, and don\\'t confuse a happy coincidence with a purposeful plan.</p> <p>Estimate the Order of Your Algorithms</p> <p>Get a feel for how long things are likely to take before you write code.</p> <p>Test Your Estimates</p> <p>Mathematical analysis of algorithms doesn\\'t tell you everything. Try timing your code in its target environment.</p> <p>Refactor Early, Refactor Often</p> <p>Just as you might weed and rearrange a garden, rewrite, rework, and re-architect code when it needs it. Fix the root of the problem.</p> <p>Design to Test</p> <p>Start thinking about testing before you write a line of code.</p> <p>Test Your Software, or Your Users Will</p> <p>Test ruthlessly. Don\\'t make your users find bugs for you.</p> <p>Don\\'t Use Wizard Code You Don\\'t Understand</p> <p>Wizards can generate reams of code. Make sure you understand all of it before you incorporate it into your project.</p> <p>Don\\'t Gather Requirements--Dig for Them</p> <p>Requirements rarely lie on the surface. They\\'re buried deep beneath layers of assumptions, misconceptions, and politics.</p> <p>Workwith a User to Think Like a User</p> <p>It\\'s the best way to gain insight into how the system will really be used.</p> <p>Abstractions Live Longer than Details</p> <p>Invest in the abstraction, not the implementation. Abstractions can survive the barrage of changes from different implementations and new technologies.</p> <p>Use a Project Glossary</p> <p>Create and maintain a single source of all the specific terms and vocabulary for a project.</p> <p>Don\\'t Think Outside the Box--Find the Box</p> <p>When faced with an impossible problem, identify the real constraints. Ask yourself: \\\"Does it have to be done this way? Does it have to be done at all?\\\"</p> <p>Start When You\\'re Ready.</p> <p>You\\'ve been building experience all your life. Don\\'t ignore niggling doubts.</p> <p>Some Things Are Better Done than Described</p> <p>Don\\'t fall into the specification spiral---at some point you need to start coding.</p> <p>Don\\'t Be a Slave to Formal Methods.</p> <p>Don\\'t blindly adopt any technique without putting it into the context of your development practices and capabilities.</p> <p>Costly Tools Don\\'t Produce Better Designs</p> <p>Beware of vendor hype, industry dogma, and the aura of the price tag. Judge tools on their merits.</p> <p>Organize Teams Around Functionality</p> <p>Don\\'t separate designers from coders, testers from data modelers. Build teams the way you build code.</p> <p>Don\\'t Use Manual Procedures</p> <p>A shell script or batch file will execute the same instructions, in the same order, time after time.</p> <p>Test Early. Test Often. Test Automatically</p> <p>Tests that run with every build are much more effective than test plans that sit on a shelf.</p> <p>Coding Ain\\'t Done \\'Til All the Tests Run \\'Nuff said.</p> <p>Use Saboteurs to Test Your Testing</p> <p>Introduce bugs on purpose in a separate copy of the source to verify that testing will catch them.</p> <p>Test State Coverage, Not Code Coverage</p> <p>Identify and test significant program states. Just testing lines of code isn\\'t enough.</p> <p>Find Bugs Once</p> <p>Once a human tester finds a bug, it should be the last time a human tester finds that bug. Automatic tests should check for it from then on.</p> <p>English is Just a Programming Language</p> <p>Write documents as you would write code: honor the DRY principle, use metadata, MVC, automatic generation, and so on.</p> <p>Build Documentation In, Don\\'t Bolt It On</p> <p>Documentation created separately from code is less likely to be correct and up to date.</p> <p>Gently Exceed Your Users\\' Expectations</p> <p>Come to understand your users\\' expectations, then deliver just that little bit more.</p> <p>Sign Your Work</p> <p>Craftsmen of an earlier age were proud to sign their work. You should be, too.</p> <p>Languages To Learn</p> <p>Tired of C, C++, and Java? Try CLOS, Dylan, Eiffel, Objective C, Prolog, Smalltalk, or TOM. Each of these languages has different capabilities and a different \\\"flavor.\\\" Try a small project at home using one or more of them.</p> <p>The WISDOM Acrostic</p> <p>What do you want them to learn?</p> <p>What is their interest in what you\\'ve got to say?</p> <p>How sophisticated are they?</p> <p>How much detail do they want?</p> <p>Whom do you want to own the information?</p> <p>How can you motivate them to listen to you?</p> <p>How to Maintain Orthogonality</p> <p>Design independent, well-defined components.</p> <p>Keep your code decoupled.</p> <p>Avoid global data.</p> <p>Refactor similar functions.</p> <p>Things to prototype</p> <p>Architecture</p> <p>New functionality in an existing system</p> <p>Structure or contents of external data</p> <p>Third-party tools or components Performance issues</p> <p>User interface design</p> <p>Architectural Questions</p> <p>Are responsibilities well defined?</p> <p>Are the collaborations well defined?</p> <p>Is coupling minimized?</p> <p>Can you identify potential duplication?</p> <p>Are interface definitions and constraints acceptable? Can modules access needed data---when needed?</p> <p>Debugging Checklist</p> <p>Is the problem being reported a direct result of the underlying bug, or merely a symptom?</p> <p>Is the bug really in the compiler? Is it in the OS? Or is it in your code?</p> <p>If you explained this problem in detail to a coworker, what would you say?</p> <p>If the suspect code passes its unit tests, are the tests complete enough? What happens if you run the unit test with this data? Do the conditions that caused this bug exist anywhere else in the system?</p> <p>Law of Demeter for Functions</p> <p>An object\\'s method should call only methods belonging to:</p> <p>Itself</p> <p>Any parameters passed in</p> <p>Objects it creates</p> <p>Component objects</p> <p>How to Program Deliberately</p> <p>Stay aware of what you\\'re doing.</p> <p>Don\\'t code blindfolded.</p> <p>Proceed from a plan.</p> <p>Rely only on reliable things.</p> <p>Document your assumptions.</p> <p>Test assumptions as well as code.</p> <p>Prioritize your effort.</p> <p>Don\\'t be a slave to history.</p> <p>When to Refactor</p> <p>You discover a violation of the DRY principle.</p> <p>You find things that could be more orthogonal.</p> <p>Your knowledge improves.</p> <p>The requirements evolve.</p> <p>You need to improve performance.</p> <p>Cutting the Gordian Knot</p> <p>When solving impossible problems, ask yourself:</p> <p>Is there an easier way?</p> <p>Am I solving the right problem?</p> <p>Why is this a problem?</p> <p>What makes it hard?</p> <p>Do I have to do it this way?</p> <p>Does it have to be done at all?</p> <p>Aspects of Testing</p> <p>Unit testing</p> <p>Integration testing</p> <p>Validation and verification</p> <p>Resource exhaustion, errors, and recovery</p> <p>Performance testing</p> <p>Usability testing</p> <p>Testing the tests themselves</p>"},{"location":"Architecture/Reference/reference/","title":"reference","text":""},{"location":"Architecture/Reference/throughput_and_latency/","title":"Throughput &amp; Latency","text":""},{"location":"Architecture/Reference/throughput_and_latency/#throughput-is-the-amount-of-data-a-system-processes-within-a-given-period","title":"\ud835\udde7\ud835\uddf5\ud835\uddff\ud835\uddfc\ud835\ude02\ud835\uddf4\ud835\uddf5\ud835\uddfd\ud835\ude02\ud835\ude01 is the amount of data a system processes within a given period","text":"<p>It's measured in transactions per second (TPS), requests per second (RPS), or data units per second.  </p> <p>High throughput means the system can handle more requests in less time.  </p> <p>\ud835\udde7\ud835\uddf5\ud835\uddf6\ud835\uddfb\ud835\uddf4\ud835\ude00 \ud835\ude01\ud835\uddf5\ud835\uddee\ud835\ude01 \ud835\ude04\ud835\uddf6\ud835\uddf9\ud835\uddf9 \ud835\uddf5\ud835\uddf2\ud835\uddf9\ud835\uddfd \ud835\ude06\ud835\uddfc\ud835\ude02 \ud835\ude01\ud835\uddfc \ud835\uddf6\ud835\uddfb\ud835\uddf0\ud835\uddff\ud835\uddf2\ud835\uddee\ud835\ude00\ud835\uddf2 \ud835\udde7\ud835\uddf5\ud835\uddff\ud835\uddfc\ud835\ude02\ud835\uddf4\ud835\uddf5\ud835\uddfd\ud835\ude02\ud835\ude01:  </p> <p>- Horizontal Scaling (Adding More Machines) - Load Balancing - Asynchronous Processing or message queues  </p>"},{"location":"Architecture/Reference/throughput_and_latency/#latency-is-the-time-taken-to-process-a-single-operation-or-request","title":"\ud835\udddf\ud835\uddee\ud835\ude01\ud835\uddf2\ud835\uddfb\ud835\uddf0\ud835\ude06 is the time taken to process a single operation or request","text":"<p>It's usually measured in milliseconds or microseconds.  </p> <p>Low latency is essential in systems with critical response time, like high-frequency trading systems.  </p> <p>\ud835\udde7\ud835\uddf5\ud835\uddf6\ud835\uddfb\ud835\uddf4\ud835\ude00 \ud835\ude01\ud835\uddf5\ud835\uddee\ud835\ude01 \ud835\ude04\ud835\uddf6\ud835\uddf9\ud835\uddf9 \ud835\uddf5\ud835\uddf2\ud835\uddf9\ud835\uddfd \ud835\ude06\ud835\uddfc\ud835\ude02 \ud835\uddff\ud835\uddf2\ud835\uddf1\ud835\ude02\ud835\uddf0\ud835\uddf2 \ud835\udddf\ud835\uddee\ud835\ude01\ud835\uddf2\ud835\uddfb\ud835\uddf0\ud835\ude06:  </p> <p>- Optimizing Code - Using Faster Storage - Database Performance Tuning - Caching  </p>"},{"location":"Architecture/Reference/throughput_and_latency/#balancing-these-two-often-involves-trade-offs","title":"\ud835\uddd5\ud835\uddee\ud835\uddf9\ud835\uddee\ud835\uddfb\ud835\uddf0\ud835\uddf6\ud835\uddfb\ud835\uddf4 \ud835\ude01\ud835\uddf5\ud835\uddf2\ud835\ude00\ud835\uddf2 \ud835\ude01\ud835\ude04\ud835\uddfc \ud835\uddfc\ud835\uddf3\ud835\ude01\ud835\uddf2\ud835\uddfb \ud835\uddf6\ud835\uddfb\ud835\ude03\ud835\uddfc\ud835\uddf9\ud835\ude03\ud835\uddf2\ud835\ude00 \ud835\ude01\ud835\uddff\ud835\uddee\ud835\uddf1\ud835\uddf2-\ud835\uddfc\ud835\uddf3\ud835\uddf3\ud835\ude00","text":"<p>Asynchronous processing can increase throughput but might add to latency for individual tasks.  </p> <p>Extensive caching can reduce latency but requires more memory resources if not managed.  </p> <p>There's often a trade-off between maximizing throughput and minimizing latency.</p> <p></p>"},{"location":"Architecture/Reference/uid/","title":"The Wild World of Unique Identifiers (UUID, ULID, etc)","text":"<p>Every once in a while as a developer you find yourself stepping, and falling, into a much deeper rabbit hole than you would expect. I recently had one of these experiences as I have dug into the world of unique identifiers. It is this rabbit hole that I would like to take you down for a bit as well. Unique identifiers are everywhere in our code and our data storage and through better understanding what they are and the trade-offs between them we can make more educated decisions in our day-to-day work.</p>"},{"location":"Architecture/Reference/uid/#where-we-began","title":"Where we began:","text":"<p>Historically a lot of software has used incrementing numbers to represent the identifier of a particular piece of data. They can be auto-generated by many data stores, they are easy to reason about, are efficient to store and sort, are naturally time ordered, and can be easy to say (ex: \u201cHey Marsha, can you take a look at record 3162?\u201d). It is for many of these reasons that the industry used these identifiers for so long.</p> <p>That being said, there are also downsides to using incrementing numbers as identifiers especially as we start working in \u201cweb-scale\u201d applications. Due to the sequential nature of data you often aren\u2019t able to generate these identifiers concurrently. You could use techniques like skipping so many values for each generation and having different starting points for each generator or starting at different numbers but these all have various shortcomings as well versus a system that could generate identifiers without any coordination. If you separate the work of ID generation to another system that system could become a single point of failure and/or slow down the performance of your application as you need to make round trips between the requesting application and the ID generation system.</p> <p>Incrementing IDs also can lead to data leakage in that you now have easily guessable identifiers in URLs or other locations that people can exploit to test out your defenses. They can also divulge the size of your dataset. For example, if I sign up for an account with a website and the profile page\u2019s URL ends with <code>user/515</code>I can make the educated guess that there are 515 accounts on the service. The less information you can give an adversary the better. I have actually stumbled upon production systems that were easily exploitable via lacking authorization and using incrementable identifiers. This particular system included personal information about employees of another company and thankfully after disclosing this vulnerability to the company they were able to patch the issue. That is not to say if you were using a non-guessable identifier you don\u2019t need authorization checks but it does add another layer to get through.</p>"},{"location":"Architecture/Reference/uid/#uuids-to-the-rescue","title":"UUIDs to the rescue?","text":"<p>For all the above reasons many different applications needed to find another way to generate unique identifiers while allowing data hiding and scalability. Enter RFC 4122 UUIDs. UUID are identifiers backed by a 128-bit value typically expressed as a 32 hexadecimal characters generated via random or time-based means. They look something like: <code>93f9a654-7467-46de-9964-f30a66104dd9.</code>These identifiers have numerous benefits:</p> <ul> <li>Many different processes can generate identifiers concurrently without coordination with an extremely low chance of collisions.</li> <li>They are less guessable than sequential IDs.</li> <li>They don\u2019t give you a sense of the size of the dataset.</li> <li>They are still reasonably small when compared to a 32 random character identifier. They are also much easier for a database engine to compare than 32 characters of text.</li> </ul> <p>Given the definition of a UUID as a 128-bit number generated via time and randomness-based methods you may think there could be many ways of going about this and you would be correct. There are several official versions of UUID:</p> <ul> <li>Type 1 \u2014 ID is based on the generating host\u2019s MAC address and a timestamp. Reasonable choice for concurrent generation but falls flat on the low guessability spectrum.</li> <li>Type 2 \u2014 The often ignored version as there isn\u2019t a formal definition of it in the RFC and thus is ignored by many UUID tools but there is a definition provided by the DCE 1.1 Authentication and Security Services specification. It uses a host\u2019s MAC address, timestamp, a \u201clocal domain\u201d number, and \u201cinteger identifier meaningful within the specified local domain\u201d</li> <li>Type 3 \u2014 Generated via an MD5 hash of a provided input data. This allows the generation of the same UUID based on the same input.</li> <li>Type 4 \u2014 Entirely random data is used to generate the bits of the changing part of the UUID</li> <li>Type 5 \u2014 Like type 3 it is based on an input value but in this case it is SHA-1 hashed which is a better hashing algorithm for this use case than MD5 so it should be preferred over Type 3.</li> </ul> <p>Basically any modern language has built-in functionality to generate one or multiple of these types of UUIDs or there are readily available libraries to facilitate their generation. We also have first-class support for UUID in many database platforms.</p> <p>There are downsides to UUIDs though. Although they are reasonably small they still take up much more space than many other identifiers. Their random nature also makes them particularly troublesome for relational databases to handle as, especially if they are used in a clustered index, they can force the reordering in its internal data structures to put in new entries. In general this lack of built-in sortability based on time becomes the root of a lot of issues. In a lot of circumstances you may not already have another piece of data to sort based on and you are forced to add one because your identifier can\u2019t also facilitate the process even though it feels like it could.</p>"},{"location":"Architecture/Reference/uid/#a-world-beyond-uuids","title":"A World Beyond UUIDs","text":"<p>For the reasons above and many others, UUIDs aren\u2019t a one-size-meets-all solution. Thus, unsurprisingly, many other implementations of identifier generation have been created and there is an IETF RFC that details that a UUID version more appropriate to be used as a database key with an ordering component should be decided upon (update: they have a draft specification). As part of this RFC, it refers to a number of existing implementations as prior art. Let\u2019s consider a few of them:</p>"},{"location":"Architecture/Reference/uid/#ulid-reference","title":"ULID (reference)","text":"<p>Unique Lexicographically IDentifiers (ULID) are one such attempt at solving some of the above UUID issues. They are made up of two components, a Unix millisecond-level timestamp and a random portion put together like below.</p> <pre><code>01AN4Z07BY      79KA1307SR9X4MV3  \n\n|----------|    |----------------|  \n Timestamp          Randomness  \n   48bits             80bits\n</code></pre> <p>Benefits:</p> <ul> <li>Lexicographical (Alphabetical) sorting.</li> <li>Commonly encoded in 26 characters vs the 36 characters of UUID</li> <li>Monotonic sort order. (The code handles the case of multiple generations per millisecond and making sure they sort in that particular order)</li> <li>Being 128 bits they are compatible with UUIDs 128 bits.</li> </ul> <p>Downsides:</p> <ul> <li>They are required to be compared case insensitively. This could be a potential gotcha for implementing developers.</li> <li>They still weigh in at 128 bits making them no smaller than UUIDs.</li> </ul>"},{"location":"Architecture/Reference/uid/#snowflake-twitters-now-defunct-solution","title":"Snowflake (Twitter\u2019s now defunct solution)","text":"<p>Although it\u2019s no longer supported I think it\u2019s intriguing to look at Twitter\u2019s Snowflake service that they historically used for the generation of tweet IDs. Twitter seemed to be a trend setter with this solution as you will see below a lot of other solutions built on top of the ideas of Snowflake. Snowflake worked as a Thrift service that used Zookeeper to facilitate a cluster of services that could be used for quickly retrieving new identifiers.</p> <p>Benefits:</p> <ul> <li>The identifiers were 64 bits, half the size of UUIDs, allowing for more efficient storage.</li> <li>Fairly strong ordering guarantees.</li> <li>Distributed in a way that allows survival of losing a node.</li> </ul> <p>Downsides:</p> <ul> <li>It introduces the complexity of monitoring and maintaining a Zookeeper cluster which if a particular company didn\u2019t already have could be a large burden.</li> <li>You also need to maintain a cluster of identifier generation services (the actual Snowflake servers)</li> <li>The complexity and requirements of a distributed system are now part of your identitifer generation solution with cross cluster communication and other complexities.</li> </ul> <p>Although no longer supported, you can see the original code here.</p>"},{"location":"Architecture/Reference/uid/#flickrs-ticket-server-blog-post","title":"Flickr\u2019s Ticket Server (blog post)","text":"<p>This is much more of a pattern than a particular tool or library. The basic idea of the ticket server is to have a service that is backed by a database that has an auto incrementing column maintained by the database engine that gets meted out to requesters. Now you can focus exclusively on optimizing this very specific use case and put off much of the heavy lifting to the database engine. In Flickr\u2019s case, they load-balanced between two different service instances, one that did odd numbers and one that did even numbers to allow some resilience and load balancing.</p> <p>Benefits:</p> <ul> <li>You can set how big you want your identifier to be. (In Flickr\u2019s blog post they set it to 20 bits)</li> <li>There are minimal moving parts.</li> <li>It allows for some resilience if you break up the keyspace.</li> </ul> <p>Downsides:</p> <ul> <li>If you want to add more backing services it could be difficult as you need to change them all together so they don\u2019t clash.</li> <li>Strong ordering is only guarenteed only within a single keyspace so if you split it in half like Flickr did you can end up with half your key space quite divered from the other half of your keyspace.</li> <li>This is still the maintenance overhead of maintaining the ticket servers and DBs. Although less than something like Snowflake it is more than a lot of the other solutions that will be discussed.</li> </ul>"},{"location":"Architecture/Reference/uid/#lexicaluuid-part-of-cassie-from-twitter","title":"LexicalUUID (Part of Cassie from Twitter)","text":"<p>Twitter has put a lot of thought and work into unique ID generation as we see another reference to Twitter\u2019s tooling here in this list. This time as part of its client library for Cassandra. Unlike Snowflake, these are 128 bits like traditional UUIDs. The most significant 64 bits are a timestamp retrieved from Cassie\u2019s built-in internal clock implementation and the least significant 64 bits are based on the worker ID.</p> <p>Benefits:</p> <ul> <li>It does not seem to require any additional infrastructure like Snowflake.</li> <li>128 bits makes it compatible with other UUID implementations.</li> <li>Gives you a strong time ordering guarantee within the same worker and weak ordering guarantees across works.</li> </ul> <p>Downsides:</p> <ul> <li>Just as many bits as UUID</li> <li>Not strict ordering guarantees.</li> <li>Seems tightly coupled with the Cassie library.</li> </ul>"},{"location":"Architecture/Reference/uid/#flake-reference","title":"Flake (reference)","text":"<p>Another defunct tool/company but always something new to learn from these tools. As the name suggests this particular implementation takes its origins from Twitter\u2019s Snowflake discussed above. It however makes some changes. It moves back up to 128 bits and with that trade-off it can avoid any coordination between nodes. The results are still roughly time ordered. It is formatted as follows: 64 bit Unix timestamp, 48-bit worker ID (based on MAC address), and 16-bit sequence. It was also implemented in Erlang so that\u2019s another fun piece of information.</p> <p>Benefits:</p> <ul> <li>No coordination is needed between generation nodes.</li> <li>128 bit compatible with UUID</li> <li>Roughly time ordered.</li> </ul> <p>Downsides:</p> <ul> <li>Predictable by design (very much built like a UUIDv1 but done so that it can be roughly time sorted)</li> <li>Still 128 bits.</li> <li>Not exactly time ordered.</li> </ul>"},{"location":"Architecture/Reference/uid/#instagrams-shardingid-blog-post","title":"Instagram\u2019s ShardingID (blog post)","text":"<p>To make sense of Instagram\u2019s system you have to understand somewhat how they shard their databases. They have created thousands of \u201clogical\u201d shards of their data that each represents part of their data. These logical shards end up being schema\u2019s in their databases so they could have from 1 \u2014 # of shards physical database engines behind their data to split between. It\u2019s a fairly simple concept but a powerful one I would say. Instagram wanted to optimize for simplicity so they wanted to stay away from bringing in new tools and services to support. What they ended up with was a 64-bit identifier. The first 41 bits represent a timestamp in milliseconds (which gives them 41 years of IDs because they use a custom epoch), 13 bits as the logical shard id, and the final 10 bits serve as a sequence number for the value within the millisecond. They then wrote a custom PL/PGSQL function that generates these values within their database.</p> <p>Benefits:</p> <ul> <li>No coordination is needed between servers.</li> <li>Uses existing infrastructure</li> <li>64-bit identifier.</li> <li>Extremely simple to use.</li> </ul> <p>Downsides:</p> <ul> <li>Strongly relies on their logical sharding system.</li> <li>41 years doesn\u2019t seem like a whole lot of time to be acceptable.</li> </ul>"},{"location":"Architecture/Reference/uid/#ksuid-reference","title":"KSUID (reference)","text":"<p>Another generally sortable unique identifier generation tool. It uses 160 bits. A 32-bit timestamp and then 128 bits of random-based payload. It uses a modified epoch for its timestamp, giving it over 100 years of life. The text representation is 27 characters with the bits being encoded with base62 which makes it also generically time sortable via its string representation as well.</p> <p>Benefits:</p> <ul> <li>Coordination free</li> <li>Long life</li> </ul> <p>Downsides:</p> <ul> <li>At 160 bits it\u2019s larger than UUID\u2019s 128</li> </ul>"},{"location":"Architecture/Reference/uid/#elasticflake-reference","title":"ElasticFlake (reference)","text":"<p>This library is an extraction of the identifier generation code from ElasticSearch. It ends up being 120 bits with 48 bits of timestamp, a 48 bit MAC address, and 24 bits for a sequence at the end.</p> <p>Benefits:</p> <ul> <li>Slightly smaller than UUID</li> <li>Battle-hardened inside of ElasticSearch.</li> </ul> <p>Downsides:</p> <ul> <li>MAC addresses give predictability to identifiers.</li> </ul>"},{"location":"Architecture/Reference/uid/#flake-idgen-reference","title":"Flake IDGen (reference)","text":"<p>This identifier generation method brings in the concept of data centers as part of the identifier. The only reason I would think you would want this would be to be able to determine where an identifier was generated although I\u2019m not sure why that would be useful. This can be useful internally but also perpetuate one of the downsides of some of the UUID versions in that they expose information. These are generated as 64-bit identifiers with a 42-bit timestamp, a 5-bit datacenter identifier, a 5-bit worker identifier, and a 12 bit counter.</p> <p>Benefits:</p> <ul> <li>Only 64 bits.</li> <li>Allows tracking back to which data center generated an identifier.</li> </ul> <p>Downsides:</p> <ul> <li>Less room for workers and sequence counts.</li> <li>Exposes more information than a lot of the other methods.</li> </ul>"},{"location":"Architecture/Reference/uid/#sonyflake-reference","title":"Sonyflake (reference)","text":"<p>Next, we get Sony\u2019s take on Twitter\u2019s Snowflake pattern. This time we have 63 bits which is intriguing. Another interesting piece to this one is that the timestamp is scoped down to 10-millisecond buckets rather than down to the millisecond like most of the other systems discussed here. This gives it a longer life (174 years). The bit layout is as follows: 39 bits of timestamp, 8 bits for sequence numbers, 16 bits as a worker ID.</p> <p>Benefits:</p> <ul> <li>Quite small.</li> <li>Coordination free.</li> <li>Long life (174 years)</li> <li>Can handle more workers than Snowflake.</li> </ul> <p>Downsides:</p> <ul> <li>Timestamp can only be scoped to 10-millisecond buckets.</li> <li>Fewer identifiers can be generated in a particular 10 millisecond period due to smaller sequence.</li> </ul>"},{"location":"Architecture/Reference/uid/#ordereduuid-reference","title":"OrderedUUID (reference)","text":"<p>We now look at Laravel\u2019s OrderedUUID. This one takes the unique goal of wanting to look and act like a UUIDv4 that just so happens to have time-based higher-order bits. This being the goal its String representation looks exactly like a UUIDv4 and it includes the version and variant identifiers required by the UUID specification. The way it is built however is different. The first 48 bits are the timestamp, it has 72 bits of randomness, and then the UUIDv4 required pieces take up the remaining 8 bits.</p> <p>Benefits:</p> <ul> <li>No coordination is needed.</li> <li>Identical to UUIDs, thus support is not needed for a new scheme for consumers of the IDs.</li> </ul> <p>Downsides:</p> <ul> <li>Still 128 bits.</li> <li>Being so identical to UUIDv4 I think it could be easy to mix up and not be able to tell what you were looking at.</li> <li>Exposes generation time if that is a concern (it does not expose a sequence though)</li> </ul>"},{"location":"Architecture/Reference/uid/#combguid-reference","title":"COMBGUID (reference)","text":"<p>These identifiers come from the SQL Server world. Presented with the problems of clustered indexes as well as the shortcomings of <code>newsequentialid</code> with not having true ordering, this identifier was born. This identifier devotes 76 bits to randomness and 48 bits to the timestamp, the last 4 bits are for the UUID identifier.</p> <p>Benefits:</p> <ul> <li>Generally ordered IDs.</li> <li>Looks like and validates like a UUID</li> </ul> <p>Downsides</p> <ul> <li>Timestamp goes down to the 1/300th of a second which isn\u2019t millisecond precision that others provide.</li> </ul>"},{"location":"Architecture/Reference/uid/#pushid-reference","title":"pushID (reference)","text":"<p>This one comes to us courtesy of Google, specifically Firebase. These IDs are used to allow extremely concurrent interactions with a data structure by many remote clients. These identifiers are generated client-side and are 120 bits. The first 48 bits represent a millisecond precision timestamp and the following 72 bits are random bits. They also can handle generation within the same millisecond by simply incrementing the random bits. With clients creating the timestamps I think the ordering guarantees in this system are probably weaker than environments where the timestamp generation is more tightly controlled but it is still likely generally in the right direction.</p> <p>Benefits:</p> <ul> <li>Only 120 bits.</li> </ul> <p>Downsides:</p> <ul> <li>Client-side generation of this particular implementation brings its own troubles.</li> </ul>"},{"location":"Architecture/Reference/uid/#objectid-reference","title":"ObjectId (reference)","text":"<p>Now we have an identifier generation from MongoDB. This one weighs in at 96 bits. We have 32 bits of timestamp, 40 bits of randomness, and 24 bits of an incrementing value initialized to a random value. All of this is represented in a 24 character hexadecimal string.</p> <p>Benefits:</p> <ul> <li>96 bits is smaller than many options.</li> </ul> <p>Downsides:</p> <ul> <li>On the lower side of random bits.</li> </ul>"},{"location":"Architecture/Reference/uid/#xid-reference","title":"xid (reference)","text":"<p>This claims to be an iteration on Mongo\u2019s ObjectId discussed above and simply changes the encoding scheme to String to instead use Base32 hex to take the string representation from 24 to 20 characters long. That being said, it does describe its bit structure differently than ObjectId does. Its bits are laid out as follows: 32-bit timestamp, 24-bit machine identifier, 16-bit process id, and 24-bits as an incrementing value starting at a random value.</p> <p>Benefits:</p> <ul> <li>Smaller string representation than ObjectId and smaller than most.</li> <li>96 bits is smaller than many options</li> <li>Claims to be bit compatible with ObjectId</li> </ul> <p>Downsides:</p> <ul> <li>No randomness thus it is very predictable.</li> </ul>"},{"location":"Architecture/Reference/uid/#cuid-reference","title":"cuid (reference)","text":"<p>This identifier generation process seems to be focused on the text representation along with order. It comes out with a 25 character identifier with the following structure. Always starts with the character <code>c</code> , eight characters of timestamp, a four-digit counter that rolls over, four characters for a client fingerprint, and 8 characters of randomness.</p> <p>Benefits:</p> <ul> <li>Seems to have first-class support for generation via client-side Javascript.</li> <li>Less focus on the actual bits makes it a little easier to reason about.</li> </ul> <p>Downsides:</p> <ul> <li>Seems to be more of a wild west of what all the pieces mean and how they are encoded. (ex: How do you create a client fingerprint, etc)</li> </ul>"},{"location":"Architecture/Reference/uid/#so-which-one-do-we-choose","title":"So which one do we choose?","text":"<p>There are a ton of options to choose from. Some are extremely different in their implementations and some are only different in the slightest of ways. What is clear is you need to know what you are optimizing for in your environment before choosing a identifier generation algorithm. Are you looking for the absolute smallest space-taking identifier possible? Are you trying to use the same tools you are already using or are you open to bringing in new tools? How many identifiers will be generated in a second? How in order should they attempt to be? All important questions and the answers will be different for each environment. I love how much sharing of ideas there is in the world and how we can learn from all of these uses cases and we all can build on the shoulders of those that went before us.</p>"},{"location":"Architecture/Reference/uid_comparison/","title":"Globally Unique Identifier a fair comparison","text":"<p>The idea behind this article is to share the little I learned about GUID implementations and provide education to others.</p> <p>Disclaimer: Although I carry good security foundations, I am not a cryptography expert, please take this data with a grain of salt and build your own opinions.</p>"},{"location":"Architecture/Reference/uid_comparison/#why-do-you-need-a-guid","title":"Why do you need a GUID?","text":"<p>GUID (Globally Unique Identifier) are generators for identifiers typically used as primary keys in databases. GUID solve problems typically inherent to three tiers architectures, more precisely:</p> <ol> <li>Scalability \u2014 growing hardware vertically has its limits, soon or later multiple instances are required to sustain the load. Centralized id generators have a significant (negative) impact on performance. GUID typically allow distributing generators across multiple instances.</li> <li>Resilience \u2014 the ability to run multiple instances of a generator is a great way to improve its availablity and avoid a single point of failure.</li> <li>Security \u2014 sequences are trivial to predict, in a distributed world different sources of entropy are used to guarantee uniqueness via a random, difficult to predict (long) string.</li> </ol>"},{"location":"Architecture/Reference/uid_comparison/#how-are-guid-different-from-db-sequences","title":"How are GUID different from DB SEQUENCES?","text":"<p>Sequences is a RDBMS centric solution to ease primary key generation.</p> <p></p> <p>Sequences vs GUID</p> <p>Sequence were great for a single database supporting an internal application to local users. Nowadays, OLTP data is secured, distributed, scalable and exposed to the world. These is still place for them in a DWH or other data OLAP storages.</p> <p>Since this article is about GUID I wont\u2019 extend more on this topic, I added a great article \u2014 The hidden dangers of numerical IDs</p>"},{"location":"Architecture/Reference/uid_comparison/#what-are-the-categories-of-guid","title":"What are the categories of GUID?","text":"<p>There are mainly two categories of GUIDs: Opaque and time-based. Time based GUID trade a few bits of entropy to encode a date, they are therefore more efficient to index at the cost of a shorter randomness range.</p> <p></p> <p>Opaque vs Time-based GUID</p>"},{"location":"Architecture/Reference/uid_comparison/#features-benefits-shortcomings","title":"Features, Benefits &amp; Shortcomings","text":"<p>The table below provides a comprehensive comparison between the major GUID implementations.</p> <p></p> <p>GUID Comparison table, Please click on this link for the full version</p>"},{"location":"Architecture/Reference/uid_comparison/#benchmark","title":"Benchmark","text":"<p>Disclaimer, these benchmark are performed against a given architecture (JavaScript/Arm), different implementations/runtimes will likely give different results. <pre><code>Platform info:  \n\\==============  \n  Darwin 22.2.0 arm64  \n  Node.JS: 18.12.1  \n  V8: 10.2.154.15\\-node.12  \n  CPU: Apple M1 Pro \u00d7 8  \n  Memory: 16 GB  \n\u200b  \nRunning \"GUID Benchmark\" suite...  \nProgress: 100%  \n\u200b  \nuuid v1:  \n  4 460 889 ops/s, \u00b10.57%   | 63.99% slower  \n\u200b  \nuuid v4:  \n  8 870 032 ops/s, \u00b10.54%   | 28.41% slower  \n\u200b  \nuuid v7:  \n  443 205 ops/s, \u00b10.82%     | 96.42% slower  \n\u200b  \nnanoid:  \n  5 300 343 ops/s, \u00b10.48%   | 57.22% slower  \n\u200b  \ncuid:  \n  347 037 ops/s, \u00b11.15%     | 97.2% slower  \n\u200b  \ncuid2:  \n  60 490 ops/s, \u00b10.52%       | slowest, 99.51% slower  \n\u200b  \nulid (monotonic):  \n  12 389 427 ops/s, \u00b10.64%   | fastest  \n\u200b  \nxid:  \n  3 417 174 ops/s, \u00b10.41%   | 72.42% slower  \n\u200b  \nksuid:  \n  532 223 ops/s, \u00b11.02%     | 95.7% slower  \n\u200b  \nFinished 9 cases!  \nFastest: ulid (monotonic)  \nSlowest: cuid2\n</code></pre></p> <p></p>"},{"location":"Architecture/Reference/uid_comparison/#thoughts-beyond-theory","title":"Thoughts beyond theory","text":"<p>At this point you should have a pretty good idea of the different implementations and how they compare. Let us add some context...</p>"},{"location":"Architecture/Reference/uid_comparison/#are-csprng-implementations-broken","title":"Are CSPRNG implementations broken?","text":"<p>Some were, others are, mostly in (old) browsers.</p> <p>Remember that, even if ID generation takes place server side, where implementations are more stable and uniform: you must be vigilant. Here is a security post on the topic regarding NodeJS (2015).</p>"},{"location":"Architecture/Reference/uid_comparison/#is-randomness-a-pledge-for-security","title":"Is Randomness a pledge for security?","text":"<p>Machines run algorithms that approximate randomness by selecting algorithms and trusted entropy sources. A cryptographically secure pseudo-random number generator (CSPRNG) is a algorithm with properties that make it suitable for use in cryptography. On Linux for instance, the kernel gathers noisy data from various devices and transfers them to an internal pool of entropy.</p> <p>Unfortunate, not all cryptography stacks are equal. For instance, old versions of CSPRNG are famous for their poor implementations in JavaScript or PHP. Algorithms such as SHA1 also proved to be unsecured but are still used today in some GUID generators.</p> <p>While ensuring that a GUID generator is cryptography certified is important, an ID is nothing in view of a proper security architecture.</p>"},{"location":"Architecture/Reference/uid_comparison/#what-are-the-odds-of-a-collisions","title":"What are the odds of a collisions?","text":"<p>The answer depends on the use case and the specifics of a GUID implementation</p> <p>With that said, the advertised Math is probably not a good reflection of reality: In an application, a GUID is used to create a multitude of different entities. These entities by definition do not overlap with one another and are therefore in their own space, further reducing the chances of collisions.</p>"},{"location":"Architecture/Reference/uid_comparison/#is-there-a-risk-to-leak-the-id-generation-date","title":"Is there a risk to leak the id generation date?","text":"<p>It all depends on requirements.</p> <p>From a legal standpoint, some will argue that the ID generation date is PII data. While this classification could not be validated, a lawyer friend of mine found the argument difficult to defend in a court without considering the complete architecture.</p> <p>From a security standpoint, very unlikely but it depends on your use case. Zendesk recently wrote an article on the topic, recommended.</p>"},{"location":"Architecture/Reference/uid_comparison/#is-there-a-way-to-mitigate-security-and-performance","title":"Is there a way to mitigate security and performance?","text":"<p>There are designs which leverage different GUID implementations where they best fit. For instance, it is common in cloud database nowadays to provide an out of the box time-based guid. if this implementation is not sufficient to satisfy security requirements, the notion of internal and external id can be implemented on entities.</p> <p></p>"},{"location":"Architecture/Reference/uid_comparison/#is-generation-performance-a-key-factor","title":"Is generation performance a key factor?","text":"<p>In complete honesty, it\u2019s probably not. The fact is, in terms of pseudo-random generation, velocity is generally not a factor of security. Besides even the slowest implementation still generates ids at 60000 ops/s on a single machine.</p>"},{"location":"Architecture/Reference/uid_comparison/#how-to-choose","title":"How to choose?","text":"<p>With so many dimensions, what are the points to consider?</p> <ol> <li>entropy length \u2014 this has direct impact on collisions and predictability, I would recommend avoiding anything with an entropy length &lt; 62 bits unless you understand what you are doing.</li> <li>random generator quality \u2014 not all random generators are made equal, ensure the implementation uses a cryptography secure random. Do not trust! again DO NOT trust!</li> <li>scalability \u2014 with so many options available, I would recommend an implementation which can scale horizontally.</li> </ol> <p>The remaining decision points are specific to your requirements.</p> <p>When ids are stored in a RDBMS database, I had successes with ULID and UUIDv7, for transient ids typically stored in memory or in the browser, I would recommend nanoid.</p>"},{"location":"Architecture/Reference/uid_comparison/#conclusion","title":"Conclusion","text":"<p>We reached the end of this article. We learned that picking the right GUID flavor depends entirely on your requirements. You should be vigilent to the constraints of your specific use case, the data being leaked (if any), the CSPRNG implementation it uses or if you plan to store it as a primary key.</p> <p>If you are still stuck on the UUID vs Sequence as primary key, I added an excellent article in the appendix sections below. In the end it\u2019s (Security, Scalability &amp; Resilience) vs Performance.</p>"},{"location":"Architecture/Reference/uid_comparison/#appendix","title":"Appendix","text":""},{"location":"Architecture/Reference/uid_comparison/#articles-of-interests","title":"Articles of interests","text":"<ul> <li>From UUID to ULID, be prepared</li> <li>New UUID formats</li> <li>CUID2</li> <li>Identity Crisis: Sequence v. UUID as Primary Key</li> <li>The hidden dangers of numerical IDs</li> </ul>"},{"location":"Architecture/Reference/uid_comparison/#definitions","title":"Definitions","text":"<p>This section helps clarify some of the terms used in this document.</p> <p>Collisions</p> <p>A hash collision is a random match in hash values that occurs when a hashing algorithm produces the same hash value for two distinct pieces of data.</p> <p>Coordination</p> <p>The communication between the different elements of a complex activity so as to enable them to work together effectively.</p> <p>Entropy</p> <p>In Cryptography, refers to the randomness collected by a system for use in algorithms that require random seeds. (jargon word for \u201crandomness\u201d)</p> <p>Monotonic</p> <p>A monotonic generator ensures ids are always sorted in order. This term is particularly relevant to date based guid generators which are based on time. For a given instance, at instant T, the next id should always be sorted.</p> <p>Opaque</p> <p>An opaque identifier is one that doesn\u2019t expose its inner details or structure.</p> <p>Pagination</p> <p>Pagination is a process that is used to divide a large data into smaller discrete pages. Commonly used in customer facing applications, pagination requires the notion of pointers on the dataset.</p> <p>Predictable</p> <p>A random number generator is predictable if, after observing some of its \u201crandom\u201d output, we can make accurate predictions about what \u201crandom values\u201d are coming up next.</p> <p>Randomness</p> <p>Randomness (entropy) is the cornerstone of cryptography. The more random the numbers, the more secure the cryptographic system. The challenge then, becomes one of generating true randomness.</p>"},{"location":"Architecture/Reference/what-is-MACH/","title":"A Comprehensive Guide to MACH Architecture in 2023","text":""},{"location":"Architecture/Reference/what-is-MACH/#mach-microservices-based-api-first-cloud-native-and-headless","title":"MACH: Microservices-Based, API-First, Cloud-Native, and Headless","text":"<p>In the tech world, change is constant.</p> <p>Technologies come and go, and what was once cutting-edge is replaced by the new and improved. It\u2019s no secret that the technology landscape is constantly evolving, so it\u2019s important for organizations to plan ahead and stay ahead of the curve.</p> <p>Then the question is, how do you stay ahead of the curve when new technologies are introduced daily?</p> <p>This is where the MACH Architecture comes into the picture. MACH architecture is</p> <ul> <li>agile</li> <li>flexible</li> <li>future-proof</li> <li>scalable</li> </ul> <p>For all these reasons, it\u2019s no secret that MACH architecture is on the rise. With its growing popularity, many people are curious about MACH architecture and how it works.</p> <p>In this comprehensive guide, we\u2019ll look at MACH architecture, how it works, and what benefits it can offer your business in 2023.</p> <p>Whether you\u2019re just starting out with MACH architecture or you\u2019re looking to expand your knowledge base, this guide has everything you need to get up to speed.</p>"},{"location":"Architecture/Reference/what-is-MACH/#what-is-mach-technology","title":"What Is MACH Technology?","text":"<p>If you\u2019re not familiar with composable digital experience space, you might ask yourself, \u2018what does MACH mean?\u2019 MACH is an acronym that stands for:</p> <ul> <li>Microservices-Based</li> <li>API-First</li> <li>Cloud-Native</li> <li>Headless</li> </ul> <p>The MACH technology is a powerful approach to software development that focuses on developing microservices-based, API-first, cloud-native applications that are headless. This innovative approach allows developers to create highly scalable, efficient, and flexible applications that can easily adapt to changing business needs.</p> <p>The MACH technology stems from the principles of agile development, which emphasizes rapid delivery and continuous improvement. By breaking down large applications into smaller modular units called microservices, MACH enables teams to iterate quickly and respond effectively to new requirements or changes in the market.</p>"},{"location":"Architecture/Reference/what-is-MACH/#microservices-based","title":"Microservices-Based","text":"<p>Microservices is an approach to software development whereby an application is decomposed into a number of small, independently developed, and deployable services.</p> <p>This approach has a number of benefits over traditional, monolithic development techniques.</p> <p>Firstly, it enables much greater flexibility in terms of deployment and scalability. Secondly, it allows for greater reuse of code and easier maintenance. Finally, it facilitates a more rapid development cycle as features can be developed and deployed independently of one another.</p> <p>As a result, microservices-based applications are becoming increasingly popular, particularly in the cloud computing domain.</p>"},{"location":"Architecture/Reference/what-is-MACH/#api-first","title":"API-First","text":"<p>An API-First approach is a strategy for designing and developing software applications in which the application\u2019s programming interface (API) is given priority over other components.</p> <p>The advantage of this approach is that it allows developers to create an API that can be easily integrated into other software applications, making it easier to share data and functionality between different systems.</p> <p>In addition, using an API-first approach can also help to ensure that the application\u2019s UI is consistent with the underlying API, making it easier for users to understand and use the application.</p>"},{"location":"Architecture/Reference/what-is-MACH/#cloud-native","title":"Cloud-Native","text":"<p>The term \u201cCloud-Native\u201d is used to describe applications that are designed specifically for deployment in the cloud.</p> <p>Cloud-Native apps are typically built using microservices, which are small, self-contained components that can be deployed and scaled independently. This approach differs from traditional monolithic applications, which are large and complex, with tightly coupled dependencies.</p> <p>Cloud-native apps are also designed to be highly resilient, with each microservice being independently scalable and replaceable. This approach enables organizations to quickly adapt to changing conditions and ensure that their apps remain available even in the event of an outage.</p> <p>As the demand for cloud-based applications continues to grow, the need for cloud-native solutions will become increasingly important.</p>"},{"location":"Architecture/Reference/what-is-MACH/#headless","title":"Headless","text":"<p>Headless architecture is a type of software architecture that decouples the front-end user interface from the back-end logic enabling a framework-agnostic technology structure.</p> <p>In a headless system, the backend provides an API that delivers content to the frontend. This separation of concerns allows for greater flexibility and scalability.</p> <p>By decoupling the frontend and backend, developers can more easily make changes to either one without affecting the other. This approach also makes it easier to scale individual components of the system as needed.</p>"},{"location":"Architecture/Reference/what-is-MACH/#mach-alliance","title":"MACH Alliance","text":"<p>The MACH Alliance is a global industry consortium of forward-thinking organizations that are committed to driving innovation in the rapidly evolving digital landscape and promoting the development of enterprise technology ecosystems that are open and of the best of the breed.</p> <p>At its core, MACH Alliance is about educating the industry as a whole on what to watch out for while shifting away from legacy infrastructure and turning composable, and helping businesses stay competitive in an increasingly digital world. By embracing emerging technologies like microservices, MACH members gain a significant edge over their competitors by being able to quickly develop and deliver new products and services to customers at scale.</p> <p>Overall, MACH Alliance is at the forefront of innovation in the digital space, empowering businesses all around the world to thrive in the age of digital transformation. Whether you\u2019re an established enterprise looking for new ways to build competitive advantage or a startup looking for support and guidance as you navigate the rapidly changing digital landscape.</p>"},{"location":"Architecture/Reference/what-is-MACH/#mach-architecture","title":"MACH Architecture","text":""},{"location":"Architecture/Reference/what-is-MACH/#what-is-mach-architecture","title":"What Is MACH Architecture?","text":"<p>The MACH architecture is a software architecture that is composed of independent components, meaning it is built from smaller components that can be combined to form a complete system.</p> <p>This composability allows software systems to be built from interchangeable parts that can be composed into various configurations. The advantage of this approach is that it allows different parts of the system to be continuously improved and optimized for specific purposes, which can lead to better performance and experience overall.</p>"},{"location":"Architecture/Reference/what-is-MACH/#what-are-the-benefits-and-advantages-of-mach-architecture","title":"What Are the Benefits and Advantages of MACH Architecture?","text":"<p>The advantages and benefits of MACH architecture include the following:</p> <p>Scalability</p> <p>MACH architecture is a type of software architecture that is designed to be scalable. One of the benefits of this design is that it can easily be adapted to meet the changing needs of an organization.</p> <p>For example, if an organization needs to grow, the MACH technologies can be scaled up to accommodate the additional load.</p> <p>Flexibility and Composability (Tailor-Made Architecture )</p> <p>Additionally, MACH architecture is also designed to be flexible, meaning that it can be easily modified with the best-of-breed solutions to fit an organization\u2019s specific requirements.</p> <p>This flexibility makes MACH solutions ideal for organizations that need to respond to changes in their business environment rapidly.</p> <p>As a result, the MACH technology stack provides organizations with a high degree of scalable and flexible enterprise technologies, making it a popular choice for many businesses.</p> <p>Future-Proof</p> <p>The need for faster and more efficient data and content processing will only grow as the world becomes increasingly digitized.</p> <p>MACH ecosystem technologies are designed to meet this demand by providing a scalable and flexible architecture that can be easily adapted to changing needs.</p> <p>Additionally, the MACH technology stack is also highly future-proof, meaning that it can be used for years to come without becoming outdated. This is due to its modular design, which allows new components to be added as needed.</p> <p>As a result, businesses investing in MACH-first software can be confident that they are making a sound investment that will pay off for years.</p> <p>Faster Time to Market</p> <p>MACH architecture is a microservices-based approach that enables organizations to develop and deploy software faster.</p> <p>By breaking down applications into small, independent services that can be developed and deployed independently, MACH reduces the time it takes to get new features and functionality to market.</p> <p>In addition, because MACH services are loosely coupled, they are easier to change and update, reducing the risk of errors and making it easier to roll out new features and functionality quickly and efficiently.</p> <p>As a result, MACH can help organizations to achieve faster time-to-market, increased agility, and better overall software quality.</p>"},{"location":"Architecture/Reference/what-is-MACH/#challenges-about-mach-architecture","title":"Challenges About MACH Architecture","text":"<p>The MACH architecture has been widely increasing its adoption in recent years as a future-proof, high-performance alternative to traditional architectures. However, MACH architectures are not without their challenges:</p> <ul> <li>What you see is NOT what you get.</li> <li>Coordination problems between software providers.</li> <li>Lack of collaboration between business and development teams.</li> </ul>"},{"location":"Architecture/Reference/what-is-MACH/#traditional-monolith-architecture-vs-mach-architecture","title":"Traditional (Monolith) Architecture vs. MACH Architecture","text":"<p>Digital experience platforms are powerful tools to create, manage, and organize customer expectations. However, monolith architectures have some serious limitations in meeting evolving business requirements.</p> <p>The problem is that most monolith architectures don\u2019t offer the flexibility or features for the upcoming needs of business functionality. MACH architecture is a perfect solution for businesses looking to get the most out of their digital experience efforts.</p> <p></p>"},{"location":"Architecture/Reference/what-is-MACH/#adoption-of-mach-architecture-and-mach-technologies","title":"Adoption of MACH Architecture and MACH Technologies","text":"<p>The study, published in March 2022, surveyed over 200 senior-level technology decision-makers from companies around the world to gauge awareness and adoption of MACH technology.</p> <p>The findings of the \u2018Enterprise MACHified\u2019 are a strong indication that MACH is gaining momentum in the market and is poised to have a significant impact on the enterprise software landscape.</p> <ul> <li>Decision makers put a high value on offering superior CX quickly in the face of rapidly growing expectations.</li> <li>The move to MACH is being driven by CX, market developments, and privacy/security concerns.</li> <li>MACH\u2019s motivations are closely connected to those who believe they are ahead of their competitors.</li> </ul> <p>Let\u2019s deep dive into this research to explore how top decision-makers for corporate organizations see MACH architecture:</p> <p>Decision makers see MACH as the future of architecture.</p> <p></p> <p>MACH intentions are strongly correlated with perceptions of outpacing competitors.</p> <p>75% of respondents think that they\u2019re ahead of the competition \u2014 one-third believe their organization is significantly ahead of the competition, while two-fifths say they are slightly ahead of their competitors.</p> <p>Increased customer experience, faster adaptation, and improved privacy/security are driving reasons for the transition to MACH.</p> <p>The customer experience is the backbone of most businesses. Providing a great customer experience increases your customers\u2019 likelihood to interact positively with you. For this reason, it\u2019s a leading factor why increasing customer experience is one of the top reasons for switching to a MACH platform, with 60% ranking it as a number one priority.</p> <p></p> <p>In today\u2019s business world, change is the only constant. Markets shift and evolve at an ever-increasing pace, and businesses must be able to adapt just as quickly to stay competitive. That\u2019s why responding to changes in the market faster (59%) and building and implementing new functionality quicker (54%) are other significant reasons for the transition to MACH.</p> <p>Last but not least, improved privacy (56%) is another major reason for choosing MACH solutions over traditional ones.</p> <p>Barriers to MACH are more likely to be around implementation.</p> <ul> <li>Two-fifths (39%) of decision-makers said resistance to change from their development team is their main barrier to moving to a MACH-based infrastructure.</li> <li>35% of companies rely more on their current vendors for business continuity, suggesting that existing B2B relationships impact business function.</li> <li>A third (33%) are unclear about the trade-off between initial investment and long-term benefits.</li> </ul>"},{"location":"Architecture/Reference/what-is-MACH/#how-to-evaluate-mach-architecture-and-mach-technologies","title":"How to Evaluate MACH Architecture and MACH Technologies","text":"<p>The MACH architecture provides a number of benefits that make it an attractive option for businesses. Perhaps most importantly, it is designed to be scalable, making it easy to add new applications without needing to reconfigure the entire system. This highly modular architecture allows businesses to customize their deployment to meet their specific needs.</p> <p>When evaluating the MACH architecture, businesses should consider their specific needs and requirements. Here are a couple of questions you can ask when evaluating a potential MACH tool:</p> <ol> <li>Can you add and replace services gradually over time?</li> <li>Does it support adding or replacing best-of-breed systems and services independently?</li> <li>Is it created using APIs from the ground up, or is an API built later?</li> <li>Can you access technical documentation (demonstrating platform capabilities and resources) easily?</li> <li>In terms of cloud infrastructure, does it have infinite scalability?</li> <li>Do updates and upgrades take place through continuous delivery without causing any disruptions?</li> <li>Can you freely and flexibly design and deploy the user experience?</li> </ol> <p>With MACH architecture, businesses can digitally transform and evolve with the future. This is an essential technology for any company that wants their business in line with new trends as they come about.</p>"},{"location":"Architecture/Reference/what-is-MACH/#is-mach-architecture-the-future-of-digital-customer-experience","title":"Is MACH Architecture the Future of Digital Customer Experience","text":"<p>MACH is a new approach to digital customer experience that is gaining popularity among businesses.</p> <p>Unlike traditional monolithic architectures, MACH separates each component of the customer experience into its own microservice that enables to use of full capabilities. This allows businesses to update their customer experience more quickly and easily without having to redeploy the entire system.</p> <p>Additionally, MACH provides greater flexibility, capabilities, and scalability than monolithic architectures, making it well-suited for businesses that are growing quickly.</p> <p>While MACH is still relatively new, it has already been adopted by some of the world\u2019s leading companies and is widely considered to be the future of digital customer experience. As a result, it is not surprising that MACH architecture is quickly becoming the new standard for digital customer experience.</p>"},{"location":"Architecture/Reference/what-is-the-C4-model/","title":"Architecture Method : C4 Model","text":""},{"location":"Architecture/Reference/what-is-the-C4-model/#what-is-the-c4-model","title":"What is the C4 Model?","text":"<p>The C4 model is a framework used in software engineering to visualize and describe the architecture of software systems. Developed by Simon Brown, it stands for \u201cContext, Containers, Components, and Code,\u201d which represent different levels of granularity for depicting a system\u2019s architecture.</p>"},{"location":"Architecture/Reference/what-is-the-C4-model/#context","title":"Context","text":"<p>The purpose of this section is to offer a global perspective of the system, highlighting its interactions and connections with external entities such as users, emailing system and other external systems. Here are some keypoints :</p> <p>Stakeholders: Business and system analysts, product owners, team leads, and new team members.</p> <p>Strategic Overview: The context provides a strategic view of the system, highlighting how it fits into and interacts with the broader business environment. This perspective is vital for stakeholders to see the system not as an isolated entity but as a part of a larger business process or ecosystem.</p> <p>Clarification of Boundaries: By outlining the system\u2019s interactions with external entities, the context clarifies the system\u2019s boundaries. This understanding is crucial for identifying potential areas of risk, dependencies, and integration points.</p> <p>Guidance for Design and Development: Understanding the context guides both the design and development of the system. It ensures that the system is aligned with business goals and user needs, making it more effective and user-centric.</p> <p>Facilitates Stakeholder Communication: The context provides a common language and understanding for diverse stakeholders, including business executives, users, and technical teams, fostering better communication and alignment on the system\u2019s objectives. It is a moment when the approach of Domain Driven Design becomes very useful.</p> <p></p> <p>Example of a context schema</p>"},{"location":"Architecture/Reference/what-is-the-C4-model/#containers","title":"Containers","text":"<p>This section aims to depict the high-level technological decisions made for the system, detailing key components such as web servers, databases, file systems, and other integral elements that constitute the system\u2019s architecture. Here are some keypoints :</p> <p>Stakeholders: Developers, architects, tech leads and operations teams.</p> <p>Architecture Overview: Containers offer a high-level view of the system architecture, presenting the main technologies and platforms used. This is vital for new team members, external partners, or anyone needing a quick understanding of the system\u2019s technical makeup.</p> <p>Decision-Making Framework: Understanding the containers helps in making informed decisions about scaling, security, and resource allocation. It also aids in evaluating the impact of potential changes or additions to the technology stack.</p> <p>Risk Assessment: By identifying the key technologies and their interactions, it becomes easier to assess and manage risks associated with technology choices, such as vendor lock-in, scalability issues, or security vulnerabilities.</p> <p>Optimization Opportunities: This understanding enables identifying optimization opportunities, such as improving performance, reducing costs, or simplifying the technology stack.</p> <p></p> <p>Example of a container schema</p>"},{"location":"Architecture/Reference/what-is-the-C4-model/#components","title":"Components","text":"<p>This section is designed to provide a deeper understanding of the system\u2019s fundamental components, illustrating the main elements within each container and how they interact with one another. Here are some keypoints :</p> <p>Stakeholders: Development teams (including developers and software architects).</p> <p>Detailed Architectural Insight: Provides a detailed insight into the architectural layout of the system, illustrating how different parts of the system work together. This is critical for both maintaining existing features and planning new development. Here are some keypoints :</p> <p>Facilitates Modular Development: Understanding components aids in modularizing development, allowing teams to work on different parts of the system simultaneously without causing conflicts or dependencies.</p> <p>Improves Quality and Maintainability: A clear view of components allows for better quality control, easier bug tracking, and more efficient maintenance. It also aids in identifying redundant or outdated parts of the system that need refactoring.</p> <p>Foundation for Scalability: A detailed understanding of components is essential for scaling the system effectively, ensuring that each component can handle increased load and complexity.</p> <p></p> <p>Example of a component schema for the Back for Frontend component</p>"},{"location":"Architecture/Reference/what-is-the-C4-model/#code","title":"Code","text":"<p>This section presents the most detailed layer of the system, focusing on the actual implementation. It typically includes UML diagrams or similar representations to illustrate how the various components of the system are implemented. Here are some keypoints :</p> <p>Stakeholders: Development teams (including developers and software architects).</p> <p>Ground-Level Understanding: Provides the most granular level of understanding, essential for day-to-day development work. It helps developers understand exactly how functionalities are implemented and interact at the code level.</p> <p>Enhances Problem-Solving: With a detailed view of the code, developers can more effectively troubleshoot issues, optimize performance, and ensure code quality.</p> <p>Facilitates Onboarding and Knowledge Transfer: Detailed code documentation is crucial for onboarding new team members, helping them to quickly understand how the system works at a practical, hands-on level.</p> <p>Enables Continuous Improvement: Understanding the code is key to continuous improvement practices like refactoring, as it allows developers to identify areas for enhancement and implement changes without unintended side-effects.</p>"},{"location":"Architecture/Reference/what-is-the-C4-model/#benefits","title":"Benefits","text":""},{"location":"Architecture/Reference/what-is-the-C4-model/#clarity","title":"Clarity","text":"<p>Comprehensive View: Offers a multi-level understanding of the system, aiding in strategic planning and reducing errors by highlighting potential design issues early.</p> <p>Decision-Making Support: Enhances informed decision-making regarding design, technology, and resource allocation.</p>"},{"location":"Architecture/Reference/what-is-the-C4-model/#communication","title":"Communication","text":"<p>Unified Framework: Creates a common language for discussions among diverse stakeholders, enhancing collaboration and engagement across teams.</p> <p>Stakeholder Alignment: Improves alignment on project goals and expectations, crucial for project success.</p>"},{"location":"Architecture/Reference/what-is-the-C4-model/#documentation","title":"Documentation","text":"<p>Systematic Record: Provides structured, standardized documentation, essential for reference, compliance, and future enhancements. Tools such as ADR (Architecture Decision Record) could be very usefull to maintain documentation up to date using a detailed methodology.</p> <p>Knowledge Base: Acts as a valuable knowledge repository for training and guiding new team members. This is a very important point. This kind of knowledge could be a great time saver and also prevent some technical debt from arising.</p>"},{"location":"Architecture/Reference/what-is-the-C4-model/#trade-offs","title":"Trade-offs","text":""},{"location":"Architecture/Reference/what-is-the-C4-model/#complexity","title":"Complexity","text":"<p>Detail Overload: For large systems, capturing every detail can be overwhelming and may obscure the overall understanding. It can also be overkill for small systems.</p> <p>Strategic Clarity Risk: Excessive focus on details can risk losing sight of the high-level strategic view. We all know the tendency we ( developers and architects ) have to over-engineer just because it is fun and satisfying.</p>"},{"location":"Architecture/Reference/what-is-the-C4-model/#effort","title":"Effort","text":"<p>Resource Demands: Requires significant time and effort to create and regularly update, demanding resources that could be allocated elsewhere. So the ROI has to be calculated, a project that is only short term or transitional should not require this kind of investment.</p> <p>Maintenance Challenge: Keeping documentation current with system changes is a continuous and often resource-intensive task, so again focus on the ROI.</p>"},{"location":"Architecture/Reference/what-is-the-C4-model/#detail-management","title":"Detail Management","text":"<p>Balance Difficulty: Achieving the right level of detail without overcomplicating or oversimplifying is challenging. You need experienced resources, especially in architecture.</p> <p>Varied Needs: Tailoring documentation to meet different stakeholder needs without redundancy or confusion requires careful consideration. Again, you need to rely on an experienced architect who can guarantee this.</p>"},{"location":"Architecture/Reference/what-is-the-C4-model/#conclusion","title":"Conclusion","text":"<p>In conclusion, the structured approach of documenting and understanding software systems through Context, Containers, Components, and Code offers significant benefits. This multi-level perspective is crucial for a thorough understanding of the system, aiding in decision-making, stakeholder engagement and effective project management. It serves as a vital knowledge base and a standardized framework for discussions and alignment among various stakeholders.</p> <p>However, these benefits come with trade-offs. The complexity of maintaining such detailed documentation can be overwhelming, especially for large or rapidly evolving systems. The effort required to create and update these models is substantial and demands significant resources. Additionally, managing the level of detail in documentation to cater to varied stakeholder needs without causing information overload or confusion presents an ongoing challenge.</p> <p>Therefore, while this approach is highly beneficial for understanding and communicating the architecture of software systems, it requires careful consideration and management to ensure that the documentation remains effective, relevant, and accessible to all stakeholders. Balancing the depth of detail with the high-level overview, and allocating resources efficiently for ongoing maintenance, are key to leveraging the full potential of this structured architectural approach.</p>"},{"location":"Architecture/Reference/what_is_solution_architecture/","title":"What is Solution Architecture","text":"<p>An informal introduction to Solution Architecture</p>"},{"location":"Architecture/Reference/what_is_solution_architecture/#introduction","title":"Introduction","text":"<p>The term Solution Architecture refers to a high-level blueprint of a solution that was developed to solve one or more business problems within an enterprise using a technological approach. Building a proper solution architecture requires</p> <ul> <li>A good understanding of the business problem or problems (domain knowledge)</li> <li>Comprehensive knowledge of the technologies used in the enterprise world (technical knowledge)</li> <li>Experience in building similar solutions in the past (experience)</li> </ul> <p>A good solution architecture can be used to perform critical tasks such as</p> <ul> <li>Designing and implementing innovative solutions for the consumers of the business</li> <li>Maintain excellent user experience with higher degrees of service availability</li> <li>Perform calculations on return on investment (ROI) and total cost of ownership (TCO)</li> </ul> <p>Solution architecture tries to compact a gigantic set of details into a set of diagrams so that different stakeholders understand what is actually going on inside the enterprise software systems. It is helpful for highly technical people such as software developers, software architects, and CTOs as well we moderately technical people such as project managers, business analysts, and citizen developers.</p>"},{"location":"Architecture/Reference/what_is_solution_architecture/#types-of-architectures-in-solution-architecture","title":"Types of architectures in solution architecture","text":"<p>The first step in solving any problem is understanding the business requirements of the client. To include all the critical information related to the business use case, we can come up with something called a \u201cbusiness architecture\u201d which contains different types of applications, users, and their interactions at a very high level. We sometimes call this architecture \u201cLevel 0\u201d architecture.</p>"},{"location":"Architecture/Reference/what_is_solution_architecture/#business-architecture-level-0-architecture","title":"Business architecture (Level-0 architecture)","text":"<p>The idea of business architecture is to come up with a possible solution to a real-world problem or problems and depict that in the form of a diagram or a document using the systems, applications, and users that are considered in the scenario with minimum technical details. This component is mainly useful for business executives and other non-technical stakeholders so that they can understand what technical solution is going to be built using this architecture. Given below is a \u201cbusiness architecture\u201d diagram that we came up with for a mobile banking application.</p> <p></p> <p>Figure: The business architecture of a mobile banking application</p> <p>The preceding figure depicts the various components associated with the solution in which we are building a mobile banking application for a given bank. It showcases the components such as gateway, integration, and security component as high-level building blocks to design a solution for this problem.</p> <p>The next step in designing the solution architecture is to use this and design a technical architecture with the finer details about products and tools.</p>"},{"location":"Architecture/Reference/what_is_solution_architecture/#technical-architecture-level-1-architecture","title":"Technical architecture (Level-1 architecture)","text":"<p>This is the type of diagram that includes details of specific vendors, products, and tools required to build a real-world software system using the business architecture blueprint. Coming up with a technical architecture requires the proper analysis of vendors and tools as well as the current and future business requirements and TCO/ROI calculations. The below diagram depicts a simplified version of a technical architecture for the business architecture we discussed before.</p> <p></p> <p>Figure: Technical architecture of a mobile banking solution</p> <p>In this diagram, we have mentioned the specific vendors that we are going to use to fulfill the certain functionalities that we identified during the business architecture design phase. As an example, the diagram depicts that we are going to use the WSO2 API Manager solution as the API gateway which exposes the services to the mobile application. Similarly, it shows that we are going to use Mulesoft and Auth0 for respective functionalities. In addition to that, we can also depict information about which cloud platforms and container technologies we are going to use if we decided to go with a container-based solution.</p> <p>Once the product vendors and tools are identified, the next step is to go further down into the actual deployment details and showcase the infrastructure level details that can be used by the developers as well as the operations teams to build the actual infrastructure for the solution.</p>"},{"location":"Architecture/Reference/what_is_solution_architecture/#deployment-architecture-level-2-architecture","title":"Deployment architecture (Level-2 architecture)","text":"<p>This architecture diagram showcases how the technical architecture looks like in a real computing infrastructure such as a data center or a cloud platform. It contains details on network-level segmentation, the number of replicas (instances), traffic routing components such as load balancers or firewalls, and many other details related to the actual deployment of the solution. The figure below depicts a simplified version of a deployment architecture that we can come up with for the mobile banking solution that we discussed before.</p> <p></p> <p>Figure: Deployment architecture for mobile banking solution</p> <p>The preceding figure depicts the product versions, the number of replicas, and the deployment model of each component along with the traffic routing components (load balancers).</p>"},{"location":"Architecture/Reference/media/media/","title":"media","text":""},{"location":"Architecture/Tutorials/tutorials/","title":"tutorials","text":""},{"location":"Architecture/adr/adr/","title":"adr","text":""},{"location":"Architecture/adr/decision_record_template/","title":"Decision record template by Michael Nygard","text":"<p>This is the template in Documenting architecture decisions - Michael Nygard with some minor changes. You can use adr-tools for managing the ADR files (note, may not work with the customisations).</p> <p>In each ADR file, write these sections:</p> <p>Delete everything above Title when using this template.</p>"},{"location":"Architecture/adr/decision_record_template/#title","title":"Title","text":"<ul> <li>Status: [proposed | rejected | accepted | deprecated | \u2026 | superseded by ADR-0005] </li> <li>Deciders: [list everyone involved in the decision] </li> <li>Date: [YYYY-MM-DD when the decision was last updated] </li> </ul> <p>Technical Story: [description | ticket/issue URL] </p>"},{"location":"Architecture/adr/decision_record_template/#status","title":"Status","text":"<p>[Proposed | Accepted | Deprecated | Superseded] If deprecated, indicate why. If superseded, include a link to the new ADR.</p>"},{"location":"Architecture/adr/decision_record_template/#context","title":"Context","text":"<p>What is the issue that we're seeing that is motivating this decision or change?</p>"},{"location":"Architecture/adr/decision_record_template/#considered-options","title":"Considered Options","text":"<ul> <li>option 1</li> <li>option 2</li> <li>option 3</li> <li>\u2026</li> </ul>"},{"location":"Architecture/adr/decision_record_template/#decision","title":"Decision","text":"<p>What is the change that we're proposing and/or doing?</p> <p>Describe here our response to these forces, that is, the design decision that was made. State the decision in full sentences, with active voice (\"We will...\").</p>"},{"location":"Architecture/adr/decision_record_template/#consequences","title":"Consequences","text":"<p>What becomes easier or more difficult to do because of this change? All consequences should be listed, not just the \"positive\" ones.</p>"},{"location":"Architecture/adr/decision_record_template/#positive-consequences","title":"Positive Consequences","text":"<ul> <li>e.g., improvement of quality attribute satisfaction, follow-up decisions required, \u2026</li> <li>\u2026</li> </ul>"},{"location":"Architecture/adr/decision_record_template/#negative-consequences","title":"Negative Consequences","text":"<ul> <li>e.g., compromising quality attribute, follow-up decisions required, \u2026</li> <li>\u2026</li> </ul>"},{"location":"Architecture/architectural_principles/SOLID/","title":"SOLID","text":"<p>The acronym \ud835\udde6\ud835\udde2\ud835\udddf\ud835\udddc\ud835\uddd7 stands for:</p> <ul> <li>Single responsibility principle</li> <li>Open/closed principle</li> <li>Liskov substitution principle</li> <li>Interface segregation principle</li> <li>Dependency inversion principle</li> </ul>"},{"location":"Architecture/architectural_principles/SOLID/#the-principles","title":"The principles","text":"<ol> <li>\ud835\udde6\ud835\uddf6\ud835\uddfb\ud835\uddf4\ud835\uddf9\ud835\uddf2 \ud835\udde5\ud835\uddf2\ud835\ude00\ud835\uddfd\ud835\uddfc\ud835\uddfb\ud835\ude00\ud835\uddf6\ud835\uddef\ud835\uddf6\ud835\uddf9\ud835\uddf6\ud835\ude01\ud835\ude06 \ud835\udde3\ud835\uddff\ud835\uddf6\ud835\uddfb\ud835\uddf0\ud835\uddf6\ud835\uddfd\ud835\uddf9\ud835\uddf2 (\ud835\udde6\ud835\udde5\ud835\udde3)</li> </ol> <p>A class should have only one reason to change. In other words, a class should have a single, well-defined responsibility. That class should entirely encapsulate responsibility.</p> <ol> <li>\ud835\udde2\ud835\uddfd\ud835\uddf2\ud835\uddfb/\ud835\uddd6\ud835\uddf9\ud835\uddfc\ud835\ude00\ud835\uddf2\ud835\uddf1 \ud835\udde3\ud835\uddff\ud835\uddf6\ud835\uddfb\ud835\uddf0\ud835\uddf6\ud835\uddfd\ud835\uddf9\ud835\uddf2 (\ud835\udde2\ud835\uddd6\ud835\udde3)</li> </ol> <p>Software entities (classes, functions, etc.) should be open for extension but closed for modification. You should be able to add new functionality to a class without changing its existing code, but you should not need to modify the class itself to do so.</p> <ol> <li>\ud835\udddf\ud835\uddf6\ud835\ude00\ud835\uddf8\ud835\uddfc\ud835\ude03 \ud835\udde6\ud835\ude02\ud835\uddef\ud835\ude00\ud835\ude01\ud835\uddf6\ud835\ude01\ud835\ude02\ud835\ude01\ud835\uddf6\ud835\uddfc\ud835\uddfb \ud835\udde3\ud835\uddff\ud835\uddf6\ud835\uddfb\ud835\uddf0\ud835\uddf6\ud835\uddfd\ud835\uddf9\ud835\uddf2 (\ud835\udddf\ud835\udde6\ud835\udde3)</li> </ol> <p>Subtypes must be substitutable for their base types. In other words, if a class is derived from another class, you should be able to use the derived class in the same way as the base class without any issues.</p> <ol> <li>\ud835\udddc\ud835\uddfb\ud835\ude01\ud835\uddf2\ud835\uddff\ud835\uddf3\ud835\uddee\ud835\uddf0\ud835\uddf2 \ud835\udde6\ud835\uddf2\ud835\uddf4\ud835\uddff\ud835\uddf2\ud835\uddf4\ud835\uddee\ud835\ude01\ud835\uddf6\ud835\uddfc\ud835\uddfb \ud835\udde3\ud835\uddff\ud835\uddf6\ud835\uddfb\ud835\uddf0\ud835\uddf6\ud835\uddfd\ud835\uddf9\ud835\uddf2 (\ud835\udddc\ud835\udde6\ud835\udde3)</li> </ol> <p>Clients should not depend on interfaces they do not use. This means you should design your interfaces as specific and focused as possible.</p> <ol> <li>\ud835\uddd7\ud835\uddf2\ud835\uddfd\ud835\uddf2\ud835\uddfb\ud835\uddf1\ud835\uddf2\ud835\uddfb\ud835\uddf0\ud835\ude06 \ud835\udddc\ud835\uddfb\ud835\ude03\ud835\uddf2\ud835\uddff\ud835\ude00\ud835\uddf6\ud835\uddfc\ud835\uddfb \ud835\udde3\ud835\uddff\ud835\uddf6\ud835\uddfb\ud835\uddf0\ud835\uddf6\ud835\uddfd\ud835\uddf9\ud835\uddf2 (\ud835\uddd7\ud835\udddc\ud835\udde3)</li> </ol> <p>High-level modules should not depend on low-level modules. Both should depend on abstractions. Design your software so high-level modules depend on abstractions rather than concrete implementations.</p>"},{"location":"Architecture/architectural_principles/architectural_principles/","title":"architectural_principles","text":""},{"location":"Architecture/architectural_principles/design-docs/","title":"Design docs","text":"<p>One of the key elements of Google's software engineering culture is the use of design docs for defining software designs. These are relatively informal documents that the primary author or authors of a software system or application create before they embark on the coding project. The design doc documents the high level implementation strategy and key design decisions with emphasis on the trade-offs that were considered during those decisions.</p> <p>As software engineers our job is not to produce code per se, but rather to solve problems. Unstructured text, like in the form of a design doc, may be the better tool for solving problems early in a project lifecycle, as it may be more concise and easier to comprehend, and communicates the problems and solutions at a higher level than code.</p> <p>Besides the original documentation of a software design, design docs fulfill the following functions in the software development lifecycle:</p> <ul> <li>Early identification of design issues when making changes is still cheap.</li> <li>Achieving consensus around a design in the organization.</li> <li>Ensuring consideration of cross-cutting concerns.</li> <li>Scaling knowledge of senior engineers into the organization.</li> <li>Form the basis of an organizational memory around design decisions.</li> <li>Acts as a summary artifact in the technical portfolio of the software designer(s).</li> </ul>"},{"location":"Architecture/architectural_principles/design-docs/#anatomy-of-a-design-doc","title":"Anatomy of a design doc","text":"<p>Design docs are informal documents and thus don\u2019t follow a strict guideline for their content. Rule #1 is: Write them in whatever form makes the most sense for the particular project.</p> <p>Having said that, a certain structure has established itself as really useful.</p>"},{"location":"Architecture/architectural_principles/design-docs/#context-and-scope","title":"Context and scope","text":"<p>This section gives the reader a very rough overview of the landscape in which the new system is being built and what is actually being built. This isn\u2019t a requirements doc. Keep it succinct! The goal is that readers are brought up to speed but some previous knowledge can be assumed and detailed info can be linked to. This section should be entirely focused on objective background facts.</p>"},{"location":"Architecture/architectural_principles/design-docs/#goals-and-non-goals","title":"Goals and non-goals","text":"<p>A short list of bullet points of what the goals of the system are, and, sometimes more importantly, what non-goals are. Note, that non-goals aren\u2019t negated goals like \u201cThe system shouldn\u2019t crash\u201d, but rather things that could reasonably be goals, but are explicitly chosen not to be goals. A good example would be \u201cACID compliance\u201d; when designing a database, you\u2019d certainly want to know whether that is a goal or non-goal. And if it is a non-goal you might still select a solution that provides it, if it doesn\u2019t introduce trade-offs that prevent achieving the goals.</p>"},{"location":"Architecture/architectural_principles/design-docs/#the-actual-design","title":"The actual design","text":"<p>This section should start with an overview and then go into details.  Visualization of how to draw an owl. First picture: two circles labeled \"1. Draw some circles\". Second picture: Picture of an own labeled \"2. Draw the rest of the fucking owl\"</p> <p>The design doc is the place to write down the trade-offs you made in designing your software. Focus on those trade-offs to produce a useful document with long-term value. That is, given the context (facts), goals and non-goals (requirements), the design doc is the place to suggest solutions and show why a particular solution best satisfies those goals.</p> <p>The point of writing a document over a more formal medium is to provide the flexibility to express the problem set at hand in an appropriate manner. Because of this, there is no explicit guidance for how to actually describe the design.</p> <p>Having said that, a few best practices and repeating topics have emerged that make sense for a large percentage of design docs:</p>"},{"location":"Architecture/architectural_principles/design-docs/#system-context-diagram","title":"System-context-diagram","text":"<p>In many docs a system-context-diagram can be very useful. Such a diagram shows the system as part of the larger technical landscape and allows readers to contextualize the new design given its environment that they are already familiar with.</p> <p>Block diagram showing how various systems are related to each other. The actual text is just examples and not needed to be seen to understand the example.  Example of a system-context-diagram.</p>"},{"location":"Architecture/architectural_principles/design-docs/#apis","title":"APIs","text":"<p>If the system under design exposes an API, then sketching out that API is usually a good idea. In most cases, however, one should withstand the temptation to copy-paste formal interface or data definitions into the doc as these are often verbose, contain unnecessary detail and quickly get out of date. Instead focus on the parts that are relevant to the design and its trade-offs.</p>"},{"location":"Architecture/architectural_principles/design-docs/#data-storage","title":"Data storage","text":"<p>Systems that store data should likely discuss how and in what rough form this happens. Similar to the advice on APIs, and for the same reasons, copy-pasting complete schema definitions should be avoided. Instead focus on the parts that are relevant to the design and its trade-offs.</p>"},{"location":"Architecture/architectural_principles/design-docs/#code-and-pseudo-code","title":"Code and pseudo-code","text":"<p>Design docs should rarely contain code, or pseudo-code except in situations where novel algorithms are described. As appropriate, link to prototypes that show the implementability of the design.</p>"},{"location":"Architecture/architectural_principles/design-docs/#degree-of-constraint","title":"Degree of constraint","text":"<p>One of the primary factors that would influence the shape of a software design and hence the design doc, is the degree of constraint of the solution space.</p> <p>On one end of the extreme is the \u201cgreenfield software project\u201d, where all we know are the goals, and the solution can be whatever makes the most sense. Such a document may be wide-ranging, but it also needs to quickly define a set of rules that allow zooming in on a manageable set of solutions.</p> <p>On the other end are systems where the possible solutions are very well defined, but it isn\u2019t at all obvious how they could even be combined to achieve the goals. This may be a legacy system that is difficult to change and wasn\u2019t designed to do what you want it to do or a library design that needs to operate within the constraints of the host programming language.</p> <p>In this situation you may be able to enumerate all the things you can do relatively easily, but you need to creatively put those things together to achieve the goals. There may be multiple solutions, and none of them are really great, and hence such a document should focus on selecting the best way given all identified trade-offs.</p>"},{"location":"Architecture/architectural_principles/design-docs/#alternatives-considered","title":"Alternatives considered","text":"<p>This section lists alternative designs that would have reasonably achieved similar outcomes. The focus should be on the trade-offs that each respective design makes and how those trade-offs led to the decision to select the design that is the primary topic of the document.</p> <p>While it is fine to be succinct about solution that ended up not being selected, this section is one of the most important ones as it shows very explicitly why the selected solution is the best given the project goals and how other solutions, that the reader may be wondering about, introduce trade-offs that are less desirable given the goals.</p>"},{"location":"Architecture/architectural_principles/design-docs/#cross-cutting-concerns","title":"Cross-cutting concerns","text":"<p>This is where your organization can ensure that certain cross-cutting concerns such as security, privacy, and observability are always taken into consideration. These are often relatively short sections that explain how the design impacts the concern and how the concern is addressed. Teams should standardize what these concerns are in their case.</p> <p>Due to their importance, Google projects are required to have a dedicated privacy design doc, and there are dedicated reviews for privacy and security. While the reviews are only required to be completed by the time a project launches, it is best practice to engage with privacy and security teams as early as possible to ensure that designs take them into account from the ground up. In case of dedicated docs for these topics, the central design doc can, of course, reference them instead of going into detail.</p>"},{"location":"Architecture/architectural_principles/design-docs/#the-length-of-a-design-doc","title":"The length of a design doc","text":"<p>Design docs should be sufficiently detailed but short enough to actually be read by busy people. The sweet spot for a larger project seems to be around 10-20ish pages. If you get way beyond that, it might make sense to split up the problem into more manageable sub problems. It should also be noted that it is absolutely possible to write a 1-3 page \u201cmini design doc\u201d. This is especially helpful for incremental improvements or sub tasks in an agile project\u2013you still do all the same steps as for a longer doc, just keep things more terse and focused on a limited problem set.</p>"},{"location":"Architecture/architectural_principles/design-docs/#when-not-to-write-a-design-doc","title":"When not to write a design doc","text":"<p>Writing design docs is overhead. The decision whether to write a design doc comes down to the core trade-off of deciding whether the benefits in organizational consensus around design, documentation, senior review, etc. outweigh the extra work of creating the doc. At the center of that decision lies whether the solution to the design problem is ambiguous\u2013because of problem complexity or solution complexity, or both. If it is not, then there is little value in going through the process of writing a doc.</p> <p>A clear indicator that a doc might not be necessary are design docs that are really implementation manuals. If a doc basically says \u201cThis is how we are going to implement it\u201d without going into trade-offs, alternatives, and explaining decision making (or if the solution is so obvious as to mean there were no trade-offs), then it would probably have been a better idea to write the actual program right away.</p> <p>Finally, the overhead of creating and reviewing a design doc may not be compatible with prototyping and rapid iteration. However, most software projects do have a set of actually known problems. Subscribing to agile methodologies is not an excuse for not taking the time to get solutions to actually known problems right. Additionally, prototyping itself may be part of the design doc creation. \u201cI tried it out and it works\u201d is one of the best arguments for choosing a design.</p>"},{"location":"Architecture/architectural_principles/design-docs/#the-design-doc-lifecycle","title":"The design doc lifecycle","text":"<p>The steps in the lifecycle of a design document are:</p> <ol> <li>Creation and rapid iteration</li> <li>Review (may be in multiple rounds)</li> <li>Implementation and iteration</li> <li>Maintenance and learning</li> </ol>"},{"location":"Architecture/architectural_principles/design-docs/#creation-and-rapid-iteration","title":"Creation and rapid iteration","text":"<p>You write the doc. Sometimes together with a set of co-authors.</p> <p>This phase quickly evolves into a time of rapid iteration where the doc is shared with colleagues who have the most knowledge about the problem space (often belonging to the same team) and through their clarifying questions and suggestions drive the doc to a first relatively stable version.</p> <p>While you certainly find engineers and even teams who prefer version control and code review tools for document creation, the vast majority of design docs at Google are created in Google Docs and make heavy use of its collaboration features.</p>"},{"location":"Architecture/architectural_principles/design-docs/#review","title":"Review","text":"<p>In the review phase a design doc gets shared with a wider audience than the original set of authors and close collaborators. Reviews can add a lot of value, but they are also a dangerous trap of overhead, so treat them wisely.</p> <p>A review can take many shapes: The more lightweight version is simply sending out the doc to the (wider) team-list to give folks a chance to take a look. Discussion then primarily happens in comment threads in the document. On the heavy side of reviews, are formal design review meetings in which the author presents the doc (often via a dedicated presentation) to an often very senior engineering audience. Many teams at Google have recurring meetings scheduled for this purpose to which engineers can sign up to for a review. Naturally waiting for such meetings to happen can significantly slow down the development process. Engineers can mitigate this by seeking the most crucial feedback directly and not blocking progress on wider review.</p> <p>When Google was a smaller company, it was customary to send designs to a single central mailing list, where senior engineers would review them at their own leisure. This may very well be a great way to handle things for your company. One benefit was that it did establish a relatively uniform software design culture across the company. But as the company scaled to a much larger engineering team, it became infeasible to maintain the centralized approach.</p> <p>The primary value that such reviews add is that they form an opportunity for the combined experience of the organization to be incorporated into a design. Most consistently, ensuring that designs take cross-cutting concerns such as observability, security and privacy into account is something that can be ensured in a review stage. The primary value of the review isn\u2019t that issues get discovered per-se, but rather that this happens relatively early in the development lifecycle when it is still relatively cheap to make changes.</p>"},{"location":"Architecture/architectural_principles/design-docs/#implementation-and-iteration","title":"Implementation and iteration","text":"<p>When things have progressed sufficiently to have confidence that further reviews are unlikely to require major changes to the design, it is time to begin implementation. As plans collide with reality, it is inevitable that shortcomings, unaddressed requirements, or educated guesses that turned out to be wrong surface, and require changing the design. It is strongly recommended to update the design doc in this case. As a rule of thumb: If the designed system hasn\u2019t shipped yet, then definitely update the doc. In practice we humans are bad at updating documents, and for other practical reasons changes are often isolated into new documents. This leads to an eventual state more akin to the US constitution with a bunch of amendments rather than one consistent piece of documentation. Links to such amendments from the original doc can be immensely helpful for the poor future maintenance programmer trying to understand their target system through design doc archaeology.</p>"},{"location":"Architecture/architectural_principles/design-docs/#maintenance-and-learning","title":"Maintenance and learning","text":"<p>When Google engineers get confronted with a system that they hadn\u2019t previously touched their first question often is \u201cWhere is the design doc?\u201d. While design docs, like all documentation, tend to get out of sync with reality over time, they still often present the most accessible entry point to learn about the thinking that guided the creation of the system.</p> <p>As the author, do yourself a favor and re-read your own design docs a year or 2 later. What did you get right? What did you get wrong? What would you do to decide differently today? Answering these questions is a great way to advance as an engineer and improve software design skills over time.</p>"},{"location":"Architecture/architectural_principles/design-docs/#conclusions","title":"Conclusions","text":"<p>Design docs are a great way to gain clarity and achieve consensus around solving the hardest problems in a software project. They save money, because they avoid going down coding rabbit holes that fail to achieve project goals and could have been avoided using upfront investigation; and they cost money, because creation and review take time. So, choose wisely for your project!</p> <p>When considering writing a design doc, think about these points:</p> <ul> <li>Are you unsure about the right software design, and would it make sense to spend upfront time to gain certainty?</li> <li>Relatedly, would it help to involve senior engineers, who might not be able to review every code-change, in the design?</li> <li>Is the software design ambiguous or even contentious such that achieving organizational consensus around it would be valuable?</li> <li>Does my team sometimes forget to consider privacy, security, logging or other cross-cutting concerns in the design?</li> <li>Is there a strong need for documents that provide high-level insights into the design of legacy systems in the organization?</li> </ul> <p>If you answer yes to 3 or more of these questions, then a design doc is probably a great method to start your next software project.</p>"},{"location":"Architecture/architectural_principles/john_lewis_principles/","title":"John Lewis Software Engineering Principles","text":"<p>We have created a set of Software Engineering principles that we use internally that form a common belief in how software should be built within John Lewis IT Delivery. They can be found here http://engineering-principles.jl-engineering.net/</p>"},{"location":"Architecture/architectural_principles/john_lewis_principles/#why-create-a-set-of-principles","title":"Why create a set of Principles?","text":"<p>The success of our organisation is dependent on implementing outstanding software solutions in a sustainable way. Rather than simply declaring that \u201cEngineering Excellence\u201d is important to us, we embarked on creating a set of principles that describe what that means to us in practice.</p>"},{"location":"Architecture/architectural_principles/john_lewis_principles/#principles-instead-of-policy-or-standards","title":"Principles instead of policy or standards","text":"<p>When creating the principles we didn\u2019t want to dictate how each engineering team should build their product by creating another policy document as we want teams to feel empowered. We also didn\u2019t want this to become another document that was quietly ignored. On that basis we created the principles as a set of beliefs that are important to us as an organisation.</p> <p>We wanted to create principles that are actionable rather than create a set of truisms that are easy to agree with but of no real value in practice. For each of the principles we describe why we believe it to hold true and the implications of actually working to the principle.</p> <p>When we created the principles some of them were controversial. For example we created Cloud Native as a principle when almost all new projects were still hosting solutions on traditional infrastructure. As an organisation we now host most new solutions on cloud infrastructure. Maybe most controversially we created and then removed Reusable Components as a principle. Through experience we learned that the principles Design For Pace of Change and Evolutionary Systems set out our real intent, which is that while reuse is often valuable, inappropriate reuse inhibits change and should emerge through evolution rather than being designed up front.</p>"},{"location":"Architecture/architectural_principles/john_lewis_principles/#how-did-we-create-the-principles","title":"How did we create the principles?","text":"<p>Inside John Lewis IT we have a serious sounding body we call the Tech Council which is a bunch of experienced developers that meet up once a week to discuss anything about our organisation\u2019s engineering approach. The Tech Council created the initial principles, hosting them in Git and setting up a CD pipeline to publish them to a website whenever they are changed. The principles are \u201copen sourced\u201d internally so anybody can suggest improvements by making a merge request.</p> <p></p> <p>We always share the principles with any new Partners or suppliers we use. We have had valuable contributions from some very well known figures from the world of agile software development that have worked with us recently, some of whom have shared our principles with their other clients (which we are very happy about).</p>"},{"location":"Architecture/architectural_principles/john_lewis_principles/#how-have-the-principles-impacted-our-organisation","title":"How have the principles impacted our organisation?","text":"<p>We never wanted them to be another document that gathered dust in the filing cabinet. They are used as part of the training for anybody up-skilling to be a software engineer within our organisation, which on its own is great.</p> <p>But they have also been used to resolve the inevitable disagreements about engineering approach that crop up in a large organisation. The principles are a simple way to evaluate how differing opinions align themselves to our organisational beliefs, and if our beliefs are not shared we would rather resolve that first.</p> <p>Engineering teams often create their own charters about how they will approach the engineering problem in their particular context. They have found it useful to validated their charters against the principles instead of creating their own value system.</p>"},{"location":"Architecture/architectural_principles/john_lewis_principles/#what-next-for-our-principles","title":"What next for our principles?","text":"<p>We have recently started a process of evaluating how well engineering teams are aligned with the principles. I say aligned rather than comply with as the intent is to help teams rather than judge them. This will also help us as an organisation to understand how well we are performing and where we may need to make investment choices to improve our engineering performance.</p> <p>A member of the Tech Council helps each team to evaluate itself and we have a guide to help with the evaluation process which includes things such as positive and negative indicators for each principle. Rather than give each team a total score out of 100 we use a red/amber/green traffic light against each principle.</p> <p>We expect the evaluation process and the principles themselves to improve as we gain more experience with this.</p>"},{"location":"Architecture/architectural_principles/john_lewis_principles/#the-principles","title":"The Principles","text":""},{"location":"Architecture/architectural_principles/john_lewis_principles/#build-differentiators","title":"Build Differentiators","text":"<ul> <li>Do you consider this when choosing the technology?</li> <li>Google Cloud Datastore or Elasticsearch are examples of \u201cbuy\u201d</li> <li>Do you reinvent the wheel, building systems already out there?</li> </ul>"},{"location":"Architecture/architectural_principles/john_lewis_principles/#design-for-emergent-reuse","title":"Design for Emergent Reuse","text":"<ul> <li>If there are lots of different components do you take into account the pace of change of the components?</li> <li>Do you over-engineer your solutions?</li> <li>Do you reuse for the sake of it?</li> <li>Is your system going to be around for a long time?</li> </ul>"},{"location":"Architecture/architectural_principles/john_lewis_principles/#evolutionary-systems","title":"Evolutionary Systems","text":"<ul> <li>If you change your system is it an isolated change with regard to other systems?</li> <li>How many people does it take to release?</li> <li>How often can you release?</li> <li>Can Ops release during the day?</li> <li>How many requirements do you put into one iteration?</li> <li>How future proof is it for requirements that may not exist?</li> </ul>"},{"location":"Architecture/architectural_principles/john_lewis_principles/#scale-horizontally","title":"Scale Horizontally","text":"<ul> <li>State cannot be stored in-memory but rather must be persisted to the client or a shared datastore.</li> <li>It is not always possible to scale horizontally e.g. for traditional relational databases, increased performance is often achieved through better hardware or higher specifications</li> <li>Services should strive to be idempotent</li> </ul>"},{"location":"Architecture/architectural_principles/john_lewis_principles/#small-and-simple","title":"Small and Simple","text":"<ul> <li>How long do your tests take?</li> <li>Can you describe your components?</li> <li>Can you test your components independently?</li> <li>Can you deploy components independently?</li> </ul>"},{"location":"Architecture/architectural_principles/john_lewis_principles/#smarts-in-the-nodes-not-the-network","title":"Smarts in the Nodes, not the Network","text":"<ul> <li>Do you have business logic in your integration layer?</li> <li>Do you apply business rules in your data transformations?</li> <li>If there is business logic is it for your own system\u2019s consumption?</li> </ul>"},{"location":"Architecture/architectural_principles/john_lewis_principles/#cloud-native","title":"Cloud Native","text":"<ul> <li>Are you leveraging the services in the cloud?</li> <li>Did you intend it to be in the cloud from the start?</li> </ul>"},{"location":"Architecture/architectural_principles/john_lewis_principles/#production-ready","title":"Production Ready","text":"<ul> <li>Do you understand your failure modes?</li> <li>Do you understand how monitoring helps you understand your failure modes?</li> <li>How close is the system to its limit?</li> <li>Are there circuit breakers?</li> <li>Are there rolling deployments, eg kubernetes?</li> <li>Do you have dashboards, golden signals, engineering metrics for traffic and resilience?</li> </ul>"},{"location":"Architecture/architectural_principles/john_lewis_principles/#keep-pace-with-technological-change","title":"Keep Pace with Technological Change","text":"<ul> <li>What technology is the team using?</li> <li>Is it up to date?</li> <li>Is it well supported?</li> <li>Is it current?</li> <li>How often is it upgraded and patched?</li> <li>Are the team interested in this area?</li> <li>Is the software on its way out?</li> </ul>"},{"location":"Architecture/architectural_principles/john_lewis_principles/#model-the-business-domain","title":"Model the Business Domain","text":"<ul> <li>Does it use DDD (Domain driven design)?</li> <li>Could a business person understand the language used in your code?</li> <li>How well do you own your domain?</li> <li>Are there changes not owned by your team?</li> </ul>"},{"location":"Architecture/architectural_principles/john_lewis_principles/#secure-by-design","title":"Secure by Design","text":"<ul> <li>Have you considered access control?</li> </ul>"},{"location":"Architecture/architectural_principles/john_lewis_principles/#consistent-environments","title":"Consistent Environments","text":"<ul> <li>Are you using infrastructure as code? Examples are terraform or puppet.</li> <li>Have you got any processes in keeping data up to date?</li> <li>Are there lots of manual processes?</li> </ul>"},{"location":"Architecture/architectural_principles/john_lewis_principles/#continuous-delivery","title":"Continuous Delivery","text":"<ul> <li>Are you doing it? Are you using a CI tool?</li> <li>What manual gates are in place?</li> <li>Can you release straight to Production?</li> <li>Are you using trunk based development with feature flags as necessary?</li> <li>Are branches short-lived?</li> </ul>"},{"location":"Architecture/architectural_principles/john_lewis_principles/#get-feedback-early-and-often","title":"Get Feedback Early and Often","text":"<ul> <li>Could you do daily releases?</li> </ul>"},{"location":"Architecture/architectural_principles/john_lewis_principles/#understandability","title":"Understandability","text":"<ul> <li>If a new person joins, can they get up to speed quickly?</li> <li>Can code be safely refactored due to good test coverage?</li> </ul>"},{"location":"Architecture/rfcs/rfc-template/","title":"RFC Template","text":"<p>Feature Name: (fill me in with a unique identity, myawesomefeature)</p> <p>Type: (feature, enhancement)</p> <p>Start Date: (fill me in with today's date, YYYY-MM-DD)</p> <p>Author: (your names)</p> <p>Related components: (if any)</p> <p>JIRA issues: (list of SL- numbers)</p>"},{"location":"Architecture/rfcs/rfc-template/#summary","title":"Summary","text":"<p>One paragraph explanation of the feature.</p>"},{"location":"Architecture/rfcs/rfc-template/#motivation","title":"Motivation","text":"<p>Why are we doing this? What use cases does it support? What is the expected outcome?</p>"},{"location":"Architecture/rfcs/rfc-template/#detailed-design","title":"Detailed design","text":"<p>This is the bulk of the RFC. Explain the design in enough detail for somebody familiar with the network to understand, and for somebody familiar with the code practices to implement. This should get into specifics and corner-cases, and include examples of how the feature is used.</p>"},{"location":"Architecture/rfcs/rfc-template/#drawbacks","title":"Drawbacks","text":"<p>I Why should we not do this?</p>"},{"location":"Architecture/rfcs/rfc-template/#alternatives","title":"Alternatives","text":"<p>What other designs have been considered? What is the impact of not doing this?</p>"},{"location":"Architecture/rfcs/rfc-template/#unresolved-questions","title":"Unresolved questions","text":"<p>What parts of the design are still to be done?</p>"},{"location":"Architecture/rfcs/rfcs/","title":"rfcs","text":""},{"location":"Architecture/structurizr/structurizr/","title":"structurizr","text":""},{"location":"Architecture/structurizr/adrs/0001-record-architecture-decisions/","title":"1. Record architecture decisions","text":"<p>Date: 2023-11-01</p>"},{"location":"Architecture/structurizr/adrs/0001-record-architecture-decisions/#status","title":"Status","text":"<p>Accepted</p>"},{"location":"Architecture/structurizr/adrs/0001-record-architecture-decisions/#context","title":"Context","text":"<p>We need to record the architectural decisions made on this project.</p>"},{"location":"Architecture/structurizr/adrs/0001-record-architecture-decisions/#decision","title":"Decision","text":"<p>We will use Architecture Decision Records, as described by Michael Nygard in this article: http://thinkrelevance.com/blog/2011/11/15/documenting-architecture-decisions</p>"},{"location":"Architecture/structurizr/adrs/0001-record-architecture-decisions/#consequences","title":"Consequences","text":"<p>See Michael Nygard's article, linked above.</p>"},{"location":"Architecture/structurizr/adrs/adrs/","title":"adrs","text":""},{"location":"Architecture/structurizr/docs/0001-design/","title":"0001 design","text":""},{"location":"Architecture/structurizr/docs/0001-design/#functional-overview","title":"Functional Overview","text":"<p>The high-level functional requirements for the new Risk System are as follows.</p> <p></p> <ol> <li>Import trade data from the Trade Data System.</li> <li>Import counterparty data from the Reference Data System.</li> <li>Join the two sets of data together, enriching the trade data with information about the counterparty.</li> <li>For each counterparty, calculate the risk that the bank is exposed to.</li> <li>Generate a report that can be imported into Microsoft Excel containing the risk figures for all counterparties known by the bank.</li> <li>Distribute the report to the business users before the start of the next trading day (9am) in Singapore.</li> <li>Provide a way for a subset of the business users to configure and maintain the external parameters used by the risk calculations.</li> </ol>"},{"location":"Architecture/structurizr/docs/docs/","title":"docs","text":""},{"location":"Architecture/structurizr/docs/images/images/","title":"images","text":""},{"location":"General/AI/aiPrompts/","title":"aiPrompts","text":"<ul> <li>Prompt Name</li> <li>Description</li> <li>Recommended Chatbot</li> <li>Prompt</li> <li>Variables</li> </ul>"},{"location":"General/AI/aiPrompts/#challenge-conventional-wisdom","title":"Challenge conventional wisdom","text":""},{"location":"General/AI/aiPrompts/#description","title":"Description","text":"<p>Input a piece of conventional wisdom to discover the logic of the opposite point of view</p>"},{"location":"General/AI/aiPrompts/#recommended-chatbot","title":"Recommended Chatbot","text":"<p>ChatGPT</p>"},{"location":"General/AI/aiPrompts/#prompt","title":"Prompt","text":"<p>\"You are the ultimate contrarian who takes any argument and find the validity in the opposite point of view. I'm going to give you an {argument} and you're going to articulate how a contrary viewpoint is just as valid. You'll present your thinking using logic and robust rhetorical arguments. Present your argument using markup for easy reading.</p> <p>{argument}: \"</p>"},{"location":"General/AI/aiPrompts/#variables","title":"Variables","text":"<p>Argument</p>"},{"location":"General/AI/aiPrompts/#prompt-name","title":"Prompt Name","text":""},{"location":"General/AI/aiPrompts/#description_1","title":"Description","text":""},{"location":"General/AI/aiPrompts/#recommended-chatbot_1","title":"Recommended Chatbot","text":""},{"location":"General/AI/aiPrompts/#prompt_1","title":"Prompt","text":""},{"location":"General/AI/aiPrompts/#variables_1","title":"Variables","text":""},{"location":"General/AI/aiPrompts/#prompt-name_1","title":"Prompt Name","text":""},{"location":"General/AI/aiPrompts/#description_2","title":"Description","text":""},{"location":"General/AI/aiPrompts/#recommended-chatbot_2","title":"Recommended Chatbot","text":""},{"location":"General/AI/aiPrompts/#prompt_2","title":"Prompt","text":""},{"location":"General/AI/aiPrompts/#variables_2","title":"Variables","text":""},{"location":"General/AI/aiPrompts/#prompt-name_2","title":"Prompt Name","text":""},{"location":"General/AI/aiPrompts/#description_3","title":"Description","text":""},{"location":"General/AI/aiPrompts/#recommended-chatbot_3","title":"Recommended Chatbot","text":""},{"location":"General/AI/aiPrompts/#prompt_3","title":"Prompt","text":""},{"location":"General/AI/aiPrompts/#variables_3","title":"Variables","text":""},{"location":"General/AI/aiPrompts/#prompt-name_3","title":"Prompt Name","text":""},{"location":"General/AI/aiPrompts/#description_4","title":"Description","text":""},{"location":"General/AI/aiPrompts/#recommended-chatbot_4","title":"Recommended Chatbot","text":""},{"location":"General/AI/aiPrompts/#prompt_4","title":"Prompt","text":""},{"location":"General/AI/aiPrompts/#variables_4","title":"Variables","text":""},{"location":"General/AI/aiPrompts/#prompt-name_4","title":"Prompt Name","text":""},{"location":"General/AI/aiPrompts/#description_5","title":"Description","text":""},{"location":"General/AI/aiPrompts/#recommended-chatbot_5","title":"Recommended Chatbot","text":""},{"location":"General/AI/aiPrompts/#prompt_5","title":"Prompt","text":""},{"location":"General/AI/aiPrompts/#variables_5","title":"Variables","text":""},{"location":"General/AI/aiPrompts/#prompt-name_5","title":"Prompt Name","text":""},{"location":"General/AI/aiPrompts/#description_6","title":"Description","text":""},{"location":"General/AI/aiPrompts/#recommended-chatbot_6","title":"Recommended Chatbot","text":""},{"location":"General/AI/aiPrompts/#prompt_6","title":"Prompt","text":""},{"location":"General/AI/aiPrompts/#variables_6","title":"Variables","text":""},{"location":"General/AI/aiPrompts/#prompt-name_6","title":"Prompt Name","text":""},{"location":"General/AI/aiPrompts/#description_7","title":"Description","text":""},{"location":"General/AI/aiPrompts/#recommended-chatbot_7","title":"Recommended Chatbot","text":""},{"location":"General/AI/aiPrompts/#prompt_7","title":"Prompt","text":""},{"location":"General/AI/aiPrompts/#variables_7","title":"Variables","text":""},{"location":"General/AI/aiPrompts/#prompt-name_7","title":"Prompt Name","text":""},{"location":"General/AI/aiPrompts/#description_8","title":"Description","text":""},{"location":"General/AI/aiPrompts/#recommended-chatbot_8","title":"Recommended Chatbot","text":""},{"location":"General/AI/aiPrompts/#prompt_8","title":"Prompt","text":""},{"location":"General/AI/aiPrompts/#variables_8","title":"Variables","text":""},{"location":"General/AI/aiPrompts/#produce-a-standard","title":"Produce a standard","text":""},{"location":"General/AI/aiPrompts/#description_9","title":"Description","text":""},{"location":"General/AI/aiPrompts/#recommended-chatbot_9","title":"Recommended Chatbot","text":""},{"location":"General/AI/aiPrompts/#prompt_9","title":"Prompt","text":"<p>You are a highly experienced Solution architect with substantial experience in API's, especially OpenAPI v2 with a reputation for consistency,clarity and quality. I want you to help me write guidelines on writing yaml API definitions that can be provided to developers, designers and architects to work on API definitions. The guidlines should be clear and comprehensive. They shoudl be well structured and written in markdown . The guidelines should cover (but no neccsarily in the order below) teh following with substantial detail added: - resource naming conventions - response codes  - using RFC 9457 Problem Details for HTTP APIs - OpenAPI overview, tat we will only use yaml and not json - explain teh role of JSON schema in teh format of teh file (e.g types,ranges etc) - versioning - setting ranges and validations   - minimum   - maximum   - multipleof   - max length   - min length   - max items   - min items   - max contains   - min contains   - regular expressions   - etc - naming conventions - use of verbs - usage of methods - notification patterns - How asynch actions can be managed - Query patterns - media types - adding examples - security   - Oauth   - etc - Full worked sizeable example of an openapi definition file - Standard fields such as   - create Time   - update time   - delete time   - expire time   - start time   - stop time   - time zone   - region code   - page size and page token (for pagination)   - order by    - unique id (use CUID2)</p>"},{"location":"General/AI/aiPrompts/#variables_9","title":"Variables","text":""},{"location":"General/MyBooks/Biographies_books/","title":"Biographies books","text":""},{"location":"General/MyBooks/Biographies_books/#table-of-contents","title":"Table of Contents","text":""},{"location":"General/MyBooks/Biographies_books/#a","title":"A","text":"<ul> <li>American Prometheus: The Triumph and Tragedy of J. Robert Oppenheimer</li> <li>Any Fool Can be a Pig Farmer</li> </ul>"},{"location":"General/MyBooks/Biographies_books/#c","title":"C","text":"<ul> <li>Calves in the Classroom</li> </ul>"},{"location":"General/MyBooks/Biographies_books/#d","title":"D","text":"<ul> <li>Don't You Have Time to Think?</li> <li>Ducks in Detention</li> </ul>"},{"location":"General/MyBooks/Biographies_books/#g","title":"G","text":"<ul> <li>Genius: Richard Feynman and Modern Physics</li> </ul>"},{"location":"General/MyBooks/Biographies_books/#p","title":"P","text":"<ul> <li>Pigs in the Playground</li> </ul>"},{"location":"General/MyBooks/Biographies_books/#t","title":"T","text":"<ul> <li>The Beat of a Different Drum: Life and Science of Richard P. Feynman</li> <li>The Illustrated Herdwick Shepherd</li> <li>The Strangest Man: The Hidden Life of Paul Dirac, Quantum Genius</li> </ul>"},{"location":"General/MyBooks/Biographies_books/#american-prometheus-the-triumph-and-tragedy-of-j-robert-oppenheimer","title":"American Prometheus: The Triumph and Tragedy of J. Robert Oppenheimer","text":"<p>Author: Bird, Kai; Sherwin, Martin J.</p> <p>Published Date: 2009-01-01</p> <p>Pages: 736.0</p> <p>ISBN: 9781843547051</p> <p>Summary: American Prometheus is the first full-scale biography of J. Robert Oppenheimer, \"father of the atomic bomb,\" the brilliant, charismatic physicist who led the effort to capture the awesome fire of the sun for his country in time of war. Immediately after Hiroshima, he became the most famous scientist of his generation-one of the iconic figures of the twentieth century, the embodiment of modern man confronting the consequences of scientific progress. </p> <p>He was the author of a radical proposal to place international controls over atomic materials-an idea that is still relevant today. He opposed the development of the hydrogen bomb and criticized the Air Force's plans to fight an infinitely dangerous nuclear war. In the now almost-forgotten hysteria of the early 1950s, his ideas were anathema to powerful advocates of a massive nuclear buildup, and, in response, Atomic Energy Commission chairman Lewis Strauss, Superbomb advocate Edward Teller and FBI director J. Edgar Hoover worked behind the scenes to have a hearing board find that Oppenheimer could not be trusted with America's nuclear secrets. </p> <p>American Prometheus sets forth Oppenheimer's life and times in revealing and unprecedented detail. Exhaustively researched, it is based on thousands of records and letters gathered from archives in America and abroad, on massive FBI files and on close to a hundred interviews with Oppenheimer's friends, relatives and colleagues.</p> <p>We follow him from his earliest education at the turn of the twentieth century at New York City's Ethical Culture School, through personal crises at Harvard and Cambridge universities. Then to Germany, where he studied quantum physics with the world's most accomplished theorists; and to Berkeley, California, where he established, during the 1930s, the leading American school of theoretical physics, and where he became deeply involved with social justice causes and their advocates, many of whom were communists. Then to Los Alamos, New Mexico, where he transformed a bleak mesa into the world's most potent nuclear weapons laboratory-and where he himself was transformed. And finally, to the Institute for Advanced Study in Princeton, which he directed from 1947 to 1966. </p> <p>American Prometheus is a rich evocation of America at mid-century, a new and compelling portrait of a brilliant, ambitious, complex and flawed man profoundly connected to its major events\u2014the Depression, World War II and the Cold War. It is at once biography and history, and essential to our understanding of our recent past\u2014and of our choices for the future.</p> <p>Rating: \u2605\u2605\u2605\u2605\u2606</p>"},{"location":"General/MyBooks/Biographies_books/#any-fool-can-be-a-pig-farmer","title":"Any Fool Can be a Pig Farmer","text":"<p>Author: Robertson, James Irvine</p> <p>Published Date: 1989-04-14</p> <p>Pages: 155.0</p> <p>ISBN: 9780852361962</p> <p>Summary: This, the first of James Robertson\u2019s sagas about agriculture and country life, demonstrates that the young and inexperienced Robertson was even more prone to disaster than the older and still inexperienced Robertson. His pigs bit him, gave him lice, crawled up to his bed and indicated that man is not necessarily the dominant species. How do you communicate the facts of life to an innocent young boar? Persuade a sow not to eat her young? Survive an investigation by the Inland Revenue? Stay out of jail when your newly insured barn goes up in smoke? Any Fool Can be a Pig Farmer shows the other side of the rural idyll. It is painful, real and very funny.</p> <p>Rating: \u2605\u2605\u2605\u2605\u2606</p>"},{"location":"General/MyBooks/Biographies_books/#calves-in-the-classroom","title":"Calves in the Classroom","text":"<p>Author: Terry, John; Brewis, Henry</p> <p>Published Date: 1987-10-01</p> <p>Pages: 192.0</p> <p>ISBN: 9780852361658</p> <p>Summary: This is one of three books charting the progress of a Warwickshire school farm, from its beginning as a wasteland to its success as a smallholding, including a flock of prize-winning sheep.</p> <p>Rating: \u2605\u2605\u2605\u2606\u2606</p>"},{"location":"General/MyBooks/Biographies_books/#dont-you-have-time-to-think","title":"Don't You Have Time to Think?","text":"<p>Author: Feynman, Richard P.</p> <p>Published Date: 2006-03-02</p> <p>Pages: 512.0</p> <p>ISBN: 9780141021133</p> <p>Summary: Edited and with additional commentary by Michelle Feynman.</p> <p>Finding out about someone by reading their correspondence is a fundamentally different thing than reading their biography. Letters offer both more intimacy with the subject and at the same time a crucial distance--the exact distance the letter-writer intended from the people to whom he was writing. In Perfectly Reasonable Deviations from the Beaten Track, Michelle Feynman collects her famous father's letters to reveal a warm, honest man with high expectations for himself, his loved ones, and the human race. Long before Richard Feynman won the Nobel Prize, he was a smart, skinny graduate student at Princeton, writing letters to his mother and relating the mundane details of college life. \"Dear Mom.... The raincoat came O.K. It is very nice,\" he writes. By the time he finished his Ph.D., Feynman had fallen for Arline Greenbaum, who had already been diagnosed with tuberculosis. Their tragically short marriage is set in letters against Feynman's first job--working on the atomic bomb project at Los Alamos, New Mexico. </p> <p>Even while working on top secret physics, Feynman was an enthusiastic correspondent, jumping eagerly at the chance to encourage a young scientist, correct a public misperception, or tell a goofy joke to his family. Self-effacing, charmingly down to earth, and occasionally cranky, these letters cover Feynman's entire career, although in the fits and starts one would expect from a collection such as this. His own words to students, spouses, daughters, and fellow scientists reveal Feynman's brilliance far more effectively than any biographical lens ever could. --Therese Littleton</p> <p>Also published under the title Perfectly Reasonable Deviations from the Beaten Track: Letters of Richard P. Feynman.</p> <p>Rating: \u2605\u2605\u2605\u2605\u2606</p>"},{"location":"General/MyBooks/Biographies_books/#ducks-in-detention","title":"Ducks in Detention","text":"<p>Author: Terry, John; Brewis, Henry</p> <p>Published Date: 1990-06-15</p> <p>Pages: 200.0</p> <p>ISBN: 9780852362082</p> <p>Summary: This is one of three books charting the progress of a Warwickshire school farm, from its beginning as a wasteland to its success as a smallholding, including a flock of prize-winning sheep.</p> <p>Rating: \u2605\u2605\u2605\u2606\u2606</p>"},{"location":"General/MyBooks/Biographies_books/#genius-richard-feynman-and-modern-physics","title":"Genius: Richard Feynman and Modern Physics","text":"<p>Author: Gleick, James</p> <p>Published Date: 1994-04-02</p> <p>Pages: 560.0</p> <p>ISBN: 9780349105321</p> <p>Summary: Genius is a brilliant interweaving of Richard Feynman's colourful life and a detailed and accessible account of his theories and experiments - nearly half a century of which amount to no less than the story of modern physics itself.</p> <p>Rating: \u2605\u2605\u2605\u2605\u2606</p>"},{"location":"General/MyBooks/Biographies_books/#pigs-in-the-playground","title":"Pigs in the Playground","text":"<p>Author: Terry, John; Brewis, Henry</p> <p>Published Date: 1986-03-13</p> <p>Pages: 208.0</p> <p>ISBN: 9780852361580</p> <p>Summary: This is one of three books charting the progress of a Warwickshire school farm, from its beginning as a wasteland to its success as a smallholding, including a flock of prize-winning sheep.</p> <p>Rating: \u2605\u2605\u2605\u2605\u2606</p>"},{"location":"General/MyBooks/Biographies_books/#the-beat-of-a-different-drum-life-and-science-of-richard-p-feynman","title":"The Beat of a Different Drum: Life and Science of Richard P. Feynman","text":"<p>Author: Mehra, Jagdish</p> <p>Published Date: 1996-05-01</p> <p>Pages: 662.0</p> <p>ISBN: 9780198518877</p> <p>Summary: This definitive book deals with the life &amp; scientific work of arguably the greatest American-born theoretical physicist of the 20th century. He was a great teacher, a born showman, bongo drummer, buffoon &amp; iconoclast; a scientific magician capable of transcendental leaps of the imagination. During his career he was drawn into research on the atomic bomb before working out his path-integral formulation of quantum mechanics &amp; quantum electro-dynamics. Subsequently he developed the diagrammatic technique, as a result of which Feynman diagrams became ubiquitous in quantum field theory, elementary particle physics &amp; statistical mechanics. From 1950 he was based at the California Institute of Technology, where he worked on the superfluidity of liquid helium, the theory of polarons, the theory of weak interactions, the quantum theory of gravitation, partons, quark jets &amp; the limits of computation. He'd a unified view of physics &amp; nature. He took the whole of nature as the arena of his science &amp; imagination. Jagdish Mehra personally knew Feynman for 30 years. In 1980 Feynman suggested he might do what he had already done for Heisenberg, Pauli &amp; Dirac, that is write a definitive account of his life, science &amp; personality. Mehra instantly agreed &amp; subsequently spent several weeks talking to him. After Feynman's death Mehra interviewed almost 80 people who'd known him &amp; aspects of his work. This book draws on this unique material &amp; on Feynman's remarkable writings. It covers his childhood, his three marriages, his extraordinary range of interests. But most important, it deals with his scientific work in far greater detail than in any other biographical work. What has emerged is an authoritative account of Feynman's life &amp; achievements.</p> <p>Rating: \u2605\u2605\u2605\u2605\u2606</p>"},{"location":"General/MyBooks/Biographies_books/#the-illustrated-herdwick-shepherd","title":"The Illustrated Herdwick Shepherd","text":"<p>Author: Rebanks, James; Shepherd, Herdwick</p> <p>Published Date: 2015-11-05</p> <p>Pages: 176.0</p> <p>ISBN: 9781846148903</p> <p>Summary: I am the luckiest man alive, because I get to live and work in the most beautiful place on earth: Matterdale in the English Lake District. When I was a child we didn't really go anywhere, except a week in the Isle of Man when I was about ten years old, and I never left Britain until I was twenty. Even now, years later, the best bit of any travelling is coming home. Bringing us into the world of shepherd's baking competitions, sheep shows and moments out on the fell watching the sheep run away home, James Rebanks interweaves thoughts and reflections on the art of shepherding with his photographs of the valley, people and animals that make up the daily life of the fells. A life lived by the three hundred surviving fell farming families, this is a book of photos and words filled with reverence and love.</p> <p>Rating: \u2605\u2605\u2605\u2605\u2606</p>"},{"location":"General/MyBooks/Biographies_books/#the-strangest-man-the-hidden-life-of-paul-dirac-quantum-genius","title":"The Strangest Man: The Hidden Life of Paul Dirac, Quantum Genius","text":"<p>Author: Farmelo, Graham</p> <p>Published Date: 2009-01-22</p> <p>Pages: 560.0</p> <p>ISBN: 9780571222780</p> <p>Summary: 'A monumental achievement - one of the great scientific biographies.' Michael Frayn</p> <p>The Strangest Man is the Costa Biography Award-winning account of Paul Dirac, the famous physicist sometimes called the British Einstein. He was one of the leading pioneers of the greatest revolution in twentieth-century science: quantum mechanics. The youngest theoretician ever to win the Nobel Prize for Physics, he was also pathologically reticent, strangely literal-minded and legendarily unable to communicate or empathize. Through his greatest period of productivity, his postcards home contained only remarks about the weather.</p> <p>Based on a previously undiscovered archive of family papers, Graham Farmelo celebrates Dirac's massive scientific achievement while drawing a compassionate portrait of his life and work. Farmelo shows a man who, while hopelessly socially inept, could manage to love and sustain close friendship.</p> <p>The Strangest Man is an extraordinary and moving human story, as well as a study of one of the most exciting times in scientific history.</p> <p>'A wonderful book . . . Moving, sometimes comic, sometimes infinitely sad, and goes to the roots of what we mean by truth in science.' Lord Waldegrave, Daily Telegraph</p> <p>Rating: \u2605\u2605\u2605\u2606\u2606</p>"},{"location":"General/MyBooks/Football_books/","title":"Football books","text":""},{"location":"General/MyBooks/Football_books/#table-of-contents","title":"Table of Contents","text":""},{"location":"General/MyBooks/Football_books/#a","title":"A","text":"<ul> <li>Attacking Soccer: Mastering the Modern Game</li> </ul>"},{"location":"General/MyBooks/Football_books/#c","title":"C","text":"<ul> <li>Coaching Mini Soccer: A Tried and Tested Program of Essential Skills and Drills for 5 to 10 Year Olds</li> <li>Coaching Psychological Skills in Youth Football: Developing The 5Cs (Soccer Coaching)</li> <li>Coaching the Coach - A Complete Guide How to Coach Soccer Skills Through Drills</li> <li>Coaching Youth Football: What Soccer Coaches Can Learn From The Professional Game (Soccer Coaching)</li> <li>Constraining Football: A vision for player development</li> </ul>"},{"location":"General/MyBooks/Football_books/#d","title":"D","text":"<ul> <li>Deliberate Soccer Practice: 50 Rondo and Positional Play Football Practices</li> <li>Deliberate Soccer Practice: 50 Small-Sided Football Games to Improve Decision-Making (Soccer Coaching)</li> <li>Developing Skill 2: A Guide to 3v3 Soccer Coaching</li> <li>Developing Skill: A Guide to 3v3 Soccer Coaching</li> <li>Developing the Modern Footballer through Futsal (Soccer Coaching)</li> </ul>"},{"location":"General/MyBooks/Football_books/#e","title":"E","text":"<ul> <li>Effective Use of the Agility Ladder for Soccer</li> </ul>"},{"location":"General/MyBooks/Football_books/#f","title":"F","text":"<ul> <li>Football Hackers: The Science and Art of a Data Revolution</li> <li>Football's Principles of Play</li> <li>Futsal: Training, Technique and Tactics</li> </ul>"},{"location":"General/MyBooks/Football_books/#m","title":"M","text":"<ul> <li>Making the Ball Roll: A Complete Guide to Youth Football for the Aspiring Soccer Coach (Soccer Coaching)</li> <li>Myths of Sport Coaching: 2 (Sequoia Myths)</li> </ul>"},{"location":"General/MyBooks/Football_books/#s","title":"S","text":"<ul> <li>SCANNING - How to Train it and Develop Game Awareness: See More, Think Quicker, Play better</li> <li>Soccer Practice Games-3rd Edition</li> <li>Sun Tzu Soccer: The Art of War in Soccer Language &amp; Scenarios</li> </ul>"},{"location":"General/MyBooks/Football_books/#t","title":"T","text":"<ul> <li>The Intelligent Soccer Coach: Player-Centered Sessions to Develop Confident, Creative Players</li> <li>The Step-by-step Training Manual of Soccer Skills &amp; Techniques: Hundreds of Training Tips and Techniques, with Easy-to-follow Instructions in Over 750 Photographs and Diagrams</li> <li>Through the Thirds: A Systematic Approach to Planning Your Football Season (Soccer Coaching)</li> <li>Two Hats: A guide for those coaching or thinking of coaching their own children</li> </ul>"},{"location":"General/MyBooks/Football_books/#y","title":"Y","text":"<ul> <li>Youth Academy Training Program U5-U8 - New Methodology from Italian Serie 'A' Coaches'</li> </ul>"},{"location":"General/MyBooks/Football_books/#attacking-soccer-mastering-the-modern-game","title":"Attacking Soccer: Mastering the Modern Game","text":"<p>Author: Schreiner, Peter; Elgert, Norbert</p> <p>Published Date: 2013-03-28</p> <p>Pages: 160.0</p> <p>ISBN: 9781782550082</p> <p>Summary: Soccer fans around the world adore the attacking style of play based on fast passing combinations, spectacular dribblings, and the art of beautiful shot goals. The question regarding this style of game is how to coach your team to embrace fast attacking soccer. How do you shape your training to cover all the technical and tactical basics? Peter Schreiner and Norbert Elgert, renowned German coaches, give the right answers, including systematical approaches. Every coach can easily shape his training programs with easy to use excersises, which are richly illustrated.</p> <p>Rating: N/A</p>"},{"location":"General/MyBooks/Football_books/#coaching-mini-soccer-a-tried-and-tested-program-of-essential-skills-and-drills-for-5-to-10-year-olds","title":"Coaching Mini Soccer: A Tried and Tested Program of Essential Skills and Drills for 5 to 10 Year Olds","text":"<p>Author: Seedhouse, Richard</p> <p>Published Date: 2010-10-07</p> <p>Pages: 128.0</p> <p>ISBN: 9780956675200</p> <p>Summary: This resource contains a complete and proven full-season training program for players ages 5-10. More than 70 interchangeable drills are explained to produce academy standard players and teams.</p> <p>Rating: \u2605\u2605\u2605\u2605\u2606</p>"},{"location":"General/MyBooks/Football_books/#coaching-psychological-skills-in-youth-football-developing-the-5cs-soccer-coaching","title":"Coaching Psychological Skills in Youth Football: Developing The 5Cs (Soccer Coaching)","text":"<p>Author: Harwood, Chris; Anderson, Richard</p> <p>Published Date: 2015-03-04</p> <p>Pages: 218.0</p> <p>ISBN: 9781909125889</p> <p>Summary: Successful footballers are typically those who are best able to regulate their emotions, fix their attention, utilise effective interpersonal skills, and remain highly motivated and self-assured in the face of consistent challenges. These behaviours are the hallmark of mentally tough, emotionally intelligent players, and can be grouped under the 5Cs of: Commitment, Communication, Concentration, Control, and Confidence. The 5Cs, however, are rarely innate - they are a product of a player's long-term psycho-social development and, crucially, they can be coached and nurtured. The aim of the 5Cs program, in this book, is to show coaches how to develop these important psycho-social skills and help young players to understand how they can truly achieve their potential. Written specifically for soccer coaches of all levels, Coaching Psychological Skills in Youth Football details each C in a methodical and practical manner with real-world exercises for training and matches. The book is relevant to soccer coaches working with 5-16 year-old players, with individual techniques and practices marked for appropriate age groups. By weaving these techniques into their normal coaching practice, coaches will help educate young players to optimise their motivation, discipline, composure, self-belief and teamwork. A complete 12 month development plan is included alongside a case study from a youth coach who has actually experienced the 5C journey. Coaching Psychological Skills in Youth Football will build your confidence as a coach as you learn how to grow and apply a world-class knowledge of sport psychology in youth football.</p> <p>Rating: \u2605\u2605\u2605\u2605\u2606</p>"},{"location":"General/MyBooks/Football_books/#coaching-the-coach-a-complete-guide-how-to-coach-soccer-skills-through-drills","title":"Coaching the Coach - A Complete Guide How to Coach Soccer Skills Through Drills","text":"<p>Author: Seedhouse, Richard</p> <p>Published Date: 2007-11-23</p> <p>Pages: 124.0</p> <p>ISBN: 9780755210749</p> <p>Summary: This book is more than just a common session guide or book of drills. It expands on why you choose a drill, how you will use it and what you will coach. This book is coach education. Use all the other drill books and session plans you want but without reading this book you will not know what you are trying to coach, why, and how. It will question your thoughts and help you learn and develop as a coach. If you are a parent taking up the reigns of a new team or a Level 1 coach this book is for you. As you read through you will understand more about what coaching your players really is and means. It is the first book you should read and the one book you should keep by your side. It is written to help you and all grassroots coaches to coach. Richard Seedhouse is an FA tutor holding the UEFA B (Level3) Coaching Licence and the Level 2 goalkeeping Coaching Certificate. He is an FA Centre of Excellence coach with Coventry City Ladies and has coached the youth team at Nuneaton Borough FC. Richard maintains his grassroots links as the Football Development Officer at Coundon Court FC, recent winners of the FA Charter Standard Development Club of the Year award for the Midlands Region. Testimonies \"The prompting of questions and challenging the coach to design progressions and sessions will fit in with current work around coach development and education\" Andy Poole, UEFA A Licence coach and the FA Regional Coach Development Manager, talking about how the book can help Trevor Brooking and the FA's new initiative on coach development. \"Whenever we take on any new Level 1 coach at our sports centre I will make sure they know about this book and recommend they read it\" Terry Harvey, UEFA B coach and Sports Centre Manager. \"I have read many coaching manuals which show how to set up, organise and the key points to look for. However, this book shows what the coach can do to improve or improvise the sessions. Excellent for coaches just starting out on their coaching career\" David Busst, UEFA A Licence coach, Coventry City FC Football Coaching in the Community Manager. \"Easy to read and with a logical approach this book will give the coach the confidence to get involved with their players and actually begin to coach them\" Michelle Hickmott, Level 2 Coach and England Ladies International at U21 and U23 and Birmingham City Ladies FC in the Premier League. \"I read this book just before my level 2 course and found it a great help as it actually talked about coaching the player's the same specific points as coached on the course\" Ty Power, Level 1 coach currently taking the level 2 coaching certificate.</p> <p>Rating: \u2605\u2605\u2605\u2606\u2606</p>"},{"location":"General/MyBooks/Football_books/#coaching-youth-football-what-soccer-coaches-can-learn-from-the-professional-game-soccer-coaching","title":"Coaching Youth Football: What Soccer Coaches Can Learn From The Professional Game (Soccer Coaching)","text":"<p>Author: Power, Ray</p> <p>Published Date: 2020-02-15</p> <p>Pages: 364.0</p> <p>ISBN: 9781910515846</p> <p>Summary: 'Coaching Youth Football' is the highly-anticipated follow-up to the international bestseller 'Making The Ball Roll', by Ray Power. With the help of dozens of contributors from across the professional, academy, and grassroots games, delve into the art and science of coaching youth football players, using up-to-date studies, methods, and example</p> <p>Rating: \u2605\u2605\u2605\u2605\u2605</p>"},{"location":"General/MyBooks/Football_books/#constraining-football-a-vision-for-player-development","title":"Constraining Football: A vision for player development","text":"<p>Author: Bartlett, Ben; Barrow, Kevin; Coach Weekly, Soccer; Maric, Rene</p> <p>Published Date: 2021-12-15</p> <p>Pages: 127.0</p> <p>ISBN: 9781912307012</p> <p>Summary: This is a book about learning. Learning can often be forgotten or fringe in the pursuit of other fruits. When these fruits are practice books, formal &amp; standardised education and easy to digest, saccharine infused niceties there is a risk that we overlook one of the fundamental human needs; to develop, change, grow and learn to master crafts. The mastery of crafts such as coaching takes time, earnest commitment and many challenging, chastening experiences that leave us feeling a little less than skilful. However we overcome these challenges, they are likely to be enablers that support our learning and growth towards becoming a better coach than we were yesterday. This book is intended to support that exploration; generate and guide your thinking whilst ensuring the gestation of those seeds of thought. We will encourage and enable a deeper understanding of the people or players in our care and provide some illumination on how to guide our decisions in designing environments that are responsive to both you and your players. There will be no coaching prescriptions, simply because the general nature of a constraints-led approach is at odds with prescription focussed approaches to coaching. A constraints-led approach encourages us to take account of, better understand and integrate what we understand about the player (person), the game of football (task) and the specific conditions on any given day (environment) into every interaction, coaching session, game-day, tournament and any other activity we might engage in within player development. There will, however, be some probing into alternative ways for coaches to eschew the traditional practice book or formal curriculum and scaffold player and coach development towards a unique, bespoke, responsive eco-system that keeps rhythm with the beating heart of our own football club. Taken together, this can support the experiences we are exposed to and build to be unique, individual and reflective of what collectively we have agreed and understand to be important in our world. The characteristics of our context should be coupled to our commitments. The backdrop to the way of thinking expressed in this book has been supported by a generation spent within coaching and development; fortune has favoured the opportunity for me to support in a sustained fashion the development of players who have been top scorers at The World Cup, multiple Premier League winners and coaches who coach and manage across some of Europe\u2019s top leagues. However, these perceived successes must be allied to the players within those same development programmes whose opportunity has been curtailed by serious injury and coaches who have fallen foul of some of the vagaries that the industry can perpetuate. As such, no development system is universally successful or unsuccessful and we should be careful, thoughtful and willing to as readily \u2018research\u2019 the graveyard as we do the top table. That mirror may be unpleasant to stare into at times, yet it is an important reflection of our own fallibilities and an important reminder to ensure that whatever outcomes our coaching and development programmes facilitate; supporting them to be as humanly supportive yet challenging as is consciously achievable is a worthy and important goal. The aspiration for this book is that it provides a map of some of the landscape that coaches may wish to explore in developing their own constraints-led approach to development both for the players in their care and for themselves as a coach. Illuminating this fertile land sufficiently to support discoveries that are purposeful, personal and personable.</p> <p>Rating: \u2605\u2605\u2605\u2605\u2606</p>"},{"location":"General/MyBooks/Football_books/#deliberate-soccer-practice-50-rondo-and-positional-play-football-practices","title":"Deliberate Soccer Practice: 50 Rondo and Positional Play Football Practices","text":"<p>Author: Power, Ray</p> <p>Published Date: 2021-08-02</p> <p>Pages: 90.0</p> <p>ISBN: 9781914066061</p> <p>Summary: Deliberate Soccer 50 Rondo and Positional Play Practices is the fifth title in the bestselling practice series by coach and author Ray Power. Rondos are a football training methodology in constrained spaces, where one team has an overload over another and attempts to keep the ball away from the opposition. It is a practical training approach that has been championed by legendary coaches Johan Cruyff and Pep Guardiola, and clubs like Ajax and Barcelona, amongst others. To these coaches and clubs, rondos are not just fun warm-up exercises, they are fundamental to the development of players and teams. This book contains 50 well-planned, thought-out, and presented rondo-based football training practices for soccer coaches. They take the coach on a journey through the training methodology from basic to complex, with an eye on pitch shapes, the number of players available, and different scoring systems. Whether you employ the rondo methodology with your players already, or are looking to increase your practical knowledge and use of this world-leading training approach, Deliberate Soccer 50 Rondo and Positional Play Practices will help grow and develop your coaching and your football teams.</p> <p>Rating: \u2606\u2606\u2606\u2606\u2606</p>"},{"location":"General/MyBooks/Football_books/#deliberate-soccer-practice-50-small-sided-football-games-to-improve-decision-making-soccer-coaching","title":"Deliberate Soccer Practice: 50 Small-Sided Football Games to Improve Decision-Making (Soccer Coaching)","text":"<p>Author: Power, Ray</p> <p>Published Date: 2017-04-06</p> <p>Pages: 122.0</p> <p>ISBN: 9781910515716</p> <p>Summary: 'Coaching Youth Football' is the highly-anticipated follow-up to the international bestseller 'Making The Ball Roll', by Ray Power. With the help of dozens of contributors from across the professional, academy, and grassroots games, delve into the art and science of coaching youth football players, using up-to-date studies, methods, and example</p> <p>Rating: \u2605\u2605\u2605\u2605\u2606</p>"},{"location":"General/MyBooks/Football_books/#developing-skill-2-a-guide-to-3v3-soccer-coaching","title":"Developing Skill 2: A Guide to 3v3 Soccer Coaching","text":"<p>Author: Prickett, Peter</p> <p>Published Date: 2019-12-03</p> <p>Pages: 180.0</p> <p>ISBN: 9781911121770</p> <p>Summary: Fun 5-minute drawing lessons for kids--great for young artists, birthday gifts, homeschool art lessons, and elementary art classes! Perfect for budding artists and kids who have never drawn before, this beginner drawing book will teach your kid how to draw pretty flowers in no time! Author and professional artist Alli Koch's kid friendly, mini drawing lessons will help your child practice their basic art skills and teach them how to draw with confidence. This book is perfect for kids 8-12, but kids 5-7 with an interest in art will be able to easily follow along as well. From sunflowers and daffodils, to leaves, and succulents, your kid will be drawing all sorts of things that they'll want to show off to their friends, or color afterward and hang on their room! No experience required! Easy-to-Follow Instructions: Simple steps and diagrams from start to finish 42 Cool Projects: Learn how to draw daisies, tulips, daffodils, magnolias, roses, succulents, cacti, and so much more! Layflat Binding: Making it easier for kids to keep the book open as they follow along Perforated Pages and Premium Paper: Easily removable pages that are thick and sturdy 9 x 9 Size: Big pages so your kid has no problem seeing each step</p> <p>Rating: \u2605\u2605\u2605\u2605\u2606</p>"},{"location":"General/MyBooks/Football_books/#developing-skill-a-guide-to-3v3-soccer-coaching","title":"Developing Skill: A Guide to 3v3 Soccer Coaching","text":"<p>Author: Prickett, Peter</p> <p>Published Date: 2018-10-03</p> <p>Pages: 146.0</p> <p>ISBN: 9781911121541</p> <p>Summary: Developing Skill 2: A Guide to 3v3 Soccer Coaching outlines how you can use and incorporate the 3v3 method into your training and provides more than 85 ready-to-use, illustrated practices. It also details how best to run warm-ups, how to work with different pitch sizes and shapes, and much more.</p> <p>Rating: \u2605\u2605\u2605\u2605\u2606</p>"},{"location":"General/MyBooks/Football_books/#developing-the-modern-footballer-through-futsal-soccer-coaching","title":"Developing the Modern Footballer through Futsal (Soccer Coaching)","text":"<p>Author: Skubala, Michael; Burkett, Seth</p> <p>Published Date: 2015-02-23</p> <p>Pages: 142.0</p> <p>ISBN: 9781909125926</p> <p>Summary: For Pele, futsal was \"very important, no doubt.\" The Brazilian FIFA Player of the Century grew up playing futsal before transitioning to the 11-a-side game. So did many others - from household-name superstars to semi-professionals to Sunday league players.</p> <p>The benefits of futsal have recently entered the mainstream, with initiatives, facilities, and organisations being created, but there are still coaches who are wary of using the sport to develop footballers. In the ever-changing modern game of football, futsal can give players an advantage over others.</p> <p>In Developing the Modern Footballer through Futsal, England futsal coach Michael Skubala, and Seth Burkett, detail the ways in which futsal can be used to develop the technical and tactical skills of players of all abilities.</p> <p>Aimed at coaches of all levels and ages, Developing the Modern Footballer through Futsal is a concise and practical book that provides an easy-to-understand and comprehensive guide to the ways in which futsal can be used as a development tool for football. From defending and attacking to transitional play and goalkeeping, this book provides something for everyone and aims to get you up-and-running fast.</p> <p>Over 50 detailed sessions are provided, with each one related to specific football scenarios and detailing how performance in these scenarios can be improved through futsal. From gegenpressing to innovative creative play under pressure, this book outlines how futsal can be used to develop a wide range of football-specific skills, giving your players the edge.</p> <p>About The Authors. Michael Skubala is the England Futsal Manager. Before this, he was the Assistant Coach, a position he held for five years. Prior to this he captained the side, and holds the record number of playing appearances for England. In addition to this, Michael is the Head Coach to the England under-21 squad, Great Britain Universities, the International Futsal Academy and Loughborough University. He is currently coaching the FA Futsal Level One and Level Two awards, one of only two coaches qualified to do so. In football, Michael holds his UEFA A Licence and is Performance Manager of Loughborough University Football Club. Previously he has been assistant football coach of Great Britain Universities. Seth Burkett is the last Englishman to play professional football in Brazil. In Brazil he became aware of futsal, understanding how it was used to develop Brazilian footballers. Upon returning to England, he began to play the sport. Seth has an honours degree in Sports Science from Loughborough, as well as a Master's degree in English. His previous books include Hobby and The Boy in Brazil, declared by the Daily Mirror as 'a captivating tale of a lad who refused to give up on his dream'.</p> <p>Rating: \u2605\u2605\u2605\u2606\u2606</p>"},{"location":"General/MyBooks/Football_books/#effective-use-of-the-agility-ladder-for-soccer","title":"Effective Use of the Agility Ladder for Soccer","text":"<p>Author: Schreiner, Peter</p> <p>Published Date: 2003-08-01</p> <p>Pages: 56.0</p> <p>ISBN: 9781591640608</p> <p>Summary: The agility ladder maximizes speed and reaction, concentration, balance and coordination. Get the most out of this popular training tool with the help of coordination training expert Peter Schreiner as he presents his most effective exercises with clear and precise descriptions, excellent photos and innovative diagrams.</p> <p>Rating: \u2606\u2606\u2606\u2606\u2606</p>"},{"location":"General/MyBooks/Football_books/#football-hackers-the-science-and-art-of-a-data-revolution","title":"Football Hackers: The Science and Art of a Data Revolution","text":"<p>Author: Biermann, Christoph</p> <p>Published Date: 2019-05-30</p> <p>Pages: 304.0</p> <p>ISBN: 9781788702058</p> <p>Summary: Well written and thoughtful. Takes us on a tour of some of Europe's most innovative football thinkers - Financial Times The future of football is now. Football's data revolution has only just begun. The arrival of advanced metrics and detailed analysis is already reshaping the modern game. We can now fully assess player performance, analyse the role of luck and measure what really leads to victory. There is no turning back. Now the race is on between football's wealthiest clubs and a group of outsiders, nerds and rule-breakers, who are turning the game on its head with their staggering innovations. Winning is no longer just about what happens out on the pitch, it's now a battle taking place in boardrooms and on screens across international borders with the world's brightest minds driving for an edge over their fiercest rivals. Christoph Biermann has moved in the midst of these disruptive upheavals, talking to scientists, coaches, managers, scouts and psychologists in the world's major clubs, traveling across Europe and the US and revealing the hidden - and often jaw-dropping - truths behind the beautiful game. 'A book full of exciting ideas and inside views on modern football. The most exciting book in an exciting time for football.' Thomas Hitzlsperger</p> <p>Rating: \u2605\u2605\u2605\u2605\u2606</p>"},{"location":"General/MyBooks/Football_books/#footballs-principles-of-play","title":"Football's Principles of Play","text":"<p>Author: Prickett, Peter</p> <p>Published Date: 2021-03-15</p> <p>Pages: 140.0</p> <p>ISBN: 9781914066016</p> <p>Summary: It started with a question, \"What are the fundamentals of football?\"</p> <p>Whilst there are hundreds of books that look into the specific principles of coaches like Jurgen Klopp, Pep Guardiola, and Marcelo Bielsa, there is no core, distilled text on the key principles of the game.</p> <p>Until now.</p> <p>Join best-selling author and coach Peter Prickett as he puts football under the microscope and breaks it down into its constituent parts. By addressing the two primary phases in-possession and out-of-possession the book examines the five attacking and five defending principles, plus the transitions between each phase, to reveal the underlying heart of the beautiful game.</p> <p>These principles have underpinned coach education for decades and largely been unchallenged. When examining them, other deeper values emerge to support the one true principle to score.</p> <p>Designed for coaches and football fans interested in the theory of football, this handbook is a must-read for anyone looking to understand the foundations that football is built on.</p> <p>Peter Prickett is an FA affiliate tutor with a decade of experience coaching with various organisations, and the author of the internationally best-selling books on \"Developing Skill: Guides to 3v3 Soccer Coaching\". He was one of the first coaches in England to obtain the UEFA B Futsal qualification, and has a Masters in Performance Football Coaching.</p> <p>Rating: \u2605\u2605\u2605\u2605\u2606</p>"},{"location":"General/MyBooks/Football_books/#futsal-training-technique-and-tactics","title":"Futsal: Training, Technique and Tactics","text":"<p>Author: Sturgess, Peter</p> <p>Published Date: 2017-05-04</p> <p>Pages: 192.0</p> <p>ISBN: 9781472929945</p> <p>Summary: Many of the top professional soccer players played futsal in their youth--Pel\ufffd, Luis Figo, Lionel Messi, Cristiano Ronaldo, Xavi, and Fabregas--and have stated that playing the game made them the great players they are today. Futsal is an exciting, fast moving game of technique, skill, tactics, and physical endeavor. Players undertake the ultimate challenge by testing their skills under the most intense pressure, due to the lack of time and space, stressing the importance of quick reaction times and reflex training. Often used in the off season for soccer players, futsal is due to be placed at the heart of all development programs, improving technique and increasing fun in youth training. Coaches face huge tactical challenges as the game changes minute by minute. It is for these reasons that Futsal has taken a huge grip upon the soccer landscape and the development of players from grassroots upwards. This book is ideal in assisting players and coaches in honing their futsal skills and techniques. If you want to be the new Messi, Ronaldo, or Fabregas, can you afford not to read this book?</p> <p>Rating: \u2605\u2605\u2605\u2605\u2606</p>"},{"location":"General/MyBooks/Football_books/#making-the-ball-roll-a-complete-guide-to-youth-football-for-the-aspiring-soccer-coach-soccer-coaching","title":"Making the Ball Roll: A Complete Guide to Youth Football for the Aspiring Soccer Coach (Soccer Coaching)","text":"<p>Author: Power, Ray</p> <p>Published Date: 2014-05-01</p> <p>Pages: 270.0</p> <p>ISBN: 9781909125520</p> <p>Summary: This focused and easy-to-understand soccer coaching book details training practices and tactics, and goes on to show you how to help young players achieve peak performance through tactical preparation, communication, psychology, and age-specific considerations. Making the Ball Roll is the ultimate complete guide to coaching youth football.</p> <p>Rating: \u2605\u2605\u2605\u2605\u2606</p>"},{"location":"General/MyBooks/Football_books/#myths-of-sport-coaching-2-sequoia-myths","title":"Myths of Sport Coaching: 2 (Sequoia Myths)","text":"<p>Author: Whitehead, Amy E.; Coe, Jenny</p> <p>Published Date: 2021-12-17</p> <p>Pages: 264.0</p> <p>ISBN: 9781914110122</p> <p>Summary: 10,000 hours? Learning styles? Coaches need to be cruel to be kind? Coaches should have previous elite competing experience? Parental involvement? Coaching female athletes is different?</p> <p>Sport Coaching is complex and multi-faceted, and the role of the coach involves an unlimited number of theories and responsibilities. With this, comes a plethora of information on how to coach effectively and what we should be aware of as coaches.</p> <p>Sometimes this information can become \u2018muddied\u2019 and misconstrued. This book aims to unpick some of the key ideas, practices and messages within the domain and determine what credible research has actually concluded.</p> <p>Myths of Sport Coaching is written by leading international researchers and practitioners and offers invaluable theoretical and practical guidance, debunking some common myths and misconceptions in an engaging and informative way.</p> <p>The book supports an evidence-based practice approach and is an important companion for all those learning through sport and hopefully to reflect critically on the way you operate within your sport.</p> <p>Each chapter contains a QR code to a video from the chapter author and this connection introduces the wonderful people we share this book with and their passion.</p> <p>We hope this book helps you demystify some of the challenges you are facing on your journey.</p> <p>Table of contents Myths about Deliberate Practice Edward Coughlan</p> <p>The Science of Fun in Sport: Fact over Fiction Amanda J. Visek &amp; Anna Feiler</p> <p>Communities of Practice: Common Misconceptions Diane M. Culver, Tiago Duarte, and Don Vinson</p> <p>A \u2018Fundamental\u2019 Myth of Movement with a \u2018Functional\u2019 Solution James R Rudd, Jonathan D Foulkes, Mark O\u2019Sullivan, and Carl T. Woods</p> <p>The Stepping Stone?: Challenging the Myth that Women\u2019s Sport is Less Significant than Men\u2019s Sport Ali Bowes</p> <p>Myths about Learning Styles in Sport Coach Education Anna Stodter</p> <p>Common Misconceptions about Parental Involvement in Youth Sport: Insights for coaches Sam Elliott</p> <p>Coaching is a 24\u00ad hour \u00ada \u00adday job Brendan Cropley, Sheldon Hanton, &amp; Lee Baldock</p> <p>10,000 hours and Early Specialization: Short\u00ad term Gains or Long\u00ad term Pain? Jody McGowan, Simon Walters, and Chris Whatman</p> <p>They Really Are \u2018a Different Kettle of Fish\u2019: Myths Surrounding the \u2018Effective Coaching\u2019 of the Female Athlete Luke Jones &amp; Zo\u00eb Avner</p> <p>Common Sport and Exercise nutrition Myths Encountered by Coaches and Athletes Liz Mahon, Claire Blennerhassett, &amp; Andy Sparks</p> <p>Reflection is \u2018Wholly Beneficial\u2019 for Coaches Lauren Downham &amp; Chris Cushion</p> <p>Do you have to walk it to talk it? The significance of an elite athletic career in becoming a high\u00ad performance coach in men\u2019s football and rugby union Alexander D. Blackett</p> <p>\u2018Questioning in Coaching Leads to Learning\u2019: A Deconstruction of Questioning Mark Partington</p> <p>The Evolving Role of the Sport Psychologist and the Myth that their Sole Role is to \u2018Fix\u2019 Athletes Laura Swettenham, Kristin McGinty-Minister, &amp; Stewart Bicker</p> <p>Is Goal\u00ad Setting an Effective Way to Improve Athletic Performance? Laura C. Healy and Desmond McEwan</p> <p>Clutch Plays, Clutch Performances, and Clutch Performers: Separating Myth from Reality Matthew J. Schweickle &amp; Patricia C. Jackman</p> <p>Caring Coaching: Examining the notion of \u2018cruel to be kind\u2019 and other caring myths Colum Cronin</p> <p>Psychological Resilience in High\u00ad Performance Athletes: Elucidating Some Common Myths and Misconceptions Jolan Kegelaers &amp; Mustafa Sarkar</p> <p>The Coach\u2013Athlete Relationship: What Are we Missing from the Sociocultural Context Christopher R. D. Wagstaff</p> <p>Rating: \u2605\u2605\u2605\u2605\u2606</p>"},{"location":"General/MyBooks/Football_books/#scanning-how-to-train-it-and-develop-game-awareness-see-more-think-quicker-play-better","title":"SCANNING - How to Train it and Develop Game Awareness: See More, Think Quicker, Play better","text":"<p>Author: McGreskin, Kevin</p> <p>Published Date: 2021-09-10</p> <p>Pages: 216.0</p> <p>ISBN: 9781910491508</p> <p>Summary: The Soccer eyeQ methodology is a proven and successful coaching method to increase scanning and improve game awareness, to provide your players with the tools to make better decisions. Pep Guardiola: \"Taking the right decision in the right moment. That is the most difficult thing in football.\" You will learn how to train scanning and game awareness through innovative training practices. Your players (and team) will take in information quicker, create a picture of what's around them, create an essential habit, and greatly enhance their decision making skills. Too many players focus intently on the ball, control it, and only then look up to see the options. The Soccer eyeQ practices use simple constraints which force players to scan more frequently and read the game situation. With the \"picture\" created, your players will be quicker, sharper, and make better decisions in all situations. The top players in the world scan the most and this is your chance to develop your players and improve their game awareness to scan like the best; De Bruyne, Mbappe, De Jong, Xavi, Fabregas, Iniesta, Henry, Lampard, and Gerrard. Xavi: \"Think quickly, look for spaces. That's what I do: look for spaces. All day. I'm always looking. All day, all day.\" The Soccer eyeQ methods can be easily added into your training sessions to increase scanning, making players faster and more effective in training and matches. See More - Think Quicker - Play Better! The book includes these sections with 16 Tactical Examples + 53 Practices and Progressions: The Soccer eyeQ Methodology Level 1 - Scanning of the Playing Area (Observation) Level 2 - Reading the Game Situation (Realization) Level 3 - Predicting How Play Will Develop (Anticipation) Soccer eyeQ Training Practices Adding the Soccer eyeQ Method to Existing Practices</p> <p>Rating: \u2605\u2605\u2605\u2605\u2606</p>"},{"location":"General/MyBooks/Football_books/#soccer-practice-games-3rd-edition","title":"Soccer Practice Games-3rd Edition","text":"<p>Author: Luxbacher, Joseph A.; Elliott, Eloise; Palmer, Stephen</p> <p>Published Date: 2010-06-08</p> <p>Pages: 224.0</p> <p>ISBN: 9780736083669</p> <p>Summary: Soccer's top practice games book returns bigger and better than ever! Engage your players and make each practice more challenging, productive, and fun with 175 games!</p> <p>Soccer Practice Games presents the best small-sided games for developing technique, skills, and soccer sense in players. In the third edition, you'll find more games on every aspect of play:</p> <ul> <li> <p>Warm-up and conditioning</p> </li> <li> <p>Dribbling, tackling, and shielding</p> </li> <li> <p>Passing and receiving</p> </li> <li> <p>Shooting and finishing</p> </li> <li> <p>Heading</p> </li> <li> <p>Goalkeeping</p> </li> </ul> <p>Each game maximizes player involvement, activity, and learning and contains at least one major objective related to player or team development. A new chapter presents large-group games that are ideal for teaching team tactics while simulating match competition. Best of all, each game can be adapted to accommodate players of various ages and abilities.</p> <p>Designed for youth through high school competition, Soccer Practice Games provides you with the most effective and fun way to learn and teach the game. This is one book you'll refer to again and again.</p> <p>Rating: \u2605\u2605\u2605\u2606\u2606</p>"},{"location":"General/MyBooks/Football_books/#sun-tzu-soccer-the-art-of-war-in-soccer-language-scenarios","title":"Sun Tzu Soccer: The Art of War in Soccer Language &amp; Scenarios","text":"<p>Author: Shannon, Liam</p> <p>Published Date: 2020-04-02</p> <p>Pages: 185.0</p> <p>ISBN: 9781651857724</p> <p>Summary: In 2002 Brazil national team coach Luiz Felipe Scolari actively used The Art of War for Brazil's successful World Cup campaign. Not only did Scolari read the book and apply its strategies, but on some occasions he actually slipped copies of the text underneath his players' doors during the night. Commenting on his use of The Art of War after the World Cup win, Scolari confirmed \"sometimes a different approach like this can help.\" Quite the understatement.Composed in the late 5th century BCE, The Art of War by Chinese general Sun Tzu is the most well-known and well-respected work on military strategy and philosophy in history. Proving its timeless brilliance, the now 2400-year-old text is still used in teaching strategy and philosophy at the leading military academies today. The Art of War is used as instructional material at the US Military Academy at West Point and it is also recommended reading for Royal Officer cadets at the Royal Military Academy, Sandhurst. Business Insider magazine names The Art of War as one of the top 25 most influential books ever written, and highly respected astrophysicist and social commentator Neil deGrasse Tyson identifies Sun Tzu's work as one of the \"seven books every intelligent person on the planet should read.\" The Art of War and Sun Tzu have been referenced and quoted in various movies and television shows, including \"Wall Street,\" \"The Rock,\" \"The Family Man\" \"Bandits,\" and the James Bond movie \"Die Another Day\". In television, The Art of War has been referenced countless times, including in two of the most popular and most critically acclaimed shows of all time: \"The Sopranos\" (season 3, episode 9) and \"Breaking Bad (season 2, episode 7). Most significantly for this project, The Art of War has been applied in sports, and not just by Scolari. NFL coach Bill Belichick, the coach with the most Super Bowl victories of all time, has stated on multiple occasions his admiration for The Art of War, with one specific headline reading \"Belichick explains how advice from Sun Tzu's 'The Art of War' helped build the Patriots dynasty.\" The advocation for Sun Tzu's strategies in all walks of life, including sports, could hardly be higher.</p> <p>Rating: \u2605\u2605\u2605\u2605\u2606</p>"},{"location":"General/MyBooks/Football_books/#the-intelligent-soccer-coach-player-centered-sessions-to-develop-confident-creative-players","title":"The Intelligent Soccer Coach: Player-Centered Sessions to Develop Confident, Creative Players","text":"<p>Author: Wild, Carl</p> <p>Published Date: 2021-09-02</p> <p>Pages: 312.0</p> <p>ISBN: 9781782552253</p> <p>Summary: The Intelligent Soccer Coach provides detailed insight into the concept behind soccer and what players need to be able to perform with confidence, while also being able to solve the varying problems they will encounter in each game. With this book, coaches are given the necessary knowledge to plan and deliver player-centered practices that are both relevant and realistic to the game. These practices will provide players with an enjoyable and challenging environment that will in turn encourage them to be creative, independent decision-makers.</p> <p>Rating: \u2605\u2605\u2605\u2605\u2606</p>"},{"location":"General/MyBooks/Football_books/#the-step-by-step-training-manual-of-soccer-skills-techniques-hundreds-of-training-tips-and-techniques-with-easy-to-follow-instructions-in-over-750-photographs-and-diagrams","title":"The Step-by-step Training Manual of Soccer Skills &amp; Techniques: Hundreds of Training Tips and Techniques, with Easy-to-follow Instructions in Over 750 Photographs and Diagrams","text":"<p>Author: Publishing, Anness</p> <p>Published Date: 2016-03-17</p> <p>Pages: 192.0</p> <p>ISBN: 9781843227717</p> <p>Summary: Provides step-by-step instructions on how to perform soccer techniques, improve basic skills, and enhance fitness.</p> <p>Rating: \u2605\u2605\u2605\u2605\u2606</p>"},{"location":"General/MyBooks/Football_books/#through-the-thirds-a-systematic-approach-to-planning-your-football-season-soccer-coaching","title":"Through the Thirds: A Systematic Approach to Planning Your Football Season (Soccer Coaching)","text":"<p>Author: Mee, Tony</p> <p>Published Date: 2020-06-01</p> <p>Pages: 214.0</p> <p>ISBN: 9781911121886</p> <p>Summary: Through The Thirds - from leading youth coach Tony Mee - offers a practical methodology for football coaches working with 12+ year-old footballers, who want to see their teams play with technique, confidence, and tactical intelligence. Tthe book contains more than 140 fully-illustrated exercise plans in colour.</p> <p>Rating: \u2605\u2605\u2605\u2605\u2606</p>"},{"location":"General/MyBooks/Football_books/#two-hats-a-guide-for-those-coaching-or-thinking-of-coaching-their-own-children","title":"Two Hats: A guide for those coaching or thinking of coaching their own children","text":"<p>Author: MacLelland, Gordon</p> <p>Published Date: 2020-08-06</p> <p>Pages: 92.0</p> <p>ISBN: 9781916362123</p> <p>Summary: nan</p> <p>Rating: \u2606\u2606\u2606\u2606\u2606</p>"},{"location":"General/MyBooks/Football_books/#youth-academy-training-program-u5-u8-new-methodology-from-italian-serie-a-coaches","title":"Youth Academy Training Program U5-U8 - New Methodology from Italian Serie 'A' Coaches'","text":"<p>Author: Mazzantini, Mirko; Bombardieri, Simone</p> <p>Published Date: 2013-06</p> <p>Pages: 124.0</p> <p>ISBN: 9780957670501</p> <p>Summary: Soccer Italian Style coaches Mirko Mazzantini (AFC Fiorentina) and Simone Bombardieri (Empoli FC) are both professional academy coaches and in this book demonstrate their brand new training program for U5-8 year olds. This book contains their detailed philosophy and methodology to train technique, individual tactics, motor skills and coordination, as well as 20 full sessions (100 practices).</p> <p>Rating: \u2605\u2605\u2605\u2605\u2606</p>"},{"location":"General/MyBooks/IT_related_books/","title":"IT related books","text":""},{"location":"General/MyBooks/IT_related_books/#table-of-contents","title":"Table of Contents","text":""},{"location":"General/MyBooks/IT_related_books/#0-9","title":"0-9","text":"<ul> <li>201 Principles of Software Development</li> <li>97 Things Every Programmer Should Know: Collective Wisdom from the Experts</li> <li>97 Things Every Project Manager Should Know: Collective Wisdom from the Experts</li> <li>97 Things Every Software Architect Should Know: Collective Wisdom from the Experts</li> </ul>"},{"location":"General/MyBooks/IT_related_books/#a","title":"A","text":"<ul> <li>A pocket companion to Pmi's Pmbok\u00ae Guide (updated version): Based on PMBOK\u00ae Guide Fourth edition (PMI series)</li> <li>Adrenaline Junkies and Template Zombies: Understanding Patterns of Project Behavior</li> <li>Agile in a Flash: Speed-Learning Agile Software Development</li> <li>Agile Project Management with Kanban (Developer Best Practices)</li> <li>Agile Project Management With Scrum + Kanban 2 In 1: The Last 2 Approaches You'll Need To Become More Productive And Meet Your Project Goals</li> <li>Agile Software Development Ecosystems (Agile Software Development Series)</li> <li>Agile Software Development, Principles, Patterns, and Practices</li> <li>Algorithms in C, Parts 1-4: Fundamentals, Data Structures, Sorting, Searching: Fundamentals, Data Structures, Sorting, Searching (3rd Edition) (Pts. 1-4)</li> <li>APM Body of Knowledge, 6th edition</li> <li>Applied Software Project Management</li> </ul>"},{"location":"General/MyBooks/IT_related_books/#b","title":"B","text":"<ul> <li>Become an Awesome Software Architect: Book 1: Foundation 2019</li> <li>Behind Closed Doors: Secrets of Great Management</li> <li>Better Embedded System Software</li> <li>BPMN Pocket Reference: A Practical Guide To The International Business Process Model And Notation Standard BPMN Version 2.0</li> </ul>"},{"location":"General/MyBooks/IT_related_books/#c","title":"C","text":"<ul> <li>CMMI: Guidelines for Process Integration and Product Improvement (Sei Series in Software Engineering)</li> <li>Code Complete</li> <li>Coding: the 21st century's most valuable skill</li> <li>Configuration Management Best Practices: Practical Methods that Work in the Real World: Practical Methods that Work in the Real World</li> </ul>"},{"location":"General/MyBooks/IT_related_books/#d","title":"D","text":"<ul> <li>Design It!: From Programmer to Software Architect (The Pragmatic Programmers)</li> <li>Design Patterns: Elements of Reusable Object-Oriented Software</li> <li>Design Principles for Embedded Systems (Transactions on Computer Systems and Networks)</li> <li>Documenting Software Architectures: Views and Beyond (SEI Series in Software Engineering)</li> <li>Drive: The Surprising Truth About What Motivates Us</li> </ul>"},{"location":"General/MyBooks/IT_related_books/#e","title":"E","text":"<ul> <li>Embedded C Coding Standard</li> <li>Embedded Linux Development Using Yocto Project Cookbook: Practical recipes to help you leverage the power of Yocto to build exciting Linux-based systems, 2nd Edition</li> <li>Embedded Systems Dictionary</li> <li>Essential Guide to Telecommunications, The</li> <li>Even Grues Get Full \u2013 The Fourth User Friendly Collection</li> <li>Evil Geniuses in a Nutshell \u2013 A User Friendly Guide to World Domination (Nutshell Handbook)</li> </ul>"},{"location":"General/MyBooks/IT_related_books/#f","title":"F","text":"<ul> <li>Facts and Fallacies of Software Engineering (Agile Software Development)</li> <li>Function Point Analysis: Measurement Practices for Successful Software Projects (Addison-Wesley Information Technology Series)</li> <li>Fundamentals of Software Architecture: An Engineering Approach</li> </ul>"},{"location":"General/MyBooks/IT_related_books/#g","title":"G","text":"<ul> <li>Getting Results form Software Development Teams</li> <li>Guide to the Software Engineering Body of Knowledge (SWEBOK(R)): 2004 Version</li> <li>Guide to the Software Engineering Body of Knowledge (SWEBOK(R)): Version 3.0</li> </ul>"},{"location":"General/MyBooks/IT_related_books/#h","title":"H","text":"<ul> <li>Handbook of Basic Electrical Engineering</li> <li>Head First Object\u2013Oriented Analysis and Design: The Best Introduction to Object Orientated Programming</li> <li>Herding Cats: A Primer for Programmers Who Lead Programmers</li> </ul>"},{"location":"General/MyBooks/IT_related_books/#i","title":"I","text":"<ul> <li>Implementing Iso 9001:2015: Thrill your customers and transform your cost base with the new gold standard for business management</li> <li>Internet Communications Using SIP: Delivering VoIP and Multimedia Services with Session Initiation Protocol (Networking Council Series)</li> <li>Introduction to JavaScript Object Notation: A To-The-Point Guide to Json</li> <li>Introduction to Solution Architecture</li> <li>IoT and Edge Computing for Architects: Implementing edge and IoT systems from sensors to clouds with communication systems, analytics, and security, 2nd Edition</li> </ul>"},{"location":"General/MyBooks/IT_related_books/#j","title":"J","text":"<ul> <li>JSON at Work: Practical Data Integration for the Web</li> </ul>"},{"location":"General/MyBooks/IT_related_books/#k","title":"K","text":"<ul> <li>Kanban: Successful Evolutionary Change for Your Technology Business: Successful Evolutionary Change for your Technology Business: Successful Evolutionary Change for your Technology Business</li> </ul>"},{"location":"General/MyBooks/IT_related_books/#l","title":"L","text":"<ul> <li>Leadership and Self-Deception: Getting Out of the Box</li> <li>Leading a Software Development Team: A developer's guide to successfully leading people &amp; projects</li> </ul>"},{"location":"General/MyBooks/IT_related_books/#m","title":"M","text":"<ul> <li>Manage It! Your Guide to Modern, Pragmatic Project Mangagement: Your Guide to Modern, Pragmatic Project Management</li> <li>Manage Your Project Portfolio: Increase Your Capacity and Finish More Projects</li> <li>Managing and Leading Software Projects</li> <li>Managing Humans: Biting and Humorous Tales of a Software Engineering Manager</li> <li>Managing the Software Process (Sei Series in Software Engineering)</li> <li>Mastering Embedded Linux Programming: Create fast and reliable embedded solutions with Linux 5.4 and the Yocto Project 3.1 (Dunfell), 3rd Edition</li> <li>Mastering the Requirements Process</li> <li>Microservices and Containers</li> <li>More Joel on Software: Further Thoughts on Diverse and Occasionally Related Matters That Will Prove of Interest to Software Developers, Designers, and ... or Ill Luck, Work with Them in Some Capacity</li> <li>Mythical Man-Month, The: Essays on Software Engineering, Anniversary Edition</li> </ul>"},{"location":"General/MyBooks/IT_related_books/#n","title":"N","text":"<ul> <li>Network Warrior</li> <li>Newnes Data Communications Pocket Book</li> </ul>"},{"location":"General/MyBooks/IT_related_books/#p","title":"P","text":"<ul> <li>Packet Guide to Core Network Protocols</li> <li>Packet Guide to Routing and Switching: Exploring the Network Layer</li> <li>Peopleware : Productive Projects and Teams</li> <li>Practical Software Architecture: Moving from System Context to Deployment</li> <li>Practical Software Metrics For Project Management And Process Improvement</li> <li>Practice of Programming, The (Addison-Wesley Professional Computing Series)</li> <li>Pragmatic Thinking and Learning: Refactor Your Wetware (Pragmatic Programmers)</li> <li>Principles Of Software Engineering Management</li> <li>Professional Software Development: Shorter Schedules, Higher Quality Products, More Successful Projects, Enhanced Careers</li> <li>Programming Pearls</li> <li>Project Management Body of Knowledge GUIDE GUIDE PROJECT MGMT BODY KNOWLEDGE: (Pmbok Guide)</li> <li>Python Pocket Reference 4e</li> </ul>"},{"location":"General/MyBooks/IT_related_books/#r","title":"R","text":"<ul> <li>Rapid Development: Taming Wild Software Schedules</li> <li>Real Leaders Don't Do Powerpoint: How to speak so people listen</li> <li>Real-Time Software Design for Embedded Systems</li> <li>Reflections on Management: How to Manage Your Software Projects, Your Teams, Your Boss, and Yourself (Sei Series in Software Engineering)</li> <li>Regular Expression Pocket Reference: Regular Expressions for Perl, Ruby, PHP, Python, C, Java and .NET (Pocket Reference (O'Reilly))</li> <li>RESTFUL WEB SERVICES</li> <li>Return on Software: Maximizing the Return on Your Software Investment</li> </ul>"},{"location":"General/MyBooks/IT_related_books/#s","title":"S","text":"<ul> <li>SAFe 5.0 Distilled: Achieving Business Agility with the Scaled Agile Framework</li> <li>Scrum Mastery: From Good To Great Servant-Leadership</li> <li>sed &amp; awk Pocket Reference 2e: Text Processing with Regular Expressions (Pocket Reference (O'Reilly))</li> <li>SIP: Understanding the Session Initiation Protocol (Artech House Telecommunications Library)</li> <li>Slack: Getting Past Burn-out, Busywork, and the Myth of Total Efficiency</li> <li>Software Architect's Handbook: Become a successful software architect by implementing effective architecture concepts</li> <li>Software Architecture in Practice (SEI Series in Software Engineering)</li> <li>Software Architecture in Practice (SEI Series in Software Engineering)</li> <li>Software Architecture: The Hard Parts: Modern Trade-Off Analyses for Distributed Architectures</li> <li>Software Engineering (International Computer Science Series)</li> <li>Software Engineering: Update, 8th Edition (International Computer Science Series)</li> <li>Software Estimation: Demystifying the Black Art</li> <li>Software Extension to the PMBOK Guide</li> <li>Software Project Survival Guide (Pro -- Best Practices)</li> <li>Software Requirements (Developer Best Practices)</li> <li>Solutions Architect's Handbook: Kick-start your solutions architect career by learning architecture design principles and strategies</li> <li>SQL in a Nutshell \u2013 A Desktop Quick Reference</li> <li>SQL Pocket Guide 2e (Missing Manual)</li> <li>Succeeding with Agile: Software Development Using Scrum (Addison-Wesley Signature Series (Cohn))</li> <li>SysML Distilled: A Brief Guide to the Systems Modeling Language</li> </ul>"},{"location":"General/MyBooks/IT_related_books/#t","title":"T","text":"<ul> <li>TCP/IP Illustrated, Vol. 1: The Protocols (Addison-Wesley Professional Computing Series)</li> <li>Team Geek: A Software Developer's Guide to Programming Well with Others</li> <li>The 7 Habits of Highly Effective People</li> <li>The 8th Habit: From Effectiveness to Greatness</li> <li>The Basics of Hacking and Penetration Testing: Ethical Hacking and Penetration Testing Made Easy</li> <li>The C Programming Language</li> <li>The Elements of UML\u2122 2.0 Style</li> <li>The First 90 Days: Critical Success Strategies for New Leaders at All Levels</li> <li>The Healthy Programmer: Get Fit, Feel Better, and Keep Coding (Pragmatic Programmers)</li> <li>The Ideas Book: 60 ways to generate ideas visually (Concise Advice Series)</li> <li>The Illustrated Network: How TCP/IP Works in a Modern Network</li> <li>The Infinite Game: From the bestselling author of Start With Why</li> <li>The Lazy Project Manager: How to be twice as productive and still leave the office early</li> <li>The Object-Oriented Thought Process (Developer's Library)</li> <li>The Official Raspberry Pi Beginner's Guide (The Official Raspberry Pi Beginner's Guide: How to use your new computer)</li> <li>The Passionate Programmer: Creating a Remarkable Career in Software Development (Pragmatic Life)</li> <li>The Pragmatic Programmer</li> <li>The Presentation Secrets of Steve Jobs: How to Be Insanely Great in Front of Any Audience (BUSINESS SKILLS AND DEVELOPMENT)</li> <li>The TCP/IP Guide: A Comprehensive, Illustrated Internet Protocols Reference</li> <li>The Three Levels of Leadership: How to Develop Your Leadership Presence, Knowhow and Skill</li> <li>the-ten-day-mba-4th-ed-a-step-by-step-guide-to-mastering-the-skills-taught-in-america-s-top-business-schools</li> </ul>"},{"location":"General/MyBooks/IT_related_books/#u","title":"U","text":"<ul> <li>UML 2.0 in a Nutshell: A Desktop Quick Reference (In a Nutshell (O'Reilly))</li> <li>UML Distilled: A Brief Guide to the Standard Object Modeling Language (Addison-Wesley Object Technology Series)</li> <li>User Friendly</li> </ul>"},{"location":"General/MyBooks/IT_related_books/#v","title":"V","text":"<ul> <li>VB &amp; VBA in a Nutshell \u2013 The Languages (In a Nutshell (O'Reilly))</li> <li>Visualizing Google Cloud: 101 Illustrated References for Cloud Engineers and Architects</li> </ul>"},{"location":"General/MyBooks/IT_related_books/#w","title":"W","text":"<ul> <li>Waltzing with Bears: Managing Risk on Software Projects</li> <li>Why Does Software Cost So Much?: And Other Puzzles of the Information Age</li> <li>Writing Effective Use Cases (Crystal Series for Software Development) (Agile Software Development Series)</li> <li>Writing Solid Code: Microsoft Techniques for Developing Bug-free C. Programs (Microsoft Programming Series)</li> </ul>"},{"location":"General/MyBooks/IT_related_books/#201-principles-of-software-development","title":"201 Principles of Software Development","text":"<p>Author: Davis, Alan M.</p> <p>Published Date: 1995-04-30</p> <p>Pages: 256.0</p> <p>ISBN: 9780070158405</p> <p>Summary: This text defines governing principles for software development, assumptions that work regardless of tools used, to keep software projects from costing too much, taking too long and disappointing users.</p> <p>Rating: \u2605\u2605\u2605\u2606\u2606</p>"},{"location":"General/MyBooks/IT_related_books/#97-things-every-programmer-should-know-collective-wisdom-from-the-experts","title":"97 Things Every Programmer Should Know: Collective Wisdom from the Experts","text":"<p>Author: Henney, Kevlin</p> <p>Published Date: 2010-02-19</p> <p>Pages: 256.0</p> <p>ISBN: 9780596809485</p> <p>Summary: Tap into the wisdom of experts to learn what every programmer should know, no matter what language you use. With the 97 short and extremely useful tips for programmers in this book, you'll expand your skills by adopting new approaches to old problems, learning appropriate best practices, and honing your craft through sound advice.</p> <p>With contributions from some of the most experienced and respected practitioners in the industry--including Michael Feathers, Pete Goodliffe, Diomidis Spinellis, Cay Horstmann, Verity Stob, and many more--this book contains practical knowledge and principles that you can apply to all kinds of projects.</p> <p>A few of the 97 things you should know:</p> <p>\"Code in the Language of the Domain\" by Dan North \"Write Tests for People\" by Gerard Meszaros \"Convenience Is Not an -ility\" by Gregor Hohpe \"Know Your IDE\" by Heinz Kabutz \"A Message to the Future\" by Linda Rising \"The Boy Scout Rule\" by Robert C. Martin (Uncle Bob) \"Beware the Share\" by Udi Dahan</p> <p>Rating: \u2605\u2605\u2605\u2606\u2606</p>"},{"location":"General/MyBooks/IT_related_books/#97-things-every-project-manager-should-know-collective-wisdom-from-the-experts","title":"97 Things Every Project Manager Should Know: Collective Wisdom from the Experts","text":"<p>Author: Davis, Barbee</p> <p>Published Date: 2009-08-28</p> <p>Pages: 250.0</p> <p>ISBN: 9780596804169</p> <p>Summary: If the projects you manage don't go as smoothly as you'd like, 97 Things Every Project Manager Should Know offers knowledge that's priceless, gained through years of trial and error. This illuminating book contains 97 short and extremely practical tips -- whether you're dealing with software or non-IT projects -- from some of the world's most experienced project managers and software developers. You'll learn how these professionals have dealt with everything from managing teams to handling project stakeholders to runaway meetings and more. While this book highlights software projects, its wise axioms contain project management principles applicable to projects of all types in any industry. You can read the book end to end or browse to find topics that are of particular relevance to you. 97 Things Every Project Manager Should Know is both a useful reference and a source of inspiration. Among the 97 practical tips: \"Clever Code Is Hard to Maintain...and Maintenance Is Everything\" -- David Wood, Partner, Zepheira \"Every Project Manager Is a Contract Administrator\" -- Fabio Teixeira de Melo, Planning Manager, Construtora Norberto Odebrecht \"Can Earned Value and Velocity Coexist on Reports?\" -- Barbee Davis, President, Davis Consulting \"How Do You Define 'Finished'\"? -- Brian Sam-Bodden, author, software architect \"The Best People to Create the Estimates Are the Ones Who Do the Work\" -- Joe Zenevitch, Senior Project Manager, ThoughtWorks \"How to Spot a Good IT Developer\" -- James Graham, independent management consultant \"One Deliverable, One Person\" -- Alan Greenblatt, CEO, Sciova</p> <p>Rating: \u2605\u2605\u2605\u2606\u2606</p>"},{"location":"General/MyBooks/IT_related_books/#97-things-every-software-architect-should-know-collective-wisdom-from-the-experts","title":"97 Things Every Software Architect Should Know: Collective Wisdom from the Experts","text":"<p>Author: Monson-Haefel, Richard; Monson-Haefel, Richard</p> <p>Published Date: 2009-02-20</p> <p>Pages: 220.0</p> <p>ISBN: 9780596522698</p> <p>Summary: In this truly unique technical book, today's leading software architects present valuable principles on key development issues that go way beyond technology. More than four dozen architects -- including Neal Ford, Michael Nygard, and Bill de hOra -- offer advice for communicating with stakeholders, eliminating complexity, empowering developers, and many more practical lessons they've learned from years of experience. Among the 97 principles in this book, you'll find useful advice such as: Don't Put Your Resume Ahead of the Requirements (Nitin Borwankar) Chances Are, Your Biggest Problem Isn't Technical (Mark Ramm) Communication Is King; Clarity and Leadership, Its Humble Servants (Mark Richards) Simplicity Before Generality, Use Before Reuse (Kevlin Henney) For the End User, the Interface Is the System (Vinayak Hegde) It's Never Too Early to Think About Performance (Rebecca Parsons) To be successful as a software architect, you need to master both business and technology. This book tells you what top software architects think is important and how they approach a project. If you want to enhance your career, 97 Things Every Software Architect Should Know is essential reading.</p> <p>Rating: \u2605\u2605\u2605\u2606\u2606</p>"},{"location":"General/MyBooks/IT_related_books/#a-pocket-companion-to-pmis-pmbok-guide-updated-version-based-on-pmbok-guide-fourth-edition-pmi-series","title":"A pocket companion to Pmi's Pmbok\u00ae Guide (updated version): Based on PMBOK\u00ae Guide Fourth edition (PMI series)","text":"<p>Author: Snijders, Paul; Wuttke, Thomas; Zanduis, Anton</p> <p>Published Date: 2012-08-03</p> <p>Pages: 156.0</p> <p>ISBN: 9789087536978</p> <p>Summary: This pocket guide is based on the PMBOK Guide Fourth Edition. It contains a summary of the PMBOK Guide, to provide a quick introduction as well as a structured overview of this framework for project management. This pocket guide deals with the key issues and themes within project management and the PMBOK Guide as follows: A short overview of the activities of PMI Inc., the organization and its standards: PMBOK Guide, Standard for Project Portfolio Management, Standard for Program Management, and other standards.</p> <p>The essentials of the Project Lifecycle and Organization.</p> <p>What are the key project management knowledge areas and processes?</p> <p>Main target Group for this pocket guide is anyone with an interest in understanding the method in the PMBOK Guide framework or a systematic approach for project management. The book is also very useful for members of a project management team in a project environment using the PMBOK Guide as a shared reference.</p> <p>Rating: \u2605\u2605\u2605\u2605\u2606</p>"},{"location":"General/MyBooks/IT_related_books/#adrenaline-junkies-and-template-zombies-understanding-patterns-of-project-behavior","title":"Adrenaline Junkies and Template Zombies: Understanding Patterns of Project Behavior","text":"<p>Author: DeMarco, Tom; Hruschka, Peter; Lister, Timothy R.; Robertson, Suzanne</p> <p>Published Date: 2013-07-15</p> <p>Pages: 331.0</p> <p>ISBN: 9780932633675</p> <p>Summary: This is the digital version of the printed book (Copyright \u00a9 2008). Adrenaline junkies, dead fish, project sluts, true believers, Lewis and Clark, template zombies . . . Most developers, testers, and managers on IT projects are pretty good at recognizing patterns of behavior and gut-level hunches, as in, \u201cI sense that this project is headed for disaster.\u201d But it has always been more difficult to transform these patterns and hunches into a usable form, something a team can debate, refine, and use. Until now. In Adrenaline Junkies and Template Zombies, the six principal consultants of The Atlantic Systems Guild present the patterns of behavior they most often observe at the dozens of IT firms they transform each year, around the world. The result is a quick-read guide to identifying nearly ninety typical scenarios, drawing on a combined one-hundred-and-fifty years of project management experience. Project by project, you\u2019ll improve the accuracy of your hunches and your ability to act on them. The patterns are presented in an easy-reference format, with names designed to ease communication with your teammates. In just a few words, you can describe what\u2019s happening on your project. Citing the patterns of behavior can help you quickly move those above and below you to the next step on your project. You\u2019ll find classic patterns such as these: News Improvement Management by Mood Ring Piling On Rattle Yer Dags Natural Authority Food++ Fridge Door and more than eighty more! Not every pattern will be evident in your organization, and not every pattern is necessarily good or bad. However, you\u2019ll find many patterns that will apply to your current and future assignments, even in the most ambiguous circumstances. When you assess your situation and follow your next hunch, you'll have the collective wisdom of six world-class consultants at your side.</p> <p>Rating: \u2605\u2605\u2605\u2606\u2606</p>"},{"location":"General/MyBooks/IT_related_books/#agile-in-a-flash-speed-learning-agile-software-development","title":"Agile in a Flash: Speed-Learning Agile Software Development","text":"<p>Author: Langr, Jeff; Ottinger, Tim</p> <p>Published Date: 2011</p> <p>Pages: 52.0</p> <p>ISBN: 9781934356715</p> <p>Summary: Real agilists don't weigh themselves down with libraries of books, they keep their important information handy with them at all times. Jeff and Tim pack over two decades of experience coaching and doing agile into Agile in a Flash, a unique deck of index cards that fit neatly in your pocket and tack easily onto the wall. Agile in a Flash cards run the gamut of agile, covering customer, planning, team, and developer concepts to help you succeed on agile projects. You can use cards from the deck in many ways: as references, reminders, teaching tools, and conversation pieces. Why not get sets for your entire team or organization?</p> <p>This comprehensive set of cards is an indispensable resource for agile teams. The deck of Agile in a Flash cards teaches leadership, teamwork, clean programming, agile approaches to problem solving, and tips for coaching agile teams. Team members can use the cards as reference material, ice breakers for conversations, reminders (taped to a wall or monitor), and sources of useful tips and hard-won wisdom. The cards are:</p> <p>Bite-sized! Read one practice or aspect at a time in a couple of minutes.</p> <p>Smart! Each card has years of practical experience behind it.</p> <p>Portable! Cards fit easily in your pocket or backpack.</p> <p>An indispensable tool for any agile team, and a must-have for every agile coach or Scrum Master.</p> <p>The Agile in a Flash deck is broken into four areas: planning, team, coding, and agile concepts. The front of each card is a quick list - a summary of the things you want to know and remember. The back provides further detail on each of the bullet points, and offers sage nuggets of knowledge based on extensive professional experience. Tape the cards to your wall, stick them on your monitor, and get agile fast.</p> <p>Rating: \u2605\u2605\u2605\u2606\u2606</p>"},{"location":"General/MyBooks/IT_related_books/#agile-project-management-with-kanban-developer-best-practices","title":"Agile Project Management with Kanban (Developer Best Practices)","text":"<p>Author: Brechner, Eric</p> <p>Published Date: 2015-03-16</p> <p>Pages: 160.0</p> <p>ISBN: 9780735698956</p> <p>Summary: Think, \"Kanban in a box.\" Imagine you ordered Kanban for your team, and got the box delivered to your door. You open the box and right on top is a quick-start guide. Being a novice, you follow the guide, and quickly get up and running. As you become more experienced, the other box contents address common advanced issues you'd face, like right-sizing teams, estimation, hitting deadlines, transitioning from Scrum or Waterfall, deploying components and services, and using Kanban within larger organizations. Real-world experience from a direct practitioner working on Xbox and Xbox.com A concise, pragmatic, and easy-to-read guide with clear, fresh, and hard-won guidance Using Kanban within larger organizations - how to deal with upper management, planning, and dependencies</p> <p>Rating: \u2605\u2605\u2605\u2606\u2606</p>"},{"location":"General/MyBooks/IT_related_books/#agile-project-management-with-scrum-kanban-2-in-1-the-last-2-approaches-youll-need-to-become-more-productive-and-meet-your-project-goals","title":"Agile Project Management With Scrum + Kanban 2 In 1: The Last 2 Approaches You'll Need To Become More Productive And Meet Your Project Goals","text":"<p>Author: Sammons, Andrew</p> <p>Published Date: 2019-11-22</p> <p>Pages: 320.0</p> <p>ISBN: 9781710687262</p> <p>Summary: nan</p> <p>Rating: \u2605\u2605\u2605\u2606\u2606</p>"},{"location":"General/MyBooks/IT_related_books/#agile-software-development-ecosystems-agile-software-development-series","title":"Agile Software Development Ecosystems (Agile Software Development Series)","text":"<p>Author: Highsmith, Jim; Poppendieck, Tom</p> <p>Published Date: 2002-03-26</p> <p>Pages: 448.0</p> <p>ISBN: 9780201760439</p> <p>Summary: Lean Software Development: An Agile Toolkit Adapting agile practices to your development organization Uncovering and eradicating waste throughout the software development lifecycle Practical techniques for every development manager, project manager, and technical leader Lean software development: applying agile principles to your organization In Lean Software Development, Mary and Tom Poppendieck identify seven fundamental \"lean\" principles, adapt them for the world of software development, and show how they can serve as the foundation for agile development approaches that work. Along the way, they introduce 22 \"thinking tools\" that can help you customize the right agile practices for any environment. Better, cheaper, faster software development. You can have all three\u2013if you adopt the same lean principles that have already revolutionized manufacturing, logistics and product development. Iterating towards excellence: software development as an exercise in discovery Managing uncertainty: \"decide as late as possible\" by building change into the system. Compressing the value stream: rapid development, feedback, and improvement Empowering teams and individuals without compromising coordination Software with integrity: promoting coherence, usability, fitness, maintainability, and adaptability How to \"see the whole\"\u2013even when your developers are scattered across multiple locations and contractors Simply put, Lean Software Development helps you refocus development on value, flow, and people\u2013so you can achieve breakthrough quality, savings, speed, and business alignment.</p> <p>Rating: \u2605\u2605\u2605\u2606\u2606</p>"},{"location":"General/MyBooks/IT_related_books/#agile-software-development-principles-patterns-and-practices","title":"Agile Software Development, Principles, Patterns, and Practices","text":"<p>Author: Martin, Robert C.</p> <p>Published Date: 2002-11-20</p> <p>Pages: 552.0</p> <p>ISBN: 9780135974445</p> <p>Summary: For courses in Object-Oriented Design, C++ Intermediate Programming, and Object-Oriented Programming. Written for software engineers in the trenches, this text focuses on the technology--the principles, patterns, and process--that help software engineers effectively manage increasingly complex operating systems and applications. There is also a strong emphasis on the people behind the technology. This text will prepare students for a career in software engineering and serve as an on-going education for software engineers.</p> <p>Rating: \u2605\u2605\u2605\u2605\u2606</p>"},{"location":"General/MyBooks/IT_related_books/#algorithms-in-c-parts-1-4-fundamentals-data-structures-sorting-searching-fundamentals-data-structures-sorting-searching-3rd-edition-pts-1-4","title":"Algorithms in C, Parts 1-4: Fundamentals, Data Structures, Sorting, Searching: Fundamentals, Data Structures, Sorting, Searching (3rd Edition) (Pts. 1-4)","text":"<p>Author: Sedgewick, Robert; University, Robert Sedgewick - Princeton</p> <p>Published Date: 1997-09-17</p> <p>Pages: 720.0</p> <p>ISBN: 9780201314526</p> <p>Summary: nan</p> <p>Rating: \u2605\u2605\u2605\u2605\u2606</p>"},{"location":"General/MyBooks/IT_related_books/#apm-body-of-knowledge-6th-edition","title":"APM Body of Knowledge, 6th edition","text":"<p>Author: Management, Association for Project</p> <p>Published Date: 2012-08-21</p> <p>Pages: 198.0</p> <p>ISBN: 9781903494400</p> <p>Summary: The APM Body of Knowledge 6th edition provides the foundation for the successful delivery of projects, programmes and portfolios across all sectors and industries. Written by the profession for the profession it offers the key to successful project management and is an essential part of the APM Five Dimensions of Professionalism. It is a scope statement for the profession and a sourcebook for all aspiring, new and experienced project professionals offering common definitions, references and a comprehensive glossary of terms.</p> <p>Rating: \u2605\u2605\u2605\u2606\u2606</p>"},{"location":"General/MyBooks/IT_related_books/#applied-software-project-management","title":"Applied Software Project Management","text":"<p>Author: Stellman, Andrew; Greene, Jennifer</p> <p>Published Date: 2005-12-02</p> <p>Pages: 304.0</p> <p>ISBN: 9780596009489</p> <p>Summary: \"If you're looking for solid, easy-to-follow advice on estimation, requirements gathering, managing change, and more, you can stop now: this is the book for you.\" --Scott Berkun, Author of The Art of Project Management</p> <p>What makes software projects succeed? It takes more than a good idea and a team of talented programmers. A project manager needs to know how to guide the team through the entire software project. There are common pitfalls that plague all software projects and rookie mistakes that are made repeatedly--sometimes by the same people! Avoiding these pitfalls is not hard, but it is not necessarily intuitive. Luckily, there are tried and true techniques that can help any project manager.</p> <p>In Applied Software Project Management, Andrew Stellman and Jennifer Greene provide you with tools, techniques, and practices that you can use on your own projects right away. This book supplies you with the information you need to diagnose your team's situation and presents practical advice to help you achieve your goal of building better software.</p> <p>Topics include:</p> <p>Planning a software project Helping a team estimate its workload Building a schedule Gathering software requirements and creating use cases Improving programming with refactoring, unit testing, and version control Managing an outsourced project Testing software Jennifer Greene and Andrew Stellman have been building software together since 1998. Andrew comes from a programming background and has managed teams of requirements analysts, designers, and developers. Jennifer has a testing background and has managed teams of architects, developers, and testers. She has led multiple large-scale outsourced projects. Between the two of them, they have managed every aspect of software development. They have worked in a wide range of industries, including finance, telecommunications, media, nonprofit, entertainment, natural-language processing, science, and academia. For more information about them and this book, visit http://www.stellman-greene.com.</p> <p>Rating: \u2605\u2605\u2605\u2606\u2606</p>"},{"location":"General/MyBooks/IT_related_books/#become-an-awesome-software-architect-book-1-foundation-2019","title":"Become an Awesome Software Architect: Book 1: Foundation 2019","text":"<p>Author: Volkhover, Anatoly</p> <p>Published Date: 2019-10-07</p> <p>Pages: 190.0</p> <p>ISBN: 9781697271065</p> <p>Summary: Great software architects aren\u2019t born. They are a product of decades of building real-life solutions and relentless learning. They become really good at their trade closer to the retirement age. But most startups are fostered by young entrepreneurs who dare to try but lack the experience. They also lack the $$ to hire a silver-haired architect to join their team from day one. Left to their own faculties, the entrepreneurs and their engineering teams quickly get on the path of learning from their own mistakes. Eventually, they discover this is the most expensive way of learning. Over time they get better, and some become the true masters of the craft \u2013 but way too late to make a difference for their early-day projects. </p> <p>This book is meant to break the vicious circle. It isn\u2019t a textbook, at least not in the traditional sense. It is a business-centric practical guide to software architecture, intended for software engineers, technology executives, students of computer science, and tech-savvy entrepreneurs who want to de-risk their entrepreneurial endeavors or to fast-track their careers in software engineering. The recipes in this book are highly practical, battle-tested, and current for building mid- to large-scale systems in 2019.</p> <p>Rating: \u2605\u2605\u2605\u2606\u2606</p>"},{"location":"General/MyBooks/IT_related_books/#behind-closed-doors-secrets-of-great-management","title":"Behind Closed Doors: Secrets of Great Management","text":"<p>Author: Rothman, Johanna; Derby, Esther</p> <p>Published Date: 2005-10-04</p> <p>Pages: 176.0</p> <p>ISBN: 9780976694021</p> <p>Summary: Great management is difficult to see as it occurs. It's possible to see the results of great management, but it's not easy to see how managers achieve those results. Great management happens in one-on-one meetings and with other managers---all in private. It's hard to learn management by example when you can't see it. </p> <p>You can learn to be a better manager---even a great manager---with this guide. You'll follow along as Sam, a manager just brought on board, learns the ropes and deals with his new team over the course of his first eight weeks on the job. From scheduling and managing resources to helping team members grow and prosper, you'll be there as Sam makes it happen. You'll find powerful tips covering: </p> <p>Delegating effectively</p> <p>Using feedback and goal-setting</p> <p>Developing influence</p> <p>Handling one-on-one meetings</p> <p>Coaching and mentoring</p> <p>Deciding what work to do---and what not to do</p> <p>...and more. </p> <p>Full of tips and practical advice on the most important aspects of management, this is one of those books that can make a lasting and</p> <p>immediate impact on your career.</p> <p>Rating: \u2605\u2605\u2605\u2606\u2606</p>"},{"location":"General/MyBooks/IT_related_books/#better-embedded-system-software","title":"Better Embedded System Software","text":"<p>Author: Koopman, Philip</p> <p>Published Date: 2021-01-26</p> <p>Pages: 384.0</p> <p>ISBN: 9798596008050</p> <p>Summary: A classic book for professional embedded system designers, now in an affordable paperback edition. This book distills the experience of more than 90 design reviews on real embedded systems into a set of bite-size lessons learned in the areas of software development process, requirements, architecture, design, implementation, verification &amp; validation, and critical system properties. This is a concept book rather than a cut-and-paste the code book.Each chapter describes an area that tends to be a problem in embedded system design, symptoms that tend to indicate you need to make changes, the risks of not fixing problems in this area, and concrete ways to make your embedded system software better. Each of the 29 chapters is self-sufficient, permitting developers with a busy schedule to cherry-pick the best ideas to make their systems better right away.If you are relatively new to the area but have already learned the basics, this book will be an invaluable asset for taking your game to the next level. If you are experienced, this book provides a way to fill in any gaps. Once you have mastered this material, the book will serve as a source of reminders to make sure you haven't forgotten anything as you plan your next project. This is version 1.1 with some minor revisions from the 2010 hardcover edition. This is a paperback print-on-demand edition produced by Amazon.</p> <p>Rating: \u2605\u2605\u2605\u2605\u2606</p>"},{"location":"General/MyBooks/IT_related_books/#bpmn-pocket-reference-a-practical-guide-to-the-international-business-process-model-and-notation-standard-bpmn-version-20","title":"BPMN Pocket Reference: A Practical Guide To The International Business Process Model And Notation Standard BPMN Version 2.0","text":"<p>Author: Sherry, Kenneth J.</p> <p>Published Date: 2012-03-09</p> <p>Pages: 126.0</p> <p>ISBN: 9781470067830</p> <p>Summary: nan</p> <p>Rating: \u2605\u2605\u2605\u2606\u2606</p>"},{"location":"General/MyBooks/IT_related_books/#cmmi-guidelines-for-process-integration-and-product-improvement-sei-series-in-software-engineering","title":"CMMI: Guidelines for Process Integration and Product Improvement (Sei Series in Software Engineering)","text":"<p>Author: Chrissis, Mary Beth; Konrad, Mike; Shrum, Sandy</p> <p>Published Date: 2003-02-24</p> <p>Pages: 688.0</p> <p>ISBN: 9780321154965</p> <p>Summary: nan</p> <p>Rating: \u2605\u2605\u2605\u2606\u2606</p>"},{"location":"General/MyBooks/IT_related_books/#code-complete","title":"Code Complete","text":"<p>Author: McConnell, Steve</p> <p>Published Date: 2004</p> <p>Pages: 914.0</p> <p>ISBN: 9780735619678</p> <p>Summary: Take a strategic approach to software constructionand produce superior productswith this fully updated edition of Steve McConnells critically praised and award-winning guide to software development best practices.</p> <p>Rating: \u2605\u2605\u2605\u2605\u2606</p>"},{"location":"General/MyBooks/IT_related_books/#coding-the-21st-centurys-most-valuable-skill","title":"Coding: the 21st century's most valuable skill","text":"<p>Author: Monk, Dr Simon</p> <p>Published Date: 2023-07-29</p> <p>Pages: 212.0</p> <p>ISBN: 9781739487409</p> <p>Summary: nan</p> <p>Rating: \u2606\u2606\u2606\u2606\u2606</p>"},{"location":"General/MyBooks/IT_related_books/#configuration-management-best-practices-practical-methods-that-work-in-the-real-world-practical-methods-that-work-in-the-real-world","title":"Configuration Management Best Practices: Practical Methods that Work in the Real World: Practical Methods that Work in the Real World","text":"<p>Author: Aiello, Bob; Sachs, Leslie</p> <p>Published Date: 2010-08-10</p> <p>Pages: 272.0</p> <p>ISBN: 9780321685865</p> <p>Summary: Successfully Implement High-Value Configuration Management Processes in Any Development Environment As IT systems have grown increasingly complex and mission-critical, effective configuration management (CM) has become critical to an organization's success. Using CM best practices, IT professionals can systematically manage change, avoiding unexpected problems introduced by changes to hardware, software, or networks. Now, today's best CM practices have been gathered in one indispensable resource showing you how to implement them throughout any agile or traditional development organization. Configuration Management Best Practices is practical, easy to understand and apply, and fully reflects the day-to-day realities faced by practitioners. Bob Aiello and Leslie Sachs thoroughly address all six \"pillars\" of CM: source code management, build engineering, environment configuration, change control, release engineering, and deployment. They demonstrate how to implement CM in ways that support software and systems development, meet compliance rules such as SOX and SAS-70, anticipate emerging standards such as IEEE/ISO 12207, and integrate with modern frameworks such as ITIL, COBIT, and CMMI. Coverage includes Using CM to meet business objectives, contractual requirements, and compliance rules Enhancing quality and productivity through lean processes and \"just-in-time\" process improvement Getting off to a good start in organizations without effective CM Implementing a Core CM Best Practices Framework that supports the entire development lifecycle Mastering the \"people\" side of CM: rightsizing processes, overcoming resistance, and understanding  workplace psychology Architecting applications to take full advantage of CM best practices Establishing effective IT controls and compliance Managing tradeoffs and costs and avoiding expensive pitfalls Configuration Management Best Practices is the essential resource for everyone concerned with CM: from CTOs and CIOs to development, QA, and project managers and software engineers to analysts, testers, and compliance professionals. Praise for Configuration Management Best Practices \"Understanding change is critical to any attempt to manage change. Bob Aiello and Leslie Sachs's Configuration Management Best Practices presents fundamental definitions and explanations to help practitioners understand change and its potential impact.\" -Mary Lou A. Hines Fritts, CIO and Vice Provost Academic Programs, University of Missouri-Kansas City \"Few books on software configuration management emphasize the role of people and organizational context in defining and executing an effective SCM process. Bob Aiello and Leslie Sachs's book will give you the information you need not only to manage change effectively but also to manage the transition to a better SCM process.\" -Steve Berczuk, Agile Software Developer, and author of Software Configuration Management Patterns: Effective Teamwork, Practical Integration \"Bob Aiello and Leslie Sachs succeed handsomely in producing an important book, at a practical and balanced level of detail, for this topic that often 'goes without saying' (and hence gets many projects into deep trouble). Their passion for the topic shows as they cover a wonderful range of topics-even culture, personality, and dealing with resistance to change-in an accessible form that can be applied to any project. The software industry has needed a book like this for a long time!\" -Jim Brosseau, Clarrus Consulting Group, and author of Software Teamwork: Taking Ownership for Success \"A must read for anyone developing or managing software or hardware projects. Bob Aiello and Leslie Sachs are able to bridge the language gap between the myriad of communities involved with successful Configuration Management implementations. They describe practical, real world practices that can be implemented by developers, managers, standard makers, and even Classical CM Folk.\" -Bob Ventimiglia, Bobev Consulting \"A fresh and smart review of today's key concepts of SCM, build management, and related key practices on day-to-day software engineering. From the voice of an expert, Bob Aiello and Leslie Sachs offer an invaluable resource to success in SCM.\" -Pablo Santos Luaces, CEO of Codice Software \"Bob Aiello and Leslie Sachs have a gift for stimulating the types of conversation and thought that necessarily precede needed organizational change. What they have to say is always interesting and often important.\" -Marianne Bays, Business Consultant, Manager and Educator</p> <p>Rating: \u2605\u2605\u2605\u2606\u2606</p>"},{"location":"General/MyBooks/IT_related_books/#design-it-from-programmer-to-software-architect-the-pragmatic-programmers","title":"Design It!: From Programmer to Software Architect (The Pragmatic Programmers)","text":"<p>Author: Keeling, Michael</p> <p>Published Date: 2017-11-14</p> <p>Pages: 354.0</p> <p>ISBN: 9781680502091</p> <p>Summary: Don't engineer by coincidence-design it like you mean it! Filled with practical techniques, Design It! is the perfect introduction to software architecture for programmers who are ready to grow their design skills. Lead your team as a software architect, ask the right stakeholders the right questions, explore design options, and help your team implement a system that promotes the right -ilities. Share your design decisions, facilitate collaborative design workshops that are fast, effective, and fun-and develop more awesome software! With dozens of design methods, examples, and practical know-how, Design It! shows you how to become a software architect. Walk through the core concepts every architect must know, discover how to apply them, and learn a variety of skills that will make you a better programmer, leader, and designer. Uncover the big ideas behind software architecture and gain confidence working on projects big and small. Plan, design, implement, and evaluate software architectures and collaborate with your team, stakeholders, and other architects. Identify the right stakeholders and understand their needs, dig for architecturally significant requirements, write amazing quality attribute scenarios, and make confident decisions. Choose technologies based on their architectural impact, facilitate architecture-centric design workshops, and evaluate architectures using lightweight, effective methods. Write lean architecture descriptions people love to read. Run an architecture design studio, implement the architecture you've designed, and grow your team's architectural knowledge. Good design requires good communication. Talk about your software architecture with stakeholders using whiteboards, documents, and code, and apply architecture-focused design methods in your day-to-day practice. Hands-on exercises, real-world scenarios, and practical team-based decision-making tools will get everyone on board and give you the experience you need to become a confident software architect.</p> <p>Rating: \u2605\u2605\u2605\u2606\u2606</p>"},{"location":"General/MyBooks/IT_related_books/#design-patterns-elements-of-reusable-object-oriented-software","title":"Design Patterns: Elements of Reusable Object-Oriented Software","text":"<p>Author: Gamma, Erich; Helm, Richard; Johnson, Ralph; Vlissides, John</p> <p>Published Date: 2015-12-01</p> <p>Pages: 400.0</p> <p>ISBN: 9789332555402</p> <p>Summary: Design Patterns is a modern classic in the literature of object-oriented development, offering timeless and elegant solutions to common problems in software design. It describes patterns for managing object creation, composing objects into larger structures, and coordinating control flow between objects. The book provides numerous examples where using composition rather than inheritance can improve the reusability and flexibility of code. Note, though, that it's not a tutorial but a catalog that you can use to find an object-oriented design pattern that's appropriate for the needs of your particular application--a selection for virtuoso programmers who appreciate (or require) consistent, well-engineered object-oriented designs.</p> <p>Rating: \u2605\u2605\u2605\u2605\u2606</p>"},{"location":"General/MyBooks/IT_related_books/#design-principles-for-embedded-systems-transactions-on-computer-systems-and-networks","title":"Design Principles for Embedded Systems (Transactions on Computer Systems and Networks)","text":"<p>Author: Murti, KCS</p> <p>Published Date: 2022-09-22</p> <p>Pages: 477.0</p> <p>ISBN: 9789811632952</p> <p>Summary: nan</p> <p>Rating: \u2606\u2606\u2606\u2606\u2606</p>"},{"location":"General/MyBooks/IT_related_books/#documenting-software-architectures-views-and-beyond-sei-series-in-software-engineering","title":"Documenting Software Architectures: Views and Beyond (SEI Series in Software Engineering)","text":"<p>Author: Clements, Paul; Bachmann, Felix; Bass, Len; Garlan, David; Ivers, James; Little, Reed; Merson, Paulo; Nord, Robert; Stafford, Judith</p> <p>Published Date: 2010-10-28</p> <p>Pages: 592.0</p> <p>ISBN: 9780321552686</p> <p>Summary: Software architecture\u2014the conceptual glue that holds every phase of a project together for its many stakeholders\u2014is widely recognized as a critical element in modern software development. Practitioners have increasingly discovered that close attention to a software system\u2019s architecture pays valuable dividends. Without an architecture that is appropriate for the problem being solved, a project will stumble along or, most likely, fail. Even with a superb architecture, if that architecture is not well understood or well communicated the project is unlikely to succeed.</p> <p>Documenting Software Architectures, Second Edition, provides the most complete and current guidance, independent of language or notation, on how to capture an architecture in a commonly understandable form. Drawing on their extensive experience, the authors first help you decide what information to document, and then, with guidelines and examples (in various notations, including UML), show you how to express an architecture so that others can successfully build, use, and maintain a system from it. The book features rules for sound documentation, the goals and strategies of documentation, architectural views and styles, documentation for software interfaces and software behavior, and templates for capturing and organizing information to generate a coherent package. New and improved in this second edition:</p> <p>Coverage of architectural styles such as service-oriented architectures, multi-tier architectures, and data models Guidance for documentation in an Agile development environment Deeper treatment of documentation of rationale, reflecting best industrial practices Improved templates, reflecting years of use and feedback, and more documentation layout options A new, comprehensive example (available online), featuring documentation of a Web-based service-oriented system Reference guides for three important architecture documentation languages: UML, AADL, and SySML</p> <p>\u201cThis new edition is brighter, shinier, more complete, more pragmatic, more focused than the previous one, and I wouldn\u2019t have thought it possible to improve on the original. As the field of software architecture has grown over these past decades, there is much more to be said, much more that we know, and much more that we can reflect upon of what\u2019s worked and what hasn\u2019t\u2014and the authors here do all that, and more.\u201d</p> <p>\u2014From the Foreword by Grady Booch, IBM Fellow</p> <p>Rating: \u2605\u2605\u2605\u2606\u2606</p>"},{"location":"General/MyBooks/IT_related_books/#drive-the-surprising-truth-about-what-motivates-us","title":"Drive: The Surprising Truth About What Motivates Us","text":"<p>Author: Pink, Daniel H.</p> <p>Published Date: 2011-01-13</p> <p>Pages: 256.0</p> <p>ISBN: 9781847677693</p> <p>Summary: The New York Times bestseller that gives readers a paradigm-shattering new way to think about motivation </p> <p>Most people believe that the best way to motivate is with rewards like money\u2014the carrot-and-stick approach. That's a mistake, says Daniel H. Pink (author of To Sell Is Human: The Surprising Truth About Motivating Others). In this provocative and persuasive new book, he asserts that the secret to high performance and satisfaction-at work, at school, and at home\u2014is the deeply human need to direct our own lives, to learn and create new things, and to do better by ourselves and our world.</p> <p>Drawing on four decades of scientific research on human motivation, Pink exposes the mismatch between what science knows and what business does\u2014and how that affects every aspect of life. He examines the three elements of true motivation\u2014autonomy, mastery, and purpose-and offers smart and surprising techniques for putting these into action in a unique book that will change how we think and transform how we live.</p> <p>Rating: N/A</p>"},{"location":"General/MyBooks/IT_related_books/#embedded-c-coding-standard","title":"Embedded C Coding Standard","text":"<p>Author: Barr, Michael</p> <p>Published Date: 2018-06-12</p> <p>Pages: 84.0</p> <p>ISBN: 9781721127986</p> <p>Summary: Barr Group's Embedded C Coding Standard was developed to help firmware engineers minimize defects in embedded systems. Unlike the majority of coding standards, this standard focuses on practical rules that keep bugs out - including techniques designed to improve the maintainability and portability of embedded software. The rules in this coding standard include a set of guiding principles, as well as specific naming conventions and other rules for the use of data types, functions, preprocessor macros, variables, and other C language constructs. Individual rules that have been demonstrated to reduce or eliminate certain types of defects are highlighted. The BARR-C standard is distinct from, yet compatible with, the MISRA C Guidelines for Use of the C Language in Critical Systems. Programmers can easily combine rules from the two standards as needed.</p> <p>Rating: \u2605\u2605\u2605\u2606\u2606</p>"},{"location":"General/MyBooks/IT_related_books/#embedded-linux-development-using-yocto-project-cookbook-practical-recipes-to-help-you-leverage-the-power-of-yocto-to-build-exciting-linux-based-systems-2nd-edition","title":"Embedded Linux Development Using Yocto Project Cookbook: Practical recipes to help you leverage the power of Yocto to build exciting Linux-based systems, 2nd Edition","text":"<p>Author: Gonz\u00e1lez, \u00c1lex</p> <p>Published Date: 2018-01-25</p> <p>Pages: 456.0</p> <p>ISBN: 9781788399210</p> <p>Summary: Over 79 hands-on recipes for professional embedded Linux developers to optimize and boost their Yocto Project know-how Key Features Optimize your Yocto setup to speed up development and debug build issues Use what is quickly becoming the standard embedded Linux product builder framework\u2014the Yocto Project Recipe-based implementation of best practices to optimize your Linux system Book Description The Yocto Project has become the de facto distribution build framework for reliable and robust embedded systems with a reduced time to market.You'll get started by working on a build system where you set up Yocto, create a build directory, and learn how to debug it. Then, you'll explore everything about the BSP layer, from creating a custom layer to debugging device tree issues. In addition to this, you\u2019ll learn how to add a new software layer, packages, data, scripts, and configuration files to your system. You will then cover topics based on application development, such as using the Software Development Kit and how to use the Yocto project in various development environments. Toward the end, you will learn how to debug, trace, and profile a running system. This second edition has been updated to include new content based on the latest Yocto release. What you will learn Optimize your Yocto Project setup to speed up development and debug build issues Use Docker containers to build Yocto Project-based systems Take advantage of the user-friendly Toaster web interface to the Yocto Project build system Build and debug the Linux kernel and its device trees Customize your root filesystem with already-supported and new Yocto packages Optimize your production systems by reducing the size of both the Linux kernel and root filesystems Explore the mechanisms to increase the root filesystem security Understand the open source licensing requirements and how to comply with them when cohabiting with proprietary programs Create recipes, and build and run applications in C, C++, Python, Node.js, and Java Who this book is for If you are an embedded Linux developer with the basic knowledge of Yocto Project, this book is an ideal way to broaden your knowledge with recipes for embedded development.</p> <p>Rating: \u2605\u2605\u2605\u2606\u2606</p>"},{"location":"General/MyBooks/IT_related_books/#embedded-systems-dictionary","title":"Embedded Systems Dictionary","text":"<p>Author: Ganssle, Jack G.; Barr, Michael</p> <p>Published Date: 2003-01-04</p> <p>Pages: 302.0</p> <p>ISBN: 9781578201204</p> <p>Summary: This technical dictionary defines the 2,500 most-used words in the embedded systems field, with over 4,500 entries and cross-references. Designed to serve both the technical and non-technical audience, this book defines advanced terms in two steps. The fi</p> <p>Rating: \u2605\u2605\u2605\u2605\u2606</p>"},{"location":"General/MyBooks/IT_related_books/#essential-guide-to-telecommunications-the","title":"Essential Guide to Telecommunications, The","text":"<p>Author: Dodd, Annabel Z.</p> <p>Published Date: 2020-08-12</p> <p>Pages: 464.0</p> <p>ISBN: 9780134506791</p> <p>Summary: \"Annabel Dodd has cogently untangled the wires and switches and technobabble of the telecommunications revolution and explained how the introduction of the word 'digital' into our legislative and regulatory lexicon will affect consumers, companies and society into the next millennium.\" - United States Senator Edward J. Markey of Massachusetts; Member, U.S. Senate Subcommittee on Communications, Technology, Innovation, and the Internet \"Annabel Dodd has a unique knack for explaining complex technologies in understandable ways. This latest revision of her book covers the rapid changes in the fields of broadband, cellular, and streaming technologies; newly developing 5G networks; and the constant changes happening in both wired and wireless networks. This book is a must-read for anyone who wants to understand the rapidly evolving world of telecommunications in the 21st century!\" - David Mash, Retired Senior Vice President for Innovation, Strategy, and Technology, Berklee College of Music Completely updated for current trends and technologies, The Essential Guide to Telecommunications, Sixth Edition, is the world's top-selling, accessible guide to the fast-changing global telecommunications industry. Writing in easy-to-understand language, Dodd demystifies today's most significant technologies, standards, architectures, and trends. She introduces leading providers worldwide, explains where they fit in the marketplace, and reveals their key strategies. New topics covered in this edition include: LTE Advanced and 5G wireless, modern security threats and countermeasures, emerging applications, and breakthrough techniques for building more scalable, manageable networks. Gain a practical understanding of modern cellular, Wi-Fi, Internet, cloud, and carrier technologies Discover how key technical, business, and regulatory innovations are changing the industry See how streaming video, social media, cloud computing, smartphones, and the Internet of Things are transforming networks Explore growing concerns about security and privacy, and review modern strategies for detecting and mitigating network breaches Learn how Software Defined Networks (SDN) and Network Function Virtualization (NFV) add intelligence to networks, enabling automation, flexible configurations, and advanced networks Preview cutting-edge, telecom-enabled applications and gear-from mobile payments to drones Whether you're an aspiring network engineer looking for a broad understanding of the industry, or a salesperson, marketer, investor, or customer, this indispensable guide provides everything you need to know about telecommunications right now. This new edition is ideal for both self-study and classroom instruction. Register your product for convenient access to downloads, updates, and/or corrections as they become available.</p> <p>Rating: \u2605\u2605\u2605\u2606\u2606</p>"},{"location":"General/MyBooks/IT_related_books/#even-grues-get-full-the-fourth-user-friendly-collection","title":"Even Grues Get Full \u2013 The Fourth User Friendly Collection","text":"<p>Author: , Illiad; , Illiad</p> <p>Published Date: 2003-09-05</p> <p>Pages: 132.0</p> <p>ISBN: 9780596005665</p> <p>Summary: Even Grues Get Full is the fourth collection of the hit geek comic strip User Friendly by J.D. \"Illiad\" Frazer. Written with fresh, dry humor and an amusing vividness that brings the cast of characters to life, the comic strip is loved and read by millions around the world, from professional technologists to eight-year old wunderkinds, from 83-year old grandmothers who miss their Commodore 64s to patient spouses of born programmers. The comic strip is packed with references to geek interests, from obscure movies to old computer games, yet non-geeks are able to enjoy the story lines and character quirks, from Erwin's acerbic humor to Miranda's constant angst; from the Smiling Man's Machiavellian machinations to A.J.'s dysfunctional na\u00efvet\u00e9. At the center of this lies Dust Puppy, the strip's gentle-hearted mascot and the character who has endeared himself to readers everywhere. In this book, join the antics of the characters once again as Stef contends with an enormous Tequila worm, Mike is tormented by Mr. Cola, and the techs move shop into an abandoned missile silo! Also included in this collection are the 9/11 tribute cartoons that were widely praised for their clear and simple pathos. Called \"Dilbert for Geeks\" by Wired magazine and considered to be one of the few consistently intelligent and socially aware cartoons on the 'Net, User Friendly remains one of the most popular destinations for geeks and non-geeks alike. This book is a sure hit with anyone who works with computers or for anyone who lives with someone who works with computers!</p> <p>Rating: \u2605\u2605\u2605\u2605\u2606</p>"},{"location":"General/MyBooks/IT_related_books/#evil-geniuses-in-a-nutshell-a-user-friendly-guide-to-world-domination-nutshell-handbook","title":"Evil Geniuses in a Nutshell \u2013 A User Friendly Guide to World Domination (Nutshell Handbook)","text":"<p>Author: , Illiad; Hayes, Simon</p> <p>Published Date: 2000-05-04</p> <p>Pages: 136.0</p> <p>ISBN: 9781565928619</p> <p>Summary: The next hilarious compendium of \"User Friendly\" comic strips from the wicked hand of the elusive \"Illiad\". Chronicling the continuing saga of Canada's hardest working ISP, Columbia Internet, \"Evil Geniuses in a Nutshell\" serves up more details and stories from the lives of everybody's favorite characters: A.J. Cobb, Pitr, Mike, Dust Puppy, Miranda and Greg.</p> <p>Rating: \u2605\u2605\u2605\u2605\u2606</p>"},{"location":"General/MyBooks/IT_related_books/#facts-and-fallacies-of-software-engineering-agile-software-development","title":"Facts and Fallacies of Software Engineering (Agile Software Development)","text":"<p>Author: Glass, Robert; Becker, Paul; Fuller, John</p> <p>Published Date: 2002-10-28</p> <p>Pages: 212.0</p> <p>ISBN: 9780321117427</p> <p>Summary: Regarding the controversial and thought-provoking assessments in this handbook, many software professionals might disagree with the authors, but all will embrace the debate. Glass identifies many of the key problems hampering success in this field. Each fact is supported by insightful discussion and detailed references.</p> <p>Rating: \u2605\u2605\u2605\u2606\u2606</p>"},{"location":"General/MyBooks/IT_related_books/#function-point-analysis-measurement-practices-for-successful-software-projects-addison-wesley-information-technology-series","title":"Function Point Analysis: Measurement Practices for Successful Software Projects (Addison-Wesley Information Technology Series)","text":"<p>Author: Garmus, David; Herron, David</p> <p>Published Date: 2000-11-16</p> <p>Pages: 400.0</p> <p>ISBN: 9780201699449</p> <p>Summary: Function Point Analysis: Measurement Practices for Successful Software Projects is a comprehensive presentation of the principles of function point analysis (FPA) and a guide to its effective use in managing the development and deployment of software. Written for both information technology (IT) practitioners and managers, it describes how to use this proven-but-underutilized software-sizing metric to achieve successful software projects. Completely up-to-date, the book introduces the latest rules and guidelines released in the International Function Point Users Group (IFPUG) Counting Practices Manual 4.1. Function Point Analysis presents fundamental counting techniques for basic-to-advanced technologies. It explains the calculations for determining function point size, an indication of a software application's overall functionality and complexity. Moving beyond mechanics, the book features the most common uses of FPA and reveals experience-based techniques for applying the methodology with success. The book covers such important topics as: An overview of FPA for the IT executive A description of software measurement, relating size to other software metrics Sizing data and transactional functions The application of general system characteristics Counting object-oriented, Web-based, client-server, and GUI applications Becoming a Certified Function Point Specialist (CFPS), using a practice exam The use of FPA for accurate project estimating, development and maintenance outsourcing, and performance productivity baselining FPA automation tools, including function point repository tools and function point- based project estimation tools The role of FPA in standardizing industry benchmarking data Numerous detailed examples and case studies demonstrate the FPA methodology in action. As a reference, tutorial, and practical guide, Function Point Analysis: Measurement Practices for Successful Software Projects raises the level of awareness and understanding of FPA and its role in bringing proven quality standards to the software development industry. 0201699443B04062001</p> <p>Rating: \u2605\u2605\u2605\u2606\u2606</p>"},{"location":"General/MyBooks/IT_related_books/#fundamentals-of-software-architecture-an-engineering-approach","title":"Fundamentals of Software Architecture: An Engineering Approach","text":"<p>Author: Richards, Mark; Ford, Neal</p> <p>Published Date: 2020-02-07</p> <p>Pages: 400.0</p> <p>ISBN: 9781492043454</p> <p>Summary: Although salary surveys worldwide regularly identify software architect as one of the top ten best jobs, no decent guides exist to help developers become architects. Until now. This practical guide provides the first comprehensive overview of software architecture's many aspects. You'll examine architectural characteristics, architectural patterns, component determination, diagramming and presenting architecture, evolutionary architecture, and many other topics.</p> <p>Authors Neal Ford and Mark Richards help you learn through examples in a variety of popular programming languages, such as Java, C#, JavaScript, and others. You'll focus on architecture principles with examples that apply across all technology stacks.</p> <p>Rating: \u2605\u2605\u2605\u2605\u2606</p>"},{"location":"General/MyBooks/IT_related_books/#getting-results-form-software-development-teams","title":"Getting Results form Software Development Teams","text":"<p>Author: Peters, Lawrence J.; Howard, Michael</p> <p>Published Date: 2008-04-30</p> <p>Pages: 304.0</p> <p>ISBN: 9780735623460</p> <p>Summary: Learn best practices for software development project management\u2014and lead your teams and projects to success. Dr. Lawrence Peters is an industry-recognized expert with decades of experience conducting research and leading real-world software projects. Beyond getting the best developers, equipment, budget, and timeline possible\u2014Peters concludes that no factor is more critical to project success than the manager\u2019s role. Drawing on proven practices from allied industries such as business, psychology, accounting, and law, he describes a broader project-management methodology\u2014with principles that software managers can readily adapt to help increase their own effectiveness and the productivity of their teams. Unlike other books on the topic, this book focuses squarely on the manager\u2014and shows how to get results without adopting philosophies from Genghis Khan or Machiavelli. (There is mention of Godzilla, however.) Packed with real-world examples and pragmatic advice, this book shows any software development manager\u2014new or experienced\u2014how to lead teams in delivering the right results for their business.</p> <p>Rating: \u2605\u2605\u2605\u2606\u2606</p>"},{"location":"General/MyBooks/IT_related_books/#guide-to-the-software-engineering-body-of-knowledge-swebokr-2004-version","title":"Guide to the Software Engineering Body of Knowledge (SWEBOK(R)): 2004 Version","text":"<p>Author: Society, IEEE Computer; Moore, James W.; Bourque, Pierre; Dupuis, Robert</p> <p>Published Date: 2005-03-15</p> <p>Pages: 204.0</p> <p>ISBN: 9780769523309</p> <p>Summary: nan</p> <p>Rating: \u2605\u2605\u2606\u2606\u2606</p>"},{"location":"General/MyBooks/IT_related_books/#guide-to-the-software-engineering-body-of-knowledge-swebokr-version-30","title":"Guide to the Software Engineering Body of Knowledge (SWEBOK(R)): Version 3.0","text":"<p>Author: Bourque, Pierre; Fairley, Richard E.; Engineers, Institute of Electrical and Electronics</p> <p>Published Date: 2014-01-17</p> <p>Pages: 346.0</p> <p>ISBN: 9780769551661</p> <p>Summary: In the Guide to the Software Engineering Body of Knowledge (SWEBOK\u00ae Guide), the IEEE Computer Society establishes a baseline for the body of knowledge for the field of software engineering, and the work supports the Society\u2019s responsibility to promote the advancement of both theory and practice in this field. It should be noted that the Guide does not purport to define the body of knowledge but rather to serve as a compendium and guide to the knowledge that has been developing and evolving over the past four decades. Now in Version 3.0, the Guide\u2019s 15 knowledge areas summarize generally accepted topics and list references for detailed information.</p> <p>The editors for Version 3.0 of the SWEBOK\u00ae Guide are Pierre Bourque (\u00c9cole de technologie sup\u00e9rieure (\u00c9TS), Universit\u00e9 du Qu\u00e9bec) and Richard E. (Dick) Fairley (Software and Systems Engineering Associates (S2EA)).</p> <p>Rating: \u2605\u2605\u2605\u2606\u2606</p>"},{"location":"General/MyBooks/IT_related_books/#handbook-of-basic-electrical-engineering","title":"Handbook of Basic Electrical Engineering","text":"<p>Author: Rai, Harish C; Rai, Shivanshu</p> <p>Published Date: 2018</p> <p>Pages: 488.0</p> <p>ISBN: 9789387085008</p> <p>Summary: The handling of bulk materials is a continuously completed projects. Much of the nomenclature has been changing science. Since very few schools teach the han brought up to date. dling of bulk materials, it is necessary for practicing en Publication of the material contained herein is not in gineers to develop their own training manuals. This book tended as a representation or warranty on the part of the is an abbreviated version of a manual used for that pur author, publisher, editors, or any other person or firm pose in our office, and developed over a period of more named herein that it is suitable for any particular use, or than 50 years. While some industrial firms follow their free from infringement of any patent or patents. own practices, the trend in the past few years has been The text is intended as a guide. When used for any to adopt the standards of equipment manufacturers' as specific project, a competent professional engineer sociations and similar organizations. The selection of should be retained to verify the assumptions, applica material and the use of drawiugs instead of photographs bility, calculations, and accuracy of the particular de is based on our experience. sign.</p> <p>Rating: \u2606\u2606\u2606\u2606\u2606</p>"},{"location":"General/MyBooks/IT_related_books/#head-first-objectoriented-analysis-and-design-the-best-introduction-to-object-orientated-programming","title":"Head First Object\u2013Oriented Analysis and Design: The Best Introduction to Object Orientated Programming","text":"<p>Author: McLaughlin, Brett; Pollice, Gary; West, David</p> <p>Published Date: 2006-12-05</p> <p>Pages: 634.0</p> <p>ISBN: 9780596008673</p> <p>Summary: \"Head First Object Oriented Analysis and Design is a refreshing look at subject of OOAD. What sets this book apart is its focus on learning. The authors have made the content of OOAD accessible, usable for the practitioner.\"</p> <p>Ivar Jacobson, Ivar Jacobson Consulting</p> <p>\"I just finished reading HF OOA&amp;D and I loved it! The thing I liked most about this book was its focus on why we do OOA&amp;D-to write great software!\"</p> <p>Kyle Brown, Distinguished Engineer, IBM</p> <p>\"Hidden behind the funny pictures and crazy fonts is a serious, intelligent, extremely well-crafted presentation of OO Analysis and Design. As I read the book, I felt like I was looking over the shoulder of an expert designer who was explaining to me what issues were important at each step, and why.\"</p> <p>Edward Sciore, Associate Professor, Computer Science Department, Boston College</p> <p>Tired of reading Object Oriented Analysis and Design books that only makes sense after you're an expert? You've heard OOA&amp;D can help you write great software every time-software that makes your boss happy, your customers satisfied and gives you more time to do what makes you happy.</p> <p>But how?</p> <p>Head First Object-Oriented Analysis &amp; Design shows you how to analyze, design, and write serious object-oriented software: software that's easy to reuse, maintain, and extend; software that doesn't hurt your head; software that lets you add new features without breaking the old ones. Inside you will learn how to:</p> <p>Use OO principles like encapsulation and delegation to build applications that are flexible Apply the Open-Closed Principle (OCP) and the Single Responsibility Principle (SRP) to promote reuse of your code Leverage the power of design patterns to solve your problems more efficiently Use UML, use cases, and diagrams to ensure that all stakeholders are communicating clearly to help you deliver the right software that meets everyone's needs.</p> <p>By exploiting how your brain works, Head First Object-Oriented Analysis &amp; Design compresses the time it takes to learn and retain complex information. Expect to have fun, expect to learn, expect to be writing great software consistently by the time you're finished reading this!</p> <p>Rating: \u2605\u2605\u2605\u2606\u2606</p>"},{"location":"General/MyBooks/IT_related_books/#herding-cats-a-primer-for-programmers-who-lead-programmers","title":"Herding Cats: A Primer for Programmers Who Lead Programmers","text":"<p>Author: Rainwater, J. Hank</p> <p>Published Date: 2002-03-04</p> <p>Pages: 276.0</p> <p>ISBN: 9781590590171</p> <p>Summary: This self-help guide is for programmers who need to improve their management and leadership skills.</p> <p>Rating: \u2605\u2605\u2605\u2606\u2606</p>"},{"location":"General/MyBooks/IT_related_books/#implementing-iso-90012015-thrill-your-customers-and-transform-your-cost-base-with-the-new-gold-standard-for-business-management","title":"Implementing Iso 9001:2015: Thrill your customers and transform your cost base with the new gold standard for business management","text":"<p>Author: Gillett, Jan; Simpson, Paul; Clarke, Susannah</p> <p>Published Date: 2015-11-23</p> <p>Pages: 238.0</p> <p>ISBN: 9781908984500</p> <p>Summary: The latest edition of ISO 9001, published in 2015, is changing the way organisations are run worldwide. No longer is it sufficient simply to check on an organisation's quality management system: the revision demands that auditors assess the leadership and management of the quality system. This brings the standard alongside the widely proven system and process approach to continuing quality transformation that lies at the heart of the very best global companies. Over a million registered organisations around the world need to engage with the revised requirements. If you work for one of them the changes may be significant. In Implementing ISO 9001:2015 business transformation experts Jan Gillett, Paul Simpson and Susannah Clarke take managers step-by-step through the process needed for successful transition, improving results and facilitating a smooth audit. By applying the principles and methodologies, and using the book's templates and questions with their teams and suppliers, managers will transform the performance of their organisations. The tangible benefits will pay for the transition many times over. Implementing ISO 9001:2015 is a comprehensive guide to making the necessary transition to the new standard. The changes can also be used to stimulate transformation in organisations and their wider environments, coordinating processes to achieve both customer satisfaction and reduced operating costs. Follow this blueprint and certification comes as a free bonus!</p> <p>Rating: \u2605\u2605\u2605\u2606\u2606</p>"},{"location":"General/MyBooks/IT_related_books/#internet-communications-using-sip-delivering-voip-and-multimedia-services-with-session-initiation-protocol-networking-council-series","title":"Internet Communications Using SIP: Delivering VoIP and Multimedia Services with Session Initiation Protocol (Networking Council Series)","text":"<p>Author: Sinnreich, Henry; Johnston, Alan B.</p> <p>Published Date: 2001-11-09</p> <p>Pages: 320.0</p> <p>ISBN: 9780471413998</p> <p>Summary: From leading WorldCom engineers--expert guidance on how to plan for SIP implementation Session Initiation Protocol (SIP) has gained tremendous market acceptance since it became an official IETF Internet communications standard in 1999. SIP is the technology that makes it possible for multimedia communications sessions on the Web--ones that allow voice, video, chat, interactive games, and others to run all at the same time. Now that the deployment of real SIP networks is about to take off, two leaders of the commercial rollout deliver complete guidance on this exciting new technology. Geared to IT and networking professionals and decision-makers at Internet service providers (ISPs), as well as networking (NSPs) and application (ASPs) service providers, this book helps readers sort through the available vendor offerings and services to discover how to integrate and maximize SIP's power across their networks.</p> <p>Rating: \u2605\u2605\u2605\u2606\u2606</p>"},{"location":"General/MyBooks/IT_related_books/#introduction-to-javascript-object-notation-a-to-the-point-guide-to-json","title":"Introduction to JavaScript Object Notation: A To-The-Point Guide to Json","text":"<p>Author: Bassett, Lindsay</p> <p>Published Date: 2015-08-21</p> <p>Pages: 126.0</p> <p>ISBN: 9781491929483</p> <p>Summary: What is JavaScript Object Notation (JSON) and how can you put it to work? This concise guide helps busy IT professionals get up and running quickly with this popular data interchange format, and provides a deep understanding of how JSON works. Author Lindsay Bassett begins with an overview of JSON syntax, data types, formatting, and security concerns before exploring the many ways you can apply JSON today.</p> <p>From Web APIs and server-side language libraries to NoSQL databases and client-side frameworks, JSON has emerged as a viable alternative to XML for exchanging data between different platforms. If you have some programming experience and understand HTML and JavaScript, this is your book.</p> <p>Learn why JSON syntax represents data in name-value pairs Explore JSON data types, including object, string, number, and array Find out how you can combat common security concerns Learn how the JSON schema verifies that data is formatted correctly Examine the relationship between browsers, web APIs, and JSON Understand how web servers can both request and create data Discover how jQuery and other client-side frameworks use JSON Learn why the CouchDB NoSQL database uses JSON to store data </p> <p>Rating: \u2605\u2605\u2605\u2606\u2606</p>"},{"location":"General/MyBooks/IT_related_books/#introduction-to-solution-architecture","title":"Introduction to Solution Architecture","text":"<p>Author: McSweeney, Alan</p> <p>Published Date: 2019-02-20</p> <p>Pages: 540.0</p> <p>ISBN: 9781797567617</p> <p>Summary: Solution architecture is concerned with the design and definition of (information technology) solutions so they can be subsequently implemented, used, operated and supported securely and efficiently. The solution exists to operate business processes in order to achieve business objectives, meet a business need and deliver business value. Solution architecture is concerned with engaging with the originating business function looking for the solution to create a solution vision and design a solution that meet their needs, subject to a range of constraints such as cost and affordability, time to deliver and organisational standards. The solution must exist as a coherent whole.Solutions must be designed consistently across the solution landscape and make optimum use of appropriate technologies. Solution architecture must focus on creating usable and useful solutions. Solution architecture must have a standard reliable approach to business engagements and the design of solution that emerge from them. Solution architecture must work collaboratively with other information technology functions - other architecture roles, business analysis and service management - to ensure continuity along the solution delivery journey.Effective solution architecture involves: -Have a depth and breadth of solution delivery and technical experience to be able to identify solution design options quickly-Being able to understand the detail of the solution while maintaining a view of the wider (and higher) context of the business need for the solution and being able to explain both these views of sets of information-Being able to communicate effectively with all parties - technical and business - involved in the solution design and delivery journey, assist with decision-making, be realistic and make appropriate compromises and design choices in order to create the best solution design-Being able to apply technology appropriately and with selective innovation (and the desire to constantly acquire new knowledge and ways of applying technology)-Being involved in the solution delivery journey along its entire length-Being able to be the solution advocate and subject matter expertThis book is aimed at a variety of potential readers: -Existing solution architects who want to have a more theoretical and a broader understanding of their role-Existing or new managers of solution architecture functions who want to create a high-performing practice within their organisations and who want to articulate the benefits and value solution architect can contribute to the information technology function and the wider business and the potential it can offer to the business organisation-Mangers of information technology functions who want to understand what solution architecture is, where it fits into the wider architecture context and disciplines and solution delivery and operation and the value it can contribute to both the information technology function and the wider business-Other information technology architects who want to understand how the architecture disciplines can work together to deliver value-Business analysts and managers of business analysis functions who want to understand how they can work more closely with the solution architecture function in order to provide the business with a better overall service-Other information technology personnel who want to move into solution architecture and who want to understand what it is-Consulting organisations and individuals who want to develop and offer value-adding solution architecture services</p> <p>Rating: \u2605\u2605\u2605\u2605\u2606</p>"},{"location":"General/MyBooks/IT_related_books/#iot-and-edge-computing-for-architects-implementing-edge-and-iot-systems-from-sensors-to-clouds-with-communication-systems-analytics-and-security-2nd-edition","title":"IoT and Edge Computing for Architects: Implementing edge and IoT systems from sensors to clouds with communication systems, analytics, and security, 2nd Edition","text":"<p>Author: Lea, Perry</p> <p>Published Date: 2020-03-06</p> <p>Pages: 632.0</p> <p>ISBN: 9781839214806</p> <p>Summary: nan</p> <p>Rating: \u2605\u2605\u2605\u2605\u2606</p>"},{"location":"General/MyBooks/IT_related_books/#json-at-work-practical-data-integration-for-the-web","title":"JSON at Work: Practical Data Integration for the Web","text":"<p>Author: Marrs, Tom</p> <p>Published Date: 2017-06-30</p> <p>Pages: 376.0</p> <p>ISBN: 9781449358327</p> <p>Summary: JSON is becoming the backbone for meaningful data interchange over the internet. This format is now supported by an entire ecosystem of standards, tools, and technologies for building truly elegant, useful, and efficient applications. With this hands-on guide, author and architect Tom Marrs shows you how to build enterprise-class applications and services by leveraging JSON tooling and message/document design.</p> <p>JSON at Work provides application architects and developers with guidelines, best practices, and use cases, along with lots of real-world examples and code samples. You'll start with a comprehensive JSON overview, explore the JSON ecosystem, and then dive into JSON's use in the enterprise.</p> <p>Get acquainted with JSON basics and learn how to model JSON data Learn how use JSON with Node.js, Ruby on Rails, and Java Structure JSON documents with JSON Schema to design and test APIs Search the contents of JSON documents with JSON Search tools Convert JSON documents to other data formats with JSON Transform tools Compare JSON-based hypermedia formats, including HAL and jsonapi Leverage MongoDB to store and access JSON documents Use Apache Kafka to exchange JSON-based messages between services</p> <p>Rating: \u2605\u2605\u2606\u2606\u2606</p>"},{"location":"General/MyBooks/IT_related_books/#kanban-successful-evolutionary-change-for-your-technology-business-successful-evolutionary-change-for-your-technology-business-successful-evolutionary-change-for-your-technology-business","title":"Kanban: Successful Evolutionary Change for Your Technology Business: Successful Evolutionary Change for your Technology Business: Successful Evolutionary Change for your Technology Business","text":"<p>Author: Anderson, David J.; Reinertsen, Donald G</p> <p>Published Date: 2010-04-07</p> <p>Pages: 278.0</p> <p>ISBN: 9780984521401</p> <p>Summary: Book by David J. Anderson</p> <p>Rating: \u2605\u2605\u2605\u2606\u2606</p>"},{"location":"General/MyBooks/IT_related_books/#leadership-and-self-deception-getting-out-of-the-box","title":"Leadership and Self-Deception: Getting Out of the Box","text":"<p>Author: Institute, Arbinger</p> <p>Published Date: 2007</p> <p>Pages: nan</p> <p>ISBN: 9780141030067</p> <p>Summary: You might think you are a people person. But do you really treat others well? And how can you improve your dealings with those around you? Be prepared to have your world turned upside down and open your eyes to a whole new way of living and working. Through a series of entertaining stories, this astonishing book will show you how most of us are not fulfilling our potential - in our personal lives and at work - because of 'self-deception'. It will show you how to escape your box of self-deception, and change for the better in a lasting way: * Don't focus on what others are doing wrong. Do focus on what you can do to help * Don't worry whether others are helping you. Do worry whether you are helping others * Don't try to be perfect. Do try to be better. By following this book's advice, you can deepen your personal happiness, strengthen your relationships, improve your leadership skills, build teamwork - and increase your success in everything you choose to pursue.</p> <p>Rating: \u2605\u2605\u2605\u2605\u2606</p>"},{"location":"General/MyBooks/IT_related_books/#leading-a-software-development-team-a-developers-guide-to-successfully-leading-people-projects","title":"Leading a Software Development Team: A developer's guide to successfully leading people &amp; projects","text":"<p>Author: Whitehead, Richard</p> <p>Published Date: 2001-05-15</p> <p>Pages: 368.0</p> <p>ISBN: 9780201675269</p> <p>Summary: Practical advice on leading a software development team, aimed at software engineers who have become project leaders.</p> <p>Rating: \u2605\u2605\u2605\u2606\u2606</p>"},{"location":"General/MyBooks/IT_related_books/#manage-it-your-guide-to-modern-pragmatic-project-mangagement-your-guide-to-modern-pragmatic-project-management","title":"Manage It! Your Guide to Modern, Pragmatic Project Mangagement: Your Guide to Modern, Pragmatic Project Management","text":"<p>Author: Rothman, Johanna</p> <p>Published Date: 2007-06-29</p> <p>Pages: 366.0</p> <p>ISBN: 9780978739249</p> <p>Summary: This book is a reality-based guide for modern projects. You'll learn how to recognize your project's potholes and ruts, and determine the best way to fix problems - without causing more problems.</p> <p>Your project can't fail. That's a lot of pressure on you, and yet you don't want to buy into any one specific process, methodology, or lifecycle.</p> <p>Your project is different. It doesn't fit into those neat descriptions.</p> <p>Manage It! will show you how to beg, borrow, and steal from the best methodologies to fit your particular project. It will help you find what works best for you and not for some mythological project that doesn't even exist.</p> <p>Before you know it, your project will be on track and headed to a successful conclusion.</p> <p>Rating: \u2605\u2605\u2605\u2606\u2606</p>"},{"location":"General/MyBooks/IT_related_books/#manage-your-project-portfolio-increase-your-capacity-and-finish-more-projects","title":"Manage Your Project Portfolio: Increase Your Capacity and Finish More Projects","text":"<p>Author: Rothman, Johanna</p> <p>Published Date: 2009-08-28</p> <p>Pages: 250.0</p> <p>ISBN: 9781934356296</p> <p>Summary: Introducing readers to different ways of ordering all of the projects they are working on, \"Manage Your Project Portfolio\" helps to define a team's, group's, or department's mission--whether the projects include of software or hardware applications.</p> <p>Rating: \u2605\u2605\u2605\u2606\u2606</p>"},{"location":"General/MyBooks/IT_related_books/#managing-and-leading-software-projects","title":"Managing and Leading Software Projects","text":"<p>Author: Fairley, Richard E.</p> <p>Published Date: 2009-03-06</p> <p>Pages: 512.0</p> <p>ISBN: 9780470294550</p> <p>Summary: Never HIGHLIGHT a Book Again! Virtually all of the testable terms, concepts, persons, places, and events from the textbook are included. Cram101 Just the FACTS101 studyguides give all of the outlines, highlights, notes, and quizzes for your textbook with optional online comprehensive practice tests. Only Cram101 is Textbook Specific. Accompanys: 9780470294550 .</p> <p>Rating: \u2605\u2605\u2605\u2606\u2606</p>"},{"location":"General/MyBooks/IT_related_books/#managing-humans-biting-and-humorous-tales-of-a-software-engineering-manager","title":"Managing Humans: Biting and Humorous Tales of a Software Engineering Manager","text":"<p>Author: MichaelLopp</p> <p>Published Date: 2012-06-29</p> <p>Pages: 292.0</p> <p>ISBN: 9781430243144</p> <p>Summary: Managing Humans is a selection of the best essays from Michael Lopp's popular website Rands in Repose(www.randsinrepose.com). Lopp is one of the most sought-after IT managers in Silicon Valley, and draws on his experiences at Apple, Netscape, Symantec, and Borland. This book reveals a variety of different approaches for creating innovative, happy development teams. It covers handling conflict, managing wildly differing personality types, infusing innovation into insane product schedules, and figuring out how to build lasting and useful engineering culture. The essays are biting, hilarious, and always informative.</p> <p>Rating: \u2605\u2605\u2605\u2606\u2606</p>"},{"location":"General/MyBooks/IT_related_books/#managing-the-software-process-sei-series-in-software-engineering","title":"Managing the Software Process (Sei Series in Software Engineering)","text":"<p>Author: Humphrey, Watts S.</p> <p>Published Date: 1989-01-01</p> <p>Pages: 512.0</p> <p>ISBN: 9780201180954</p> <p>Summary: The author, drawing on years of experience at IBM and the SEI, provides here practical guidance for improving the software development and maintenance process. He focuses on understanding and managing the software process because this is where he feels organizations now encounter the most serious problems, and where he feels there is the best opportunity for significant improvement. Both program managers and practicing programmers, whether working on small programs or large-scale projects, will learn how good their own software process is, how they can make their process better, and where they need to begin. \"This book will help you move beyond the turning point, or crisis, of feeling over-whelmed by the task of managing the software process to understanding what is essential in software management and what you can do about it.\" Peter Freeman, from the Foreword 0201180952B04062001</p> <p>Rating: \u2605\u2605\u2605\u2606\u2606</p>"},{"location":"General/MyBooks/IT_related_books/#mastering-embedded-linux-programming-create-fast-and-reliable-embedded-solutions-with-linux-54-and-the-yocto-project-31-dunfell-3rd-edition","title":"Mastering Embedded Linux Programming: Create fast and reliable embedded solutions with Linux 5.4 and the Yocto Project 3.1 (Dunfell), 3rd Edition","text":"<p>Author: Simmonds, Chris; Simmonds, Chris</p> <p>Published Date: 2021-05-14</p> <p>Pages: 758.0</p> <p>ISBN: 9781789530384</p> <p>Summary: Unleash the full potential of Embedded Linux with Linux 4.14and Yocto Project 2.5 (Sumo) Updates </p> <p>Key Features Build and configure reliable embedded Linux devices Learn to build robust systems with the most updated version of Linux 4.16 and Yocto Project 2.5 (Sumo) Practical guide to build efficient embedded devices on Linux Book Description </p> <p>Linux is a core technology in the implementation of the inter-connected world of the Internet of Things. Embedded Linux runs on a variety of devices from desktops and servers to WiFi routers to Linux powered rifles.</p> <p>This book will focus on building and configuring robust embedded Linux devices. The comprehensive guide shows you the technologies and techniques required to build Linux into embedded systems. You\u2019ll see how to create each of the elements from scratch, and how to automate the process using Buildroot and the Yocto Project. You will also learn to implement an effective storage strategy for flash memory chips, and how to install updates to the device remotely once it is deployed. You\u2019ll also get to know the key aspects of writing code for embedded Linux, such as how to access hardware from applications, the implications of writing multi-threaded code, and techniques to manage memory in an efficient way. Lastly, this book will show you how to debug your code, both in applications and kernel-level, and how to profile the system so that you can look out for performance bottlenecks.</p> <p>By the end of this book, you will have a complete understanding required to create a successful embedded Linux system.</p> <p>What you will learn Evaluate the board support packages offered by most manufacturers of a system. Explore Buildroot and the Yocto project to create embedded Linux systems. Update IoT devices in the field without compromising security Install Buildroot and use it to build images for the QEMU and BeagleBone Black targets Learn to install Yocto Project and build basic images for QEMU and BeagleBone Black.\u00a0 Reduce the power budget of devices to make batteries last longer Interact with the hardware without having to write kernel device drivers Who This Book Is For </p> <p>If you are an engineer who wishes to understand and use Linux in embedded devices, this book is for you. It is also for Linux developers and system programmers who are familiar with embedded systems and want to learn and program the best in class devices.</p> <p>Rating: \u2605\u2605\u2605\u2605\u2606</p>"},{"location":"General/MyBooks/IT_related_books/#mastering-the-requirements-process","title":"Mastering the Requirements Process","text":"<p>Author: Robertson, Suzanne; Robertson, James</p> <p>Published Date: 2006-03-17</p> <p>Pages: 592.0</p> <p>ISBN: 9780321419491</p> <p>Summary: \"If the purpose is to create one of the best books on requirements yet written, the authors have succeeded.\"\"--Capers Jones\" Software can solve almost any problem. The trick is knowing what the problem is. With about half of all software errors originating in the requirements activity, it is clear that a better understanding of the problem is needed. Getting the requirements right is crucial if we are to build systems that best meet our needs. We know, beyond doubt, that the right requirements produce an end result that is as innovative and beneficial as it can be, and that system development is both effective and efficient. \"Mastering the Requirements Process, Third Edition, \"sets out an industry-proven process for gathering and verifying requirements, regardless of whether you work in a traditional or agile development environment. In this total update of the bestselling guide, the authors show how to discover precisely what the customer wants and needs, in the most efficient manner possible. Features include The Volere requirements process--completely specified, for use with both traditional and iterative environments A specification template that can be used as the basis for your own requirements specifications Formality guides that help you funnel your efforts into only the requirements work needed for your particular development environment and project How to make requirements testable using fit criteria Checklists to help identify stakeholders, users, non-functional requirements, and more Methods for reusing requirements and requirements patterns New features include Strategy guides for different environments including outsourcing Strategies for gathering and implementing requirements for iterative releases \"Thinking above the line\" to find the real problem How to move from requirements to finding the right solution The Brown Cow model for clearer viewpoints of the system Using story cards as requirements Using the Volere Knowledge Model to help record and communicate requirements Fundamental truths about requirements and system development</p> <p>Rating: \u2605\u2605\u2605\u2605\u2606</p>"},{"location":"General/MyBooks/IT_related_books/#microservices-and-containers","title":"Microservices and Containers","text":"<p>Author: Kocher, Parminder Singh</p> <p>Published Date: 2018-04-12</p> <p>Pages: 300.0</p> <p>ISBN: 9780134598383</p> <p>Summary: Transition to Microservices and DevOps to Transform Your Software Development Effectiveness Thanks to the tech sector\u2019s latest game-changing innovations\u2014the Internet of Things (IoT), software-enabled networking, and software as a service (SaaS), to name a few\u2014there is now a seemingly insatiable demand for platforms and architectures that can improve the process of application development and deployment. In Microservices and Containers, longtime systems architect and engineering team leader Parminder Kocher analyzes two of the hottest new technology trends: microservices and containers. Together, as Kocher demonstrates, microservices and Docker containers can bring unprecedented agility and scalability to application development and deployment, especially in large, complex projects where speed is crucial but small errors can be disastrous. Learn how to leverage microservices and Docker to drive modular architectural design, on-demand scalability, application performance and reliability, time-to-market, code reuse, and exponential improvements in DevOps effectiveness. Kocher offers detailed guidance and a complete roadmap for transitioning from monolithic architectures, as well as an in-depth case study that walks the reader through the migration of an enterprise-class SOA system. Understand how microservices enable you to organize applications into standalone components that are easier to manage, update, and scale Decide whether microservices and containers are worth your investment, and manage the organizational learning curve associated with them Apply best practices for interprocess communication among microservices Migrate monolithic systems in an orderly fashion Understand Docker containers, installation, and interfaces Network, orchestrate, and manage Docker containers effectively Use Docker to maximize scalability in microservices-based applications Apply your learning with an in-depth, hands-on case study Whether you are a software architect/developer or systems professional looking to move on from older approaches or a manager trying to maximize the business value of these technologies, Microservices and Containers will be an invaluable addition to your library. Register your product at informit.com/register for convenient access to downloads, updates, and/or corrections as they become available.</p> <p>Rating: \u2605\u2605\u2605\u2606\u2606</p>"},{"location":"General/MyBooks/IT_related_books/#more-joel-on-software-further-thoughts-on-diverse-and-occasionally-related-matters-that-will-prove-of-interest-to-software-developers-designers-and-or-ill-luck-work-with-them-in-some-capacity","title":"More Joel on Software: Further Thoughts on Diverse and Occasionally Related Matters That Will Prove of Interest to Software Developers, Designers, and ... or Ill Luck, Work with Them in Some Capacity","text":"<p>Author: Spolsky, Avram Joel</p> <p>Published Date: 2008-06-25</p> <p>Pages: 320.0</p> <p>ISBN: 9781430209874</p> <p>Summary: * Covers three years of the best essays. * Essays range from technical to humorous, but are always tangible. * Beautifully written and extremely timely. * Google lists 183,000 links for \"Joel on Software\". * Spolsky is one of the most popular programmers around today, with legions of followers.</p> <p>Rating: \u2605\u2605\u2605\u2605\u2606</p>"},{"location":"General/MyBooks/IT_related_books/#mythical-man-month-the-essays-on-software-engineering-anniversary-edition","title":"Mythical Man-Month, The: Essays on Software Engineering, Anniversary Edition","text":"<p>Author: Jr., Frederick P. Brooks</p> <p>Published Date: 1995-08-15</p> <p>Pages: 336.0</p> <p>ISBN: 9780201835953</p> <p>Summary: Few books on software project management have been as influential and timeless as The Mythical Man-Month. With a blend of software engineering facts and thought-provoking opinions, Fred Brooks offers insight for anyone managing complex projects. These essays draw from his experience as project manager for the IBM System/360 computer family and then for OS/360, its massive software system. Now, 45 years after the initial publication of his book, Brooks has revisited his original ideas and added new thoughts and advice, both for readers already familiar with his work and for readers discovering it for the first time.</p> <p>The added chapters contain (1) a crisp condensation of all the propositions asserted in the original book, including Brooks' central argument in The Mythical Man-Month: that large programming projects suffer management problems different from small ones due to the division of labor; that the conceptual integrity of the product is therefore critical; and that it is difficult but possible to achieve this unity; (2) Brooks' view of these propositions a generation later; (3) a reprint of his classic 1986 paper \"No Silver Bullet\"; and (4) today's thoughts on the 1986 assertion, \"There will be no silver bullet within ten years.\"</p> <p>Rating: \u2605\u2605\u2605\u2605\u2606</p>"},{"location":"General/MyBooks/IT_related_books/#network-warrior","title":"Network Warrior","text":"<p>Author: Donahue, Gary A.</p> <p>Published Date: 2007-07-03</p> <p>Pages: 504.0</p> <p>ISBN: 9780596101510</p> <p>Summary: Written by networking veteran with 20 years of experience, Network Warrior provides a thorough and practical introduction to the entire network infrastructure, from cabling to the routers. What you need to learn to pass a Cisco certification exam such as CCNA and what you need to know to survive in the real world are two very different things. The strategies that this book offers weren 't on the exam, but they 're exactly what you need to do your job well. Network Warrior takes you step by step through the world of hubs, switches, firewalls, and more, including ways to troubleshoot a congested network, and when to upgrade and why. Along the way, you 'll gain an historical perspective of various networking features, such as the way Ethernet evolved. Based on the author 's own experience as well as those he worked for and with, Network Warrior is a Cisco-centric book, focused primarily on the TCP/IP protocol and Ethernet networks -- the realm that Cisco Systems now dominates. The book covers: The type of networks now in use, from LANs, WANs and MANs to CANs The OSI Model and the layers involved in sending data Hubs, repeaters, switches, and trunks in practice Auto negotiation and why it 's a common problem in network slowdowns Route maps, routing protocols, and switching algorithms in Cisco routers The resilient Ethernet -- how to make things truly redundant Cisco 6500 multi-layer switches and the Catalyst 3750 switch Telecom nomenclature -- why it 's different from the data world T1 and DS3 Firewall theory, designing access lists, authentication in Cisco devices Server load balancing technology Content switch module in action Designing QOS and what QOS does not do IP design and subnetting made easy The book also explains how to sell your ideas to management, how networks become a mess as a company grows, and why change control is your friend. Network Warrior will help network administrators and engineers win the complex battles they face every day.</p> <p>Rating: \u2605\u2605\u2605\u2605\u2606</p>"},{"location":"General/MyBooks/IT_related_books/#newnes-data-communications-pocket-book","title":"Newnes Data Communications Pocket Book","text":"<p>Author: Tooley, Michael H.; Tooley, Mike</p> <p>Published Date: 1996-12-04</p> <p>Pages: 256.0</p> <p>ISBN: 9780750628846</p> <p>Summary: Despite the complexity of the subject, this wealth of information is presented succinctly and in such a way, using tables, diagrams and brief explanatory text, as to allow the user to locate information quickly and easily. Thus the book should be invaluable to those involved with the installation, commissioning and maintenance of data communications equipment, as well as the end user. A practical engineer's reference that puts the key information at your fingertips Covers essential data, techniques and working practice This update covers the latest international regulations</p> <p>Rating: \u2606\u2606\u2606\u2606\u2606</p>"},{"location":"General/MyBooks/IT_related_books/#packet-guide-to-core-network-protocols","title":"Packet Guide to Core Network Protocols","text":"<p>Author: Hartpence, Bruce</p> <p>Published Date: 2011-07-12</p> <p>Pages: 158.0</p> <p>ISBN: 9781449306533</p> <p>Summary: Take an in-depth tour of core Internet protocols and learn how they work together to move data packets from one network to another. With this concise book, you'll delve into the aspects of each protocol, including operation basics and security risks, and learn the function of network hardware such as switches and routers. Ideal for beginning network engineers, each chapter in this book includes a set of review questions, as well as practical, hands-on lab exercises. Understand basic network architecture, and how protocols and functions fit together Learn the structure and operation of the Ethernet protocol Examine TCP/IP, including the protocol fields, operations, and addressing used for networks Explore the address resolution process in a typical IPv4 network Become familiar with switches, access points, routers, and other network components that process packets Discover how the Internet Control Message Protocol (ICMP) provides error messages during network operations Learn about the network mask (subnetting) and how it helps determine the network</p> <p>Rating: \u2605\u2605\u2605\u2606\u2606</p>"},{"location":"General/MyBooks/IT_related_books/#packet-guide-to-routing-and-switching-exploring-the-network-layer","title":"Packet Guide to Routing and Switching: Exploring the Network Layer","text":"<p>Author: Hartpence, Bruce</p> <p>Published Date: 2011-09-23</p> <p>Pages: 144.0</p> <p>ISBN: 9781449306557</p> <p>Summary: Go beyond layer 2 broadcast domains with this in-depth tour of advanced link and internetwork layer protocols, and learn how they enable you to expand to larger topologies. An ideal follow-up to Packet Guide to Core Network Protocols, this concise guide dissects several of these protocols to explain their structure and operation.</p> <p>This isn\u2019t a book on packet theory. Author Bruce Hartpence built topologies in a lab as he wrote this guide, and each chapter includes several packet captures. You\u2019ll learn about protocol classification, static vs. dynamic topologies, and reasons for installing a particular route.</p> <p>This guide covers:</p> <p>Host routing\u2014Process a routing table and learn how traffic starts out across a network</p> <p>Static routing\u2014Build router routing tables and understand how forwarding decisions are made and processed</p> <p>Spanning Tree Protocol\u2014Learn how this protocol is an integral part of every network containing switches</p> <p>Virtual Local Area Networks\u2014Use VLANs to address the limitations of layer 2 networks</p> <p>Trunking\u2014Get an indepth look at VLAN tagging and the 802.1Q protocol</p> <p>Routing Information Protocol\u2014Understand how this distance vector protocol works in small, modern communication networks</p> <p>Open Shortest Path First\u2014Discover why convergence times of OSPF and other link state protocols are improved over distance vectors</p> <p>Rating: \u2605\u2605\u2605\u2606\u2606</p>"},{"location":"General/MyBooks/IT_related_books/#peopleware-productive-projects-and-teams","title":"Peopleware : Productive Projects and Teams","text":"<p>Author: DeMarco, Tom; Lister, Timothy</p> <p>Published Date: 2013-07-15</p> <p>Pages: 272.0</p> <p>ISBN: N/A</p> <p>Summary: Peopleware asserts that most software development projects fail because of failures within the team running them. This strikingly clear, direct book is written for software development-team leaders and managers, but it's filled with enough commonsense wisdom to appeal to anyone working in technology. Authors Tom DeMarco and Timothy Lister include plenty of illustrative, often amusing anecdotes; their writing is light, conversational, and filled with equal portions of humor and wisdom, and there is a refreshing absence of \"new age\" terms and multistep programs. The advice is presented straightforwardly and ranges from simple issues of prioritization to complex ways of engendering harmony and productivity in your team. Peopleware is a short read that delivers more than many books on the subject twice its size.</p> <p>Rating: \u2605\u2605\u2605\u2605\u2606</p>"},{"location":"General/MyBooks/IT_related_books/#practical-software-architecture-moving-from-system-context-to-deployment","title":"Practical Software Architecture: Moving from System Context to Deployment","text":"<p>Author: Mitra, Tilak</p> <p>Published Date: 2015-11-22</p> <p>Pages: 304.0</p> <p>ISBN: 9780133763034</p> <p>Summary: One of the toughest challenges software architects face is to effectively document their systems and architectures. Yet this is also one of their most \"crucial\" challenges, because ambiguous, incomplete, or inaccurate documentation leads directly to failures in design and implementation. Now, pioneering IBM senior architect Tilak Mitra offers the first complete guide to writing architectural documentation that is clear, crisp, accurate, non-redundant, and \"usable.\" This is the only book to provide detailed prescriptive and pragmatic guidance for documenting any real-world IT project, regardless of system, methodology, or environment. Mitra specifically identifies the artifacts that require documentation, showing how to fully communicate your solution to stakeholders, and enable implementers to move confidently from macro-level to micro-level design. Step by step, Mitra addresses key architectural aspects including: system context, function, operations, infrastructure, integration, performance, capacity planning, SOA, and more. He shows how to avoid \"over-engineering\" and excessive documentation that can delay project delivery and increase risk, while ensuring that designers and developers \"always\" have the accurate and specific guidance they need.</p> <p>Rating: \u2605\u2605\u2605\u2606\u2606</p>"},{"location":"General/MyBooks/IT_related_books/#practical-software-metrics-for-project-management-and-process-improvement","title":"Practical Software Metrics For Project Management And Process Improvement","text":"<p>Author: Grady, Robert B.</p> <p>Published Date: 1992-04-28</p> <p>Pages: 288.0</p> <p>ISBN: 9780137203840</p> <p>Summary: This application-oriented book shows how to apply proven software metrics and methods to efficiently manage software development and maintenance--to help boost productivity, efficiency, and quality of software projects at every stage of the process. Detailing practical methods throughout, the book covers tips to best measure and present progress, a useful model for understanding organization limitations, possible problems in process improvement illustrated by examples, evidence of what works and what doesn't work, and more. An ideal reference for project managers and professionals responsible for process improvement.n</p> <p>Rating: \u2605\u2605\u2605\u2606\u2606</p>"},{"location":"General/MyBooks/IT_related_books/#practice-of-programming-the-addison-wesley-professional-computing-series","title":"Practice of Programming, The (Addison-Wesley Professional Computing Series)","text":"<p>Author: Kernighan, Brian W.; Pike, Rob</p> <p>Published Date: 1999-02-23</p> <p>Pages: 288.0</p> <p>ISBN: 9780201615869</p> <p>Summary: With the same insight and authority that made their book The Unix programming Environment a classic, Brian Kernighan and Rob Pike have written The Practice of Programming to help make individual programmers more effective and productive.</p> <p>Rating: \u2605\u2605\u2605\u2605\u2606</p>"},{"location":"General/MyBooks/IT_related_books/#pragmatic-thinking-and-learning-refactor-your-wetware-pragmatic-programmers","title":"Pragmatic Thinking and Learning: Refactor Your Wetware (Pragmatic Programmers)","text":"<p>Author: Hunt, Andy</p> <p>Published Date: 2008-11-07</p> <p>Pages: 280.0</p> <p>ISBN: 9781934356050</p> <p>Summary: Provides information on ways to \"refactor\" one's brain to develop better cognitive skills.</p> <p>Rating: \u2605\u2605\u2605\u2605\u2606</p>"},{"location":"General/MyBooks/IT_related_books/#principles-of-software-engineering-management","title":"Principles Of Software Engineering Management","text":"<p>Author: Gilb, Tom; Oberhauser, Roy; Reichert, Manfred</p> <p>Published Date: 1988-01-01</p> <p>Pages: 464.0</p> <p>ISBN: 9780201192469</p> <p>Summary: This book provides a state-of-the-art perspective on intelligent process-aware information systems and presents chapters on specific facets and approaches applicable to such systems. Further, it highlights novel advances and developments in various aspects of intelligent process-aware information systems and business process management systems. Intelligence capabilities are increasingly being integrated into or created in many of today\u2019s software products and services. Process-aware information systems provide critical computing infrastructure to support the various processes involved in the creation and delivery of business products and services. Yet the integration of intelligence capabilities into process-aware information systems is a non-trivial yet necessary evolution of these complex systems. The book\u2019s individual chapters address adaptive process management, case management processes, autonomically-capable processes, process-oriented information logistics, process recommendations, reasoning over process models, process portability, and business process intelligence. The primary target groups are researchers and PhD/Master students in the field of information systems.</p> <p>Rating: \u2605\u2605\u2605\u2606\u2606</p>"},{"location":"General/MyBooks/IT_related_books/#professional-software-development-shorter-schedules-higher-quality-products-more-successful-projects-enhanced-careers","title":"Professional Software Development: Shorter Schedules, Higher Quality Products, More Successful Projects, Enhanced Careers","text":"<p>Author: McConnell, Steve</p> <p>Published Date: 2004</p> <p>Pages: 243.0</p> <p>ISBN: 9780321193674</p> <p>Summary: bull; Renowned software expert Steve McConnell presents his latest thoughts on the condition of the software engineering profession bull; Helps software developers regain the sight of the big-picture reasons why their jobs matter bull; A thinking man's guide to the current state of software</p> <p>Rating: \u2605\u2605\u2605\u2606\u2606</p>"},{"location":"General/MyBooks/IT_related_books/#programming-pearls","title":"Programming Pearls","text":"<p>Author: Bentley, Jon L.</p> <p>Published Date: 2000</p> <p>Pages: 239.0</p> <p>ISBN: 9780201657883</p> <p>Summary: \"The first edition of Programming Pearls was one of the most influential books I read early in my career, and many of the insights I first encountered in that book stayed with me long after I read it. Jon has done a wonderful job of updating the material. I am very impressed at how fresh the new examples seem.\"  - Steve McConnell, author, Code Complete</p> <p>When programmers list their favorite books, Jon Bentley's collection of programming pearls is commonly included among the classics. Just as natural pearls grow from grains of sand that irritate oysters, programming pearls have grown from real problems that have irritated real programmers. With origins beyond solid engineering, in the realm of insight and creativity, Bentley's pearls offer unique and clever solutions to those nagging problems. Illustrated by programs designed as much for fun as for instruction, the book is filled with lucid and witty descriptions of practical programming techniques and fundamental design principles. It is not at all surprising that Programming Pearls has been so highly valued by programmers at every level of experience. </p> <p>In this revision, the first in 14 years, Bentley has substantially updated his essays to reflect current programming methods and environments. In addition, there are three new essays on (1) testing, debugging, and timing; (2) set representations; and (3) string problems. All the original programs have been rewritten, and an equal amount of new code has been generated. Implementations of all the programs, in C or C++, are now available on the Web.</p> <p>What remains the same in this new edition is Bentley's focus on the hard core of programming problems and his delivery of workable solutions to those problems. Whether you are new to Bentley's classic or are revisiting his work for some fresh insight, this book is sure to make your own list of favorites.</p> <p>Rating: \u2605\u2605\u2605\u2605\u2606</p>"},{"location":"General/MyBooks/IT_related_books/#project-management-body-of-knowledge-guide-guide-project-mgmt-body-knowledge-pmbok-guide","title":"Project Management Body of Knowledge GUIDE GUIDE PROJECT MGMT BODY KNOWLEDGE: (Pmbok Guide)","text":"<p>Author: Institute, Project Management</p> <p>Published Date: 2009-07-06</p> <p>Pages: 459.0</p> <p>ISBN: 9781933890517</p> <p>Summary: Whether you are a senior executive or a project manager, its your job to help your organization grow and increase its value to stakeholders. Project management is the unique organizational competency that manages change and drives competitive advantage with the outcome of delivering results in line with corporate strategy. A Guide to the Project Management Body of Knowledge (PMBOK Guide)Third Edition is the map to get you there. In 1983, Project Management Institute (PMI) volunteers first sat down to distill the project management body of knowledge. Today, the PMBOK Guide has become a global standard for the project management profession and is one of the best, most versatile documents available across major industries. It contains the fundamental, baseline practices that drive business results for any organization. The third edition has been updated to reflect the most current industry knowledge and practices. One of the most important changes is the evolution from generally accepted on most projects, most of the time to generally recognized as good practice on most projects, most of the time. Several chapters have been updated, rewritten or expanded to include the most current and pressing information facing project managers today. It also includes an expanded index and glossary. The PMBOK GuideThird Edition reflects the collaboration and knowledge of project management leaders who deliver business results. Successful project management is a constant advantage in the dynamic nature of todays organizations. Companies, non-profits, and government agencies around the world are turning to project management to achieve corporate strategic objectives. As recognition of the value of projectmanagement continues to grow, the PMBOK Guide will become even more of an indispe</p> <p>Rating: \u2605\u2605\u2605\u2606\u2606</p>"},{"location":"General/MyBooks/IT_related_books/#python-pocket-reference-4e","title":"Python Pocket Reference 4e","text":"<p>Author: Lutz, Mark</p> <p>Published Date: 2009-10-23</p> <p>Pages: 160.0</p> <p>ISBN: 9780596158088</p> <p>Summary: This is the book to reach for when you're coding on the fly and need an answer now. It's an easy-to-use reference to the core language, with descriptions of commonly used modules and toolkits, and a guide to recent changes, new features, and upgraded built-ins -- all updated to cover Python 3.X as well as version 2.6. You'll also quickly find exactly what you need with the handy index.</p> <p>Written by Mark Lutz -- widely recognized as the world's leading Python trainer -- Python Pocket Reference, Fourth Edition, is the perfect companion to O'Reilly's classic Python tutorials, also written by Mark: Learning Python and Programming Python.</p> <p>Built-in object types, including numbers, lists, dictionaries, and more Statements and syntax for creating and processing objects Functions and modules for structuring and reusing code Python's object-oriented programming tools The exception-handling model Built-in functions, exceptions, and attributes Special operator overloading methods Widely used standard library modules and extensions Command-line options and development tools Python idioms and hints</p> <p>Rating: \u2605\u2605\u2605\u2605\u2606</p>"},{"location":"General/MyBooks/IT_related_books/#rapid-development-taming-wild-software-schedules","title":"Rapid Development: Taming Wild Software Schedules","text":"<p>Author: McConnell, Steve</p> <p>Published Date: 1996-07-02</p> <p>Pages: 680.0</p> <p>ISBN: 9781556159008</p> <p>Summary: A fundamental software engineering project management guide based on the practical requirements of \"Taming Wild Software Schedules\". Emphasizes possible, realistic and \"best practice\" approaches for managers, technical leads and self-managed teams. The author emphasizes efficient development concepts with an examination of rapid development strategies and a study of classic mistakes, within the context of software-development fundamentals and risk management. Dissects the core issues of rapid development, lifecycle planning, estimation and scheduling. Contains very good and practical discussions of customer-oriented development, motivation and teamwork. Explains such fundamental requirements as team structure, feature-set control (the dreaded feature creep in every project), availability and use of productivity tools and project recovery options. Relevant case studies are analyzed and discussed within the context of specific software development problems. Over 200 pages in this publication are devoted to a summary of best practices, everything from the daily build and smoke test, through prototyping, model selection, measurement, reuse, and the top-10 risks list. </p> <p>This publication is definitely recommended and will become a classic in the field, just as the author's prior publication, \"Code Complete\" already is.</p> <p>Rating: \u2605\u2605\u2605\u2606\u2606</p>"},{"location":"General/MyBooks/IT_related_books/#real-leaders-dont-do-powerpoint-how-to-speak-so-people-listen","title":"Real Leaders Don't Do Powerpoint: How to speak so people listen","text":"<p>Author: Witt, Christopher; Fetherling, Dale</p> <p>Published Date: 2009-09-03</p> <p>Pages: 224.0</p> <p>ISBN: 9780749942601</p> <p>Summary: If you are a leader - or aspiring to be one - then tools like PowerPoint detract, not add, to how your performance will be received. In fact, leadership and the ability to speak and sell yourself and your ideas are inextricably intertwined. Successful leaders speak to help listeners know themselves as well as to influence and inspire them. Chris Witt has helped hundreds of executives take their game to another level. Because, when you are a leader, being a good speaker isn't enough. You have to be a great speaker. Your reputation and the success of your business depend on being able to speak to a variety of audiences confidently and persuasively. Through contemporary and historical examples, Chris provides practical advice on how his readers can take their game to another level by understanding ideas such as: * You are the message - it's your experience, vision and character that audiences want * As a leader, you have only three speeches: to identify, to influence and to inspire * Speak less to say more. Fewer, shorter speeches have greater impact * Dare to be different. Leaders don't play by the rules; they take risks</p> <p>Rating: \u2605\u2605\u2605\u2606\u2606</p>"},{"location":"General/MyBooks/IT_related_books/#real-time-software-design-for-embedded-systems","title":"Real-Time Software Design for Embedded Systems","text":"<p>Author: Gomaa, Hassan</p> <p>Published Date: 2016-05-26</p> <p>Pages: 602.0</p> <p>ISBN: 9781107041097</p> <p>Summary: Organized as an introduction followed by several self-contained chapters, this tutorial takes the reader from use cases to complete architectures for real-time embedded systems using SysML, UML, and MARTE and shows how to apply the COMET/RTE design method to real-world problems. --</p> <p>Rating: \u2605\u2605\u2605\u2605\u2606</p>"},{"location":"General/MyBooks/IT_related_books/#reflections-on-management-how-to-manage-your-software-projects-your-teams-your-boss-and-yourself-sei-series-in-software-engineering","title":"Reflections on Management: How to Manage Your Software Projects, Your Teams, Your Boss, and Yourself (Sei Series in Software Engineering)","text":"<p>Author: Humphrey, Watts S.; Thomas, William R.</p> <p>Published Date: 2010-03-29</p> <p>Pages: 288.0</p> <p>ISBN: 9780321711533</p> <p>Summary: A Lifetime of Invaluable Management Insights from Legendary Software Quality Guru Watts S. Humphrey In 1986, Watts S. Humphrey made an outrageous commitment: a promise to transform software development. As the pioneering innovator behind SEI's Capability Maturity Model (CMM), Personal Software Process (PSP), and Team Software Process (TSP), Humphrey has more than met that promise. But his contributions go beyond methodology: For decades, his deeply personal writings on project management have been admired by software engineers worldwide. Reflections on Management brings together Humphrey's best and most influential essays and articles--sharing insights that will be indispensable for anyone who must achieve superior results in software or any other endeavor. Collected here for the first time, these works offer compelling insights into everything from planning day-to-day work to improving quality, encouraging teamwork to becoming a truly great leader. All of these writings share a powerful vision, grounded by a life in software that has extended across nearly six decades. The vision is this: To succeed, professionals must effectively manage for more than plans, schedules, and code--they must manage teams, bosses, and above all, themselves.</p> <p>Rating: \u2605\u2605\u2605\u2606\u2606</p>"},{"location":"General/MyBooks/IT_related_books/#regular-expression-pocket-reference-regular-expressions-for-perl-ruby-php-python-c-java-and-net-pocket-reference-oreilly","title":"Regular Expression Pocket Reference: Regular Expressions for Perl, Ruby, PHP, Python, C, Java and .NET (Pocket Reference (O'Reilly))","text":"<p>Author: Stubblebine, Tony</p> <p>Published Date: 2007-07-18</p> <p>Pages: 129.0</p> <p>ISBN: 9780596514273</p> <p>Summary: A guide to the syntax and semantics of regular expressions for Perl 5.8, Ruby, Java, PHP, C#, .NET, Python, JavaScript, and PCRE.</p> <p>Rating: \u2605\u2605\u2605\u2605\u2606</p>"},{"location":"General/MyBooks/IT_related_books/#restful-web-services","title":"RESTFUL WEB SERVICES","text":"<p>Author: Richardson, Leonard</p> <p>Published Date: nan</p> <p>Pages: 419.0</p> <p>ISBN: 9788184043327</p> <p>Summary: nan</p> <p>Rating: \u2605\u2605\u2605\u2606\u2606</p>"},{"location":"General/MyBooks/IT_related_books/#return-on-software-maximizing-the-return-on-your-software-investment","title":"Return on Software: Maximizing the Return on Your Software Investment","text":"<p>Author: Tockey, Steve; Page-Jones, Meilir</p> <p>Published Date: 2004-08-16</p> <p>Pages: 656.0</p> <p>ISBN: 9780321228758</p> <p>Summary: Annotation Is your organization getting the maximum value out of its precious, limitedresources (specifically, money, time, and manpower)? Most professionaldevelopers do not consider the business implications of the technical decisionsthey are making -- but they should! In order for software engineering to trulybecome an engineering discipline, software professionals need to know andunderstand the engineering economy. This new book helps software practitioners appreciate the organizationalramifications of each decision they make. It is an insight into the engineeringeconomy that more software organizations aspire to. Each chapter contains aseries of self-study questions to help the reader apply the learned techniques, and the book can also serve as a reference that software engineers can turn to, again and again.</p> <p>Rating: \u2605\u2605\u2605\u2606\u2606</p>"},{"location":"General/MyBooks/IT_related_books/#safe-50-distilled-achieving-business-agility-with-the-scaled-agile-framework","title":"SAFe 5.0 Distilled: Achieving Business Agility with the Scaled Agile Framework","text":"<p>Author: Knaster, Richard; Leffingwiell, Dean</p> <p>Published Date: 2020-11-26</p> <p>Pages: 320.0</p> <p>ISBN: 9780136823407</p> <p>Summary: SAFe(R) 5.0: The World's Leading Framework for Business Agility</p> <p>\"Those who master large-scale software delivery will define the economic landscape of the twenty-first century. SAFe 5.0 is a monumental release that I am convinced will be key in helping countless enterprise organizations succeed in their shift from project to product.\" -Dr. Mik Kersten, CEO of Tasktop and author of the book Project to Product</p> <p>Business agility is the ability to compete and thrive in the digital age by quickly responding to unprecedented market changes, threats, and emerging opportunities with innovative business solutions.</p> <p>SAFe(R) 5.0 Distilled: Achieving Business Agility with Scaled Agile Framework(R) explains how adopting SAFe helps enterprises use the power of Agile, Lean, and DevOps to outflank the competition and deliver complex, technology-based business solutions in the shortest possible time.</p> <p>This book will help you</p> <p>Understand the business case for SAFe: its benefits, and the problems it solves Learn the technical, organizational and leadership competencies needed for business agility Refocus on customer centricity with design thinking Better align strategy and execution with Lean Portfolio Management Learn the leadership skills needed to thrive in the digital age Increase the flow of value to customers with value stream networks Register your book for convenient access to downloads, updates, and/or corrections as they become available. See inside book for details.</p> <p>Rating: \u2605\u2605\u2605\u2606\u2606</p>"},{"location":"General/MyBooks/IT_related_books/#scrum-mastery-from-good-to-great-servant-leadership","title":"Scrum Mastery: From Good To Great Servant-Leadership","text":"<p>Author: Watts, Geoff; Traeger, Rebecca; Storksen, Ole; Cohn, Mike; Derby, Esther</p> <p>Published Date: 2013-05-30</p> <p>Pages: 288.0</p> <p>ISBN: 9780957587403</p> <p>Summary: The basics of being a ScrumMaster are fairly straightforward: Facilitate the Scrum process and remove impediments. But being a great ScrumMaster, one who truly embodies the principles of servant-leadership and helps move a team to the high performance levels possible with Scrum, is much harder and much more elusive. In his over ten years of coaching numerous Scrum teams, the highly-respected and experienced Scrum coach Geoff Watts has identified patterns that separate a good ScrumMaster from a great one. In this book, he not only illustrates these patterns through stories of his own experiences and those of the many Scrum teams he has encountered but offers practical guidance for you on your own path to greatness.</p> <p>In this book you will learn: The skills and characteristics of great ScrumMasters How to generate, maintain and increase engagement from the team How to increase the effectiveness of the Scrum meetings, such as retrospectives and daily scrums. How to foster a more creative and collaborative team How to increase the performance of the team How to know when you are a successful ScrumMaster\\</p> <p>Scrum Mastery is for practicing ScrumMasters who want to develop themselves into a great servant-leader capable of taking their teams beyond simple process compliance.</p> <p>Comments on the book</p> <p>Mike Cohn, in his foreword for the book, said:</p> <p>\"Most books rehash well-trod territory and I don\u2019t finish them any wiser. I am positive I will be referring back to this book for many years\" </p> <p>Roman Pichler, author of Agile Product Management with Scrum: Creating Products That Customers Love said:</p> <p>\"I am thoroughly impressed with how comprehensive and well-written the book is. It will be indispensable for many people\"</p> <p>Jean Tabaka, Agile Fellow, Rally Software:</p> <p>\"Geoff brings us a personal and inspired peak into what truly moves us from good to great: great in how we serve; great in how we lead; great in how we create mastery in our teams and organizations; and, great in how we recognize the impediments to our own growth to greatness. Scrum mastery is a skill that can be honed and Geoff gives us rich tools to sharpen our craft.\"</p> <p>Rating: \u2605\u2605\u2605\u2605\u2606</p>"},{"location":"General/MyBooks/IT_related_books/#sed-awk-pocket-reference-2e-text-processing-with-regular-expressions-pocket-reference-oreilly","title":"sed &amp; awk Pocket Reference 2e: Text Processing with Regular Expressions (Pocket Reference (O'Reilly))","text":"<p>Author: Robbins, Arnold</p> <p>Published Date: 2002-06-20</p> <p>Pages: 64.0</p> <p>ISBN: 9780596003524</p> <p>Summary: For people who create and modify text files, sed and awk are power tools for editing. sed, awk, and regular expressions allow programmers and system administrators to automate editing tasks that need to be performed on one or more files, to simplify the task of performing the same edits on multiple files, and to write conversion programs.The sed &amp; awk Pocket Reference is a companion volume to sed &amp; awk, Second Edition, Unix in a Nutshell, Third Edition, and Effective awk Programming, Third Edition. This new edition has expanded coverage of gawk (GNU awk), and includes sections on: An overview of sed and awk?s command line syntax Alphabetical summaries of commands, including nawk and gawk Profiling with pgawk Coprocesses and sockets with gawk Internationalization with gawk A listing of resources for sed and awk users This small book is a handy reference guide to the information presented in the larger volumes. It presents a concise summary of regular expressions and pattern matching, and summaries of sed and awk.Arnold Robbins, an Atlanta native now happily living in Israel, is a professional programmer and technical author and coauthor of various O'Reilly Unix titles. He has been working with Unix systems since 1980, and currently maintains gawk and its documentation.</p> <p>Rating: \u2605\u2605\u2605\u2606\u2606</p>"},{"location":"General/MyBooks/IT_related_books/#sip-understanding-the-session-initiation-protocol-artech-house-telecommunications-library","title":"SIP: Understanding the Session Initiation Protocol (Artech House Telecommunications Library)","text":"<p>Author: Johnston, Alan</p> <p>Published Date: 2009-10-31</p> <p>Pages: 380.0</p> <p>ISBN: 9781607839958</p> <p>Summary: This newly revised edition of the ground-breaking Artech House bestseller, SIP: Understanding the Session Initiation Protocol gives you a thorough and up-to-date understanding of this revolutionary protocol for call signaling and IP Telephony. The second edition includes brand new discussions on the use of SIP for wireless multimedia communications. It explains how SIP is powerful \"rendezvous\" protocol that leverages mobility and presence to allow users to communicate using different devices, modes, and services anywhere they are connected to the Internet You learn why SIP has been chosen by the 3GPP (3rd Generation Partnership Program for wireless cell phones) as the core signaling, presence, and instant messaging protocol.</p> <p>Rating: \u2605\u2605\u2605\u2605\u2606</p>"},{"location":"General/MyBooks/IT_related_books/#slack-getting-past-burn-out-busywork-and-the-myth-of-total-efficiency","title":"Slack: Getting Past Burn-out, Busywork, and the Myth of Total Efficiency","text":"<p>Author: DeMarco, Tom</p> <p>Published Date: 2001-01-01</p> <p>Pages: 226.0</p> <p>ISBN: 9780932633613</p> <p>Summary: To most companies, efficiency means profits and growth. But what if your \u201cefficient\u201d company\u2014the one with the reduced headcount and the \u201cstretch\u201d goals\u2014is actually slowing down and losing money? What if your employees are burning out doing the work of two or more people, leaving them no time for planning, prioritizing, or even lunch? What if you\u2019re losing employees faster than you can hire them? What if your superefficient company is suddenly falling behind? Tom DeMarco, a leading management consultant to both Fortune 500 and up-and-coming companies, has discovered a counterintuitive principle that explains why efficiency improvement can sometimes make a company slow. If your real organizational goal is to become fast (responsive and agile), then he proposes that what you need is not more efficiency, but more slack. What is \u201cslack\u201d? Slack is the degree of freedom in a company that allows it to change. It could be something as simple as adding an assistant to a department, letting high-priced talent spend less time at the photo copier and more time making key decisions. Slack could also appear in the way a company treats employees: instead of loading them up with overwork, a company designed with slack allows its people room to breathe, increase effectiveness, and reinvent themselves. In thirty\u2014three short chapters filled with creative learning tools and charts, you and your company can learn how to: \u2211make sense of the Efficiency/Flexibility quandary \u2211run directly toward risk instead of away from it \u2211strengthen the creative role of middle management \u2211make change and growth work together for even greater profits A innovative approach that works for new- and old-economy companies alike, this revolutionary handbook will debunk commonly held assumptions about real-world management, and give you and your company a brand-new model for achieving and maintaining true effectiveness\u2014and a healthier bottom line.</p> <p>Rating: \u2605\u2605\u2605\u2605\u2606</p>"},{"location":"General/MyBooks/IT_related_books/#software-architects-handbook-become-a-successful-software-architect-by-implementing-effective-architecture-concepts","title":"Software Architect's Handbook: Become a successful software architect by implementing effective architecture concepts","text":"<p>Author: Ingeno, Joseph</p> <p>Published Date: 2018-08-30</p> <p>Pages: 594.0</p> <p>ISBN: 9781788624060</p> <p>Summary: A comprehensive guide to exploring software architecture concepts and implementing best practices The Software Architect\u2019s Handbook is a comprehensive guide to help developers, architects, and senior programmers advance their career in the software architecture domain. This book takes you through all the important concepts, right from design principles to different considerations at various stages of your career in software architecture. The book begins by covering the fundamentals, benefits, and purpose of software architecture. You will discover how software architecture relates to an organization, followed by identifying its significant quality attributes. Once you have covered the basics, you will explore design patterns, best practices, and paradigms for efficient software development. The book discusses which factors you need to consider for performance and security enhancements. You will learn to write documentation for your architectures and make appropriate decisions when considering DevOps. In addition to this, you will explore how to design legacy applications before understanding how to create software architectures that evolve as the market, business requirements, frameworks, tools, and best practices change over time. By the end of this book, you will not only have studied software architecture concepts but also built the soft skills necessary to grow in this field. The Software Architect\u2019s Handbook is for you if you are a software architect, chief technical officer (CTO), or senior developer looking to gain a firm grasp of software architecture.</p> <p>Rating: \u2605\u2605\u2605\u2605\u2606</p>"},{"location":"General/MyBooks/IT_related_books/#software-architecture-in-practice-sei-series-in-software-engineering","title":"Software Architecture in Practice (SEI Series in Software Engineering)","text":"<p>Author: Bass, Len; Clements, Paul; Kazman, Rick</p> <p>Published Date: 2021-10-14</p> <p>Pages: 464.0</p> <p>ISBN: 9780136886099</p> <p>Summary: This award-winning book, substantially updated to reflect the latest developments in the field, introduces the concepts and best practices of software architecture\u2014how a software system is structured and how that system's elements are meant to interact. Distinct from the details of implementation, algorithm, and data representation, an architecture holds the key to achieving system quality, is a reusable asset that can be applied to subsequent systems, and is crucial to a software organization's business strategy.</p> <p>Drawing on their own extensive experience, the authors cover the essential technical topics for designing, specifying, and validating a system. They also emphasize the importance of the business context in which large systems are designed. Their aim is to present software architecture in a real-world setting, reflecting both the opportunities and constraints that companies encounter. To that end, case studies that describe successful architectures illustrate key points of both technical and organizational discussions.</p> <p>Topics new to this edition include:</p> <p>Architecture design and analysis, including the Architecture Tradeoff Analysis Method (ATAM)     Capturing quality requirements and achieving them through quality scenarios and tactics     Using architecture reconstruction to recover undocumented architectures     Documenting architectures using the Unified Modeling Language (UML)     New case studies, including Web-based examples and a wireless Enterprise JavaBeans\u2122 (EJB) system designed to support wearable computers     The financial aspects of architectures, including use of the Cost Benefit Analysis Method (CBAM) to make decisions </p> <p>If you design, develop, or manage the building of large software systems (or plan to do so), or if you are interested in acquiring such systems for your corporation or government agency, use Software Architecture in Practice, Second Edition, to get up to speed on the current state of software architecture.</p> <p>Rating: \u2605\u2605\u2605\u2606\u2606</p>"},{"location":"General/MyBooks/IT_related_books/#software-architecture-in-practice-sei-series-in-software-engineering_1","title":"Software Architecture in Practice (SEI Series in Software Engineering)","text":"<p>Author: Bass, Len; Clements, Paul; Kazman, Rick</p> <p>Published Date: 2012-10-04</p> <p>Pages: 624.0</p> <p>ISBN: 9780321815736</p> <p>Summary: This award-winning book, substantially updated to reflect the latest developments in the field, introduces the concepts and best practices of software architecture\u2014how a software system is structured and how that system's elements are meant to interact. Distinct from the details of implementation, algorithm, and data representation, an architecture holds the key to achieving system quality, is a reusable asset that can be applied to subsequent systems, and is crucial to a software organization's business strategy.</p> <p>Drawing on their own extensive experience, the authors cover the essential technical topics for designing, specifying, and validating a system. They also emphasize the importance of the business context in which large systems are designed. Their aim is to present software architecture in a real-world setting, reflecting both the opportunities and constraints that companies encounter. To that end, case studies that describe successful architectures illustrate key points of both technical and organizational discussions.</p> <p>Topics new to this edition include:</p> <p>Architecture design and analysis, including the Architecture Tradeoff Analysis Method (ATAM)     Capturing quality requirements and achieving them through quality scenarios and tactics     Using architecture reconstruction to recover undocumented architectures     Documenting architectures using the Unified Modeling Language (UML)     New case studies, including Web-based examples and a wireless Enterprise JavaBeans\u2122 (EJB) system designed to support wearable computers     The financial aspects of architectures, including use of the Cost Benefit Analysis Method (CBAM) to make decisions </p> <p>If you design, develop, or manage the building of large software systems (or plan to do so), or if you are interested in acquiring such systems for your corporation or government agency, use Software Architecture in Practice, Second Edition, to get up to speed on the current state of software architecture.</p> <p>Rating: \u2605\u2605\u2605\u2606\u2606</p>"},{"location":"General/MyBooks/IT_related_books/#software-architecture-the-hard-parts-modern-trade-off-analyses-for-distributed-architectures","title":"Software Architecture: The Hard Parts: Modern Trade-Off Analyses for Distributed Architectures","text":"<p>Author: Ford, Neal; Richards, Mark; Sadalage, Pramod; Dehghani, Zhamak</p> <p>Published Date: 2021-11-05</p> <p>Pages: 450.0</p> <p>ISBN: 9781492086895</p> <p>Summary: Architects are often harried because they have no clean, easy decisions: everything is an awful tradeoff between two or more less than perfect alternatives. These are the difficult problems architects face, what this book's authors call the hard parts. These topics have no best practices, forcing architects to understand various tradeoffs to succeed. This book discusses these hard parts by not only investigating what makes architecture so difficult, but also by providing proven ways to address these problems and make them easier.</p> <p>The book explores topics such as choosing an appropriate architecture, deciding on service granularity, managing workflows and orchestration, managing and decoupling contracts, managing distributed transactions, and optimizing operational characteristics such as scalability, elasticity, and performance. As practicing consultants, the authors focus on questions they commonly hear architects ask and provide techniques that enable them to discover the tradeoffs necessary to answer these questions.</p> <p>Rating: \u2605\u2605\u2605\u2605\u2606</p>"},{"location":"General/MyBooks/IT_related_books/#software-engineering-international-computer-science-series","title":"Software Engineering (International Computer Science Series)","text":"<p>Author: Sommerville, Ian</p> <p>Published Date: 2000-08-22</p> <p>Pages: 720.0</p> <p>ISBN: 9780201398151</p> <p>Summary: The present edited book is a collection of 18 chapters written by internationally recognized experts and well-known professionals of the field. Chapters contribute to diverse facets of automation and control. The volume is organized in four parts according to the main subjects, regarding the recent advances in this field of engineering. The first thematic part of the book is devoted to automation. This includes solving of assembly line balancing problem and design of software architecture for cognitive assembling in production systems. The second part of the book concerns different aspects of modelling and control. This includes a study on modelling pollutant emission of diesel engine, development of a PLC program obtained from DEVS model, control networks for digital home, automatic control of temperature and flow in heat exchanger, and non-linear analysis and design of phase locked loops. The third part addresses issues of parameter estimation and filter design, including methods for parameters estimation, control and design of the wave digital filters. The fourth part presents new results in the intelligent control. This includes building a neural PDF strategy for hydroelectric satation simulator, intelligent network system for process control, neural generalized predictive control for industrial processes, intelligent system for forecasting, diagnosis and decision making based on neural networks and self-organizing maps, development of a smart semantic middleware for the Internet , development of appropriate AI methods in fault-tollerant control, building expert system in rotary railcar dumpers, expert system for plant asset management, and building of a image retrieval system in heterogeneous database. The content of this thematic book admirably reflects the complementary aspects of theory and practice which have taken place in the last years. Certainly, the content of this book will serve as a valuable overview of theoretical and practical methods in control and automation to those who deal with engineering and research in this field of activities.</p> <p>Rating: \u2605\u2605\u2605\u2606\u2606</p>"},{"location":"General/MyBooks/IT_related_books/#software-engineering-update-8th-edition-international-computer-science-series","title":"Software Engineering: Update, 8th Edition (International Computer Science Series)","text":"<p>Author: Sommerville, Ian</p> <p>Published Date: 2006-06-15</p> <p>Pages: 864.0</p> <p>ISBN: 9780321313799</p> <p>Summary: Never HIGHLIGHT a Book Again! Virtually all of the testable terms, concepts, persons, places, and events from the textbook are included. Cram101 Just the FACTS101 studyguides give all of the outlines, highlights, notes, and quizzes for your textbook with optional online comprehensive practice tests. Only Cram101 is Textbook Specific. Accompanys: 9780321313799 .</p> <p>Rating: \u2605\u2605\u2605\u2606\u2606</p>"},{"location":"General/MyBooks/IT_related_books/#software-estimation-demystifying-the-black-art","title":"Software Estimation: Demystifying the Black Art","text":"<p>Author: McConnell, Steve</p> <p>Published Date: 2006-02-22</p> <p>Pages: 352.0</p> <p>ISBN: 9780735605350</p> <p>Summary: Often referred to as the \"black art\" because of its complexity and uncertainty, software estimation is not as difficult or puzzling as people think. In fact, generating accurate estimates is straightforward\u2014once you understand the art of creating them.</p> <p>In his highly anticipated book, acclaimed author Steve McConnell unravels the mystery to successful software estimation\u2014distilling academic information and real-world experience into a practical guide for working software professionals. Instead of arcane treatises and rigid modeling techniques, this guide highlights a proven set of procedures, understandable formulas, and heuristics that individuals and development teams can apply to their projects to help achieve estimation proficiency.</p> <p>Rating: \u2605\u2605\u2605\u2605\u2606</p>"},{"location":"General/MyBooks/IT_related_books/#software-extension-to-the-pmbok-guide","title":"Software Extension to the PMBOK Guide","text":"<p>Author: Institute, Project Management; Engineers, Institute of Electrical and Electronics</p> <p>Published Date: 2013-01-30</p> <p>Pages: 247.0</p> <p>ISBN: 9781628250138</p> <p>Summary: The Software Extension to the PMBOK\u00ae Guide provides guidance on the management of software development projects, and bridges the gap between the traditional, predictive approach described in the PMBOK\u00ae Guide and iterative approaches such as agile more commonly used in software development. </p> <p>As an extension to the PMBOK\u00ae Guide \u2013 Fifth Edition, this PMI standard builds upon and extends the content found in the PMBOK\u00ae Guide. The two books can be used in conjunction to manage software development projects of all types.</p> <p>Rating: \u2605\u2605\u2605\u2606\u2606</p>"},{"location":"General/MyBooks/IT_related_books/#software-project-survival-guide-pro-best-practices","title":"Software Project Survival Guide (Pro -- Best Practices)","text":"<p>Author: McConnell, Steve</p> <p>Published Date: 1997-10-15</p> <p>Pages: 304.0</p> <p>ISBN: 9781572316218</p> <p>Summary: Looks at a successful software project and provides details for software development for clients using object-oriented design and programming.</p> <p>Rating: \u2605\u2605\u2605\u2606\u2606</p>"},{"location":"General/MyBooks/IT_related_books/#software-requirements-developer-best-practices","title":"Software Requirements (Developer Best Practices)","text":"<p>Author: Wiegers, Karl; Beatty, Joy</p> <p>Published Date: 2013-08-15</p> <p>Pages: 670.0</p> <p>ISBN: 9780735679665</p> <p>Summary: Now in its third edition, this classic guide to software requirements engineering has been fully updated with new topics, examples, and guidance. Two leaders in the requirements community have teamed up to deliver a contemporary set of practices covering the full range of requirements development and management activities on software projects. Describes practical, effective, field-tested techniques for managing the requirements engineering process from end to end. Provides examples demonstrating how requirements \"good practices\" can lead to fewer change requests, higher customer satisfaction, and lower development costs. Fully updated with contemporary examples and many new practices and techniques. Describes how to apply effective requirements practices to agile projects and numerous other special project situations. Targeted to business analysts, developers, project managers, and other software project stakeholders who have a general understanding of the software development process. Shares the insights gleaned from the authors' extensive experience delivering hundreds of software-requirements training courses, presentations, and webinars.</p> <p>New chapters are included on specifying data requirements, writing high-quality functional requirements, and requirements reuse. Considerable depth has been added on business requirements, elicitation techniques, and nonfunctional requirements. In addition, new chapters recommend effective requirements practices for various special project situations, including enhancement and replacement, packaged solutions, outsourced, business process automation, analytics and reporting, and embedded and other real-time systems projects.</p> <p>Rating: \u2605\u2605\u2605\u2605\u2606</p>"},{"location":"General/MyBooks/IT_related_books/#solutions-architects-handbook-kick-start-your-solutions-architect-career-by-learning-architecture-design-principles-and-strategies","title":"Solutions Architect's Handbook: Kick-start your solutions architect career by learning architecture design principles and strategies","text":"<p>Author: Shrivastava, Saurabh; Srivastav, Neelanjali; Arora, Kamal</p> <p>Published Date: 2020-03-21</p> <p>Pages: 490.0</p> <p>ISBN: 9781838645649</p> <p>Summary: Kick-start your solutions architect career by learning architecture design principles and strategies</p> <p>Rating: \u2605\u2605\u2605\u2606\u2606</p>"},{"location":"General/MyBooks/IT_related_books/#sql-in-a-nutshell-a-desktop-quick-reference","title":"SQL in a Nutshell \u2013 A Desktop Quick Reference","text":"<p>Author: Kline, Kevin E.; Kline, Daniel; Kline, Daniel</p> <p>Published Date: 2001-01-09</p> <p>Pages: 224.0</p> <p>ISBN: 9781565927445</p> <p>Summary: SQL in a Nutshell applies the eminently useful \"Nutshell\" format to Structured Query Language (SQL), the elegant--but complex--descriptive language that is used to create and manipulate large stores of data. For SQL programmers, analysts, and database administrators, the new second edition of SQL in a Nutshell is the essential date language reference for the world's top SQL database products. SQL in a Nutshell is a lean, focused, and thoroughly comprehensive reference for those who live in a deadline-driven world.This invaluable desktop quick reference drills down and documents every SQL command and how to use it in both commercial (Oracle, DB2, and Microsoft SQL Server) and open source implementations (PostgreSQL, and MySQL). It describes every command and reference and includes the command syntax (by vendor, if the syntax differs across implementations), a clear description, and practical examples that illustrate important concepts and uses. And it also explains how the leading commercial and open sources database product implement SQL. This wealth of information is packed into a succinct, comprehensive, and extraordinarily easy-to-use format that covers the SQL syntax of no less than 4 different databases.When you need fast, accurate, detailed, and up-to-date SQL information, SQL in a Nutshell, Second Edition will be the quick reference you'll reach for every time. SQL in a Nutshell is small enough to keep by your keyboard, and concise (as well as clearly organized) enough that you can look up the syntax you need quickly without having to wade through a lot of useless fluff. You won't want to work on a project involving SQL without it.</p> <p>Rating: \u2605\u2605\u2605\u2606\u2606</p>"},{"location":"General/MyBooks/IT_related_books/#sql-pocket-guide-2e-missing-manual","title":"SQL Pocket Guide 2e (Missing Manual)","text":"<p>Author: Gennick, Jonathan; Zhao, Alice</p> <p>Published Date: 2006-05-05</p> <p>Pages: 192.0</p> <p>ISBN: 9780596526887</p> <p>Summary: SQL is the dominant programming language for retrieving and updating information from a database. This pocket reference allows experienced programmers and database administrators to increase their SQL skills on the job with the three most used commercial database products: Oracle, DB2, and SQL Server.</p> <p>Rating: \u2605\u2605\u2605\u2606\u2606</p>"},{"location":"General/MyBooks/IT_related_books/#succeeding-with-agile-software-development-using-scrum-addison-wesley-signature-series-cohn","title":"Succeeding with Agile: Software Development Using Scrum (Addison-Wesley Signature Series (Cohn))","text":"<p>Author: Cohn, Mike</p> <p>Published Date: 2009-11-05</p> <p>Pages: 512.0</p> <p>ISBN: 9780321579362</p> <p>Summary: Proven, 100% Practical Guidance for Making Scrum and Agile Work in Any Organization.</p> <p>This is the definitive, realistic, actionable guide to starting fast with Scrum and agile\u2013and then succeeding over the long haul. Leading agile consultant and practitioner Mike Cohn presents detailed recommendations, powerful tips, and real-world case studies drawn from his unparalleled experience helping hundreds of software organizations make Scrum and agile work. </p> <p>\"Succeeding with Agile\" is for pragmatic software professionals who want real answers to the most difficult challenges they face in implementing Scrum. Cohn covers every facet of the transition: getting started, helping individuals transition to new roles, structuring teams, scaling up, working with a distributed team, and finally, implementing effective metrics and continuous improvement.</p> <p>Throughout, Cohn presents \u201cThings to Try Now\u201d sections based on his most successful advice. Complementary \u201cObjection\u201d sections reproduce typical conversations with those resisting change and offer practical guidance for addressing their concerns. Coverage includes: - Practical ways to get started immediately\u2013and \u201cget good\u201d fast - Overcoming individual resistance to the changes Scrum requires - Staffing Scrum projects and building effective teams - Establishing \u201cimprovement communities\u201d of people who are passionate about driving change - Choosing which agile technical practices to use or experiment with - Leading self-organizing teams - Making the most of Scrum sprints, planning, and quality techniques - Scaling Scrum to distributed, multiteam projects - Using Scrum on projects with complex sequential processes or challenging compliance and governance requirements - Understanding Scrum\u2019s impact on HR, facilities, and project management</p> <p>Whether you've completed a few sprints or multiple agile projects and whatever your role\u2013manager, developer, coach, ScrumMaster, product owner, analyst, team lead, or project lead\u2013this book will help you succeed with your very next project. Then, it will help you go much further: It will help you transform your entire development organization.</p> <p>Rating: \u2605\u2605\u2605\u2605\u2606</p>"},{"location":"General/MyBooks/IT_related_books/#sysml-distilled-a-brief-guide-to-the-systems-modeling-language","title":"SysML Distilled: A Brief Guide to the Systems Modeling Language","text":"<p>Author: Delligatti, Lenny</p> <p>Published Date: 2013-11-08</p> <p>Pages: 300.0</p> <p>ISBN: 9780321927866</p> <p>Summary: The Systems Modeling Language (SysML) extends UML with powerful systems engineering capabilities for modeling a wider spectrum of systems and capturing all aspects of a system's design. SysML Distilled is the first clear, concise guide for everyone who wants to start creating effective SysML models.</p> <p>(Drawing on his pioneering experience at Lockheed Martin and NASA, Lenny Delligatti illuminates SysML's core components and provides practical advice to help you create good models and good designs. Delligatti begins with an easy-to-understand overview of Model-Based Systems Engineering (MBSE) and an explanation of how SysML enables effective system specification, analysis, design, optimization, verification, and validation. Next, he shows how to use all nine types of SysML diagrams, even if you have no previous experience with modeling languages. A case study running through the text demonstrates the use of SysML in modeling a complex, real-world sociotechnical system.</p> <p>Modeled after Martin Fowler's classic UML Distilled, Delligatti's indispensable guide quickly teaches you what you need to know to get started and helps you deepen your knowledge incrementally as the need arises. Like SysML itself, the book is method independent and is designed to support whatever processes, procedures, and tools you already use.</p> <p>Coverage Includes  Why SysML was created and the business case for using it Quickly putting SysML to practical use What to know before you start a SysML modeling project Essential concepts that apply to all SysML diagrams SysML diagram elements and relationships Diagramming block definitions, internal structures, use cases, activities, interactions, state machines, constraints, requirements, and packages Using allocations to define mappings among elements across a model SysML notation tables, version changes, and sources for more information </p> <p>Rating: \u2605\u2605\u2605\u2606\u2606</p>"},{"location":"General/MyBooks/IT_related_books/#tcpip-illustrated-vol-1-the-protocols-addison-wesley-professional-computing-series","title":"TCP/IP Illustrated, Vol. 1: The Protocols (Addison-Wesley Professional Computing Series)","text":"<p>Author: Stevens, W. Richard</p> <p>Published Date: 2011-06-06</p> <p>Pages: 1096.0</p> <p>ISBN: 9780201633467</p> <p>Summary: Cisco Firewalls Concepts, design and deployment for Cisco Stateful Firewall solutions \u00bf \u201c In this book, Alexandre proposes a totally different approach to the important subject of firewalls: Instead of just presenting configuration models, he uses a set of carefully crafted examples to illustrate the theory in action.\u00bfA must read!\u201d \u2014Luc Billot, Security Consulting Engineer at Cisco \u00bf Cisco Firewalls thoroughly explains each of the leading Cisco firewall products, features, and solutions, and shows how they can add value to any network security design or operation. The author tightly links theory with practice, demonstrating how to integrate Cisco firewalls into highly secure, self-defending networks. Cisco Firewalls shows you how to deploy Cisco firewalls as an essential component of every network infrastructure. The book takes the unique approach of illustrating complex configuration concepts through step-by-step examples that demonstrate the theory in action. This is the first book with detailed coverage of firewalling Unified Communications systems, network virtualization architectures, and environments that include virtual machines. The author also presents indispensable information about integrating firewalls with other security elements such as IPS, VPNs, and load balancers; as well as a complete introduction to firewalling IPv6 networks. Cisco Firewalls will be an indispensable resource for engineers and architects designing and implementing firewalls; security administrators, operators, and support professionals; and anyone preparing for the CCNA Security, CCNP Security, or CCIE Security certification exams. \u00bf Alexandre Matos da Silva Pires de Moraes, CCIE No. 6063, has worked as a Systems Engineer for Cisco Brazil since 1998 in projects that involve not only Security and VPN technologies but also Routing Protocol and Campus Design, IP Multicast Routing, and MPLS Networks Design. He coordinated a team of Security engineers in Brazil and holds the CISSP, CCSP, and three CCIE certifications (Routing/Switching, Security, and Service Provider). A frequent speaker at Cisco Live, he holds a degree in electronic engineering from the Instituto Tecnol\u00f3gico de Aeron\u00e1utica (ITA \u2013 Brazil). \u00bf \u00b7\u00bf\u00bf\u00bf\u00bf\u00bf\u00bf\u00bf Create advanced security designs utilizing the entire Cisco firewall product family \u00b7\u00bf\u00bf\u00bf\u00bf\u00bf\u00bf\u00bf Choose the right firewalls based on your performance requirements \u00b7\u00bf\u00bf\u00bf\u00bf\u00bf\u00bf\u00bf Learn firewall\u00bf configuration fundamentals and master the tools that provide insight about firewall operations \u00b7\u00bf\u00bf\u00bf\u00bf\u00bf\u00bf\u00bf Properly insert firewalls in your network\u2019s topology using Layer 3 or Layer 2 connectivity \u00b7\u00bf\u00bf\u00bf\u00bf\u00bf\u00bf\u00bf Use Cisco firewalls as part of a robust, secure virtualization architecture \u00b7\u00bf\u00bf\u00bf\u00bf\u00bf\u00bf\u00bf Deploy Cisco ASA firewalls with or without NAT \u00b7\u00bf\u00bf\u00bf\u00bf\u00bf\u00bf\u00bf Take full advantage of the classic IOS firewall feature set (CBAC) \u00b7\u00bf\u00bf\u00bf\u00bf\u00bf\u00bf\u00bf Implement flexible security policies with the Zone Policy Firewall (ZPF) \u00b7\u00bf\u00bf\u00bf\u00bf\u00bf\u00bf\u00bf Strengthen stateful inspection with antispoofing, TCP normalization, connection limiting, and IP fragmentation handling \u00b7\u00bf\u00bf\u00bf\u00bf\u00bf\u00bf\u00bf Use application-layer inspection capabilities built into Cisco firewalls \u00b7\u00bf\u00bf\u00bf\u00bf\u00bf\u00bf\u00bf Inspect IP voice protocols, including SCCP, H.323, SIP, and MGCP \u00b7\u00bf\u00bf\u00bf\u00bf\u00bf\u00bf\u00bf Utilize identity to provide user-based stateful functionality \u00b7\u00bf\u00bf\u00bf\u00bf\u00bf\u00bf\u00bf Understand how multicast traffic is handled through firewalls \u00b7\u00bf\u00bf\u00bf\u00bf\u00bf\u00bf\u00bf Use firewalls to protect your IPv6 deployments \u00bf This security book is part of the Cisco Press Networking Technology Series. Security titles from Cisco Press help networking professionals secure critical data and resources, prevent and mitigate network attacks, and build end-to-end, self-defending networks.</p> <p>Rating: \u2605\u2605\u2605\u2605\u2606</p>"},{"location":"General/MyBooks/IT_related_books/#team-geek-a-software-developers-guide-to-programming-well-with-others","title":"Team Geek: A Software Developer's Guide to Programming Well with Others","text":"<p>Author: Fitzpatrick, Brian W.; Collins-Sussman, Ben</p> <p>Published Date: 2012-08-07</p> <p>Pages: 194.0</p> <p>ISBN: 9781449302443</p> <p>Summary: As a software engineer, you're great with computer languages, compilers, debuggers, and algorithms. And in a perfect world, those who produce the best code are the most successful. But in our perfectly messy world, success also depends on how you work with people to get your job done.</p> <p>In this highly entertaining book, Brian Fitzpatrick and Ben Collins-Sussman cover basic patterns and anti-patterns for working with other people, teams, and users while trying to develop software. It's valuable information from two respected software engineers whose popular video series, \"Working with Poisonous People,\" has attracted hundreds of thousands of viewers.</p> <p>You'll learn how to deal with imperfect people--those irrational and unpredictable beings--in the course of your work. And you'll discover why playing well with others is at least as important as having great technical skills. By internalizing the techniques in this book, you'll get more software written, be more influential, be happier in your career.</p> <p>Rating: \u2605\u2605\u2605\u2606\u2606</p>"},{"location":"General/MyBooks/IT_related_books/#the-7-habits-of-highly-effective-people","title":"The 7 Habits of Highly Effective People","text":"<p>Author: Covey, Stephen R.; Covey, Sean</p> <p>Published Date: 1999-01-04</p> <p>Pages: 372.0</p> <p>ISBN: 9780684858395</p> <p>Summary: The 7 Habits Of Highly Effective People is a comprehensive program based on developing an awareness of how perceptions and assumptions hinder success - in business as well as personal relationships. Here's an approach that will help broaden your way of thinking and lead to greater opportunities and effective problem solving.</p> <p>Be Pro-Active: Take the initiative and the responsibility to make things happen.</p> <p>Begin With an End in Mind: Start with a clear destination to understand where you are now, where you're going and what you value most.</p> <p>Put First Things First: Manage yourself. Organize and execute around priorities.</p> <p>Think Win/Win: See life as a cooperative, not a comprehensive arena where success is not achieved at the expense or exclusion of the success of others.</p> <p>Seek First to Understand: Understand then be understood to build the skills of empathetic listening that inspires openness and trust.</p> <p>Synergize: Apply the principles of cooperative creativity and value differences.</p> <p>Renewal: Preserving and enhanving your greatest asset, yourself, by renewing the physical, spiritual, mental and social/emotional dimensions of your nature.</p> <p>Stephen R. Covey is the most respected motivator in the business world today. Learn to use his 7 Habits Of Highly Effective People - and see how they can change your life.</p> <p>Rating: \u2605\u2605\u2605\u2605\u2606</p>"},{"location":"General/MyBooks/IT_related_books/#the-8th-habit-from-effectiveness-to-greatness","title":"The 8th Habit: From Effectiveness to Greatness","text":"<p>Author: Covey, Stephen R.</p> <p>Published Date: 2006-01-03</p> <p>Pages: 432.0</p> <p>ISBN: 9780743206839</p> <p>Summary: The 8th Habit: From Effectiveness to Greatness</p> <p>Rating: \u2605\u2605\u2605\u2605\u2606</p>"},{"location":"General/MyBooks/IT_related_books/#the-basics-of-hacking-and-penetration-testing-ethical-hacking-and-penetration-testing-made-easy","title":"The Basics of Hacking and Penetration Testing: Ethical Hacking and Penetration Testing Made Easy","text":"<p>Author: Engebretson, Patrick</p> <p>Published Date: 2011</p> <p>Pages: 180.0</p> <p>ISBN: 9781597496551</p> <p>Summary: The Basics of Hacking and Penetration Testing serves as an introduction to the steps required to complete a penetration test or perform an ethical hack from beginning to end. No prior hacking experience is needed. You learn how to properly utilize and interpret the results of modern day hacking tools, which are required to complete a penetration test. Tool coverage includes Backtrack Linux, Google reconnaissance, MetaGooFil, dig, Nmap, Nessus, Metasploit, Fast Track Autopwn, Netcat, Hacker Defender rootkit, and more. A simple and clean explanation of how to effectively utilize these tools as well as the introduction to a four-step methodology for conducting a penetration test or hack, will provide you with know-how required to jump start your career or gain a better understanding of offensive security. The book serves as an introduction to penetration testing and hacking and will provide you with a solid foundation of knowledge. After completing the book readers will be prepared to take on in-depth and advanced topics in hacking and penetration testing. The book walks through each of the steps and tools in a structured, orderly manner allowing readers to understand how the output from each tool can be fully utilized in the subsequent phases of the penetration test. This process allows readers to clearly see how the tools and phases relate.</p> <p>Each chapter contains hands-on examples and exercises that are designed to teach you how to interpret the results and utilize those results in later phases Written by an author who works in the field as a Penetration Tester and who teaches Offensive Security, Penetration Testing, and Ethical Hacking, and Exploitation classes at Dakota State University Utilizes the Backtrack Linux distribution and focuses on the seminal tools required to complete a penetration test</p> <p>Rating: \u2605\u2605\u2605\u2606\u2606</p>"},{"location":"General/MyBooks/IT_related_books/#the-c-programming-language","title":"The C Programming Language","text":"<p>Author: Kernighan, Brian W.; Ritchie, Dennis M.; Kernighan, B. W.; Kernighan, Ritchie; , Kernighan; , Ritchie; Ritchi, Dennis M.</p> <p>Published Date: 1988</p> <p>Pages: 272.0</p> <p>ISBN: 9780131103627</p> <p>Summary: This book is meant to help the reader learn how to program in C. It is the definitive reference guide, now in a second edition. Although the first edition was written in 1978, it continues to be a worldwide best-seller. This second edition brings the classic original up to date to include the ANSI standard. </p> <p>From the Preface:  We have tried to retain the brevity of the first edition. C is not a big language, and it is not well served by a big book. We have improved the exposition of critical features, such as pointers, that are central to C programming. We have refined the original examples, and have added new examples in several chapters. For instance, the treatment of complicated declarations is augmented by programs that convert declarations into words and vice versa. As before, all examples have been tested directly from the text, which is in machine-readable form. </p> <p>As we said in the first preface to the first edition, C \"wears well as one's experience with it grows.\" With a decade more experience, we still feel that way. We hope that this book will help you to learn C and use it well.</p> <p>Rating: \u2605\u2605\u2605\u2605\u2606</p>"},{"location":"General/MyBooks/IT_related_books/#the-elements-of-umltm-20-style","title":"The Elements of UML\u2122 2.0 Style","text":"<p>Author: Ambler, Scott W.</p> <p>Published Date: 2005-05-09</p> <p>Pages: 202.0</p> <p>ISBN: 9780521616782</p> <p>Summary: For all developers who create models using the Unified Modeling Language (UML) 2.x The Elements of UMLTM 2.0 Style sets the rules for style that will improve your productivity - especially in teams, where understandability and consistency are critical. Coming from renowned UML expert Scott Ambler, the book furnishes a set of rules for modelling in the UML and describes a collection of standards and guidelines for creating effective UML diagrams that will be concise and easy to understand. It provides conventions for: Class diagrams; Timing Diagrams; Use case diagrams; Composite Structure Diagrams; Sequence diagrams; Interaction Overview Diagrams; Activity diagrams; Object diagrams; State machine diagrams; Package diagrams; Communication diagrams; Deployment diagrams and Component diagrams. The Elements of UMLTM 2.0 Style sets the rules for style that will improve your productivity.</p> <p>Rating: \u2605\u2605\u2605\u2606\u2606</p>"},{"location":"General/MyBooks/IT_related_books/#the-first-90-days-critical-success-strategies-for-new-leaders-at-all-levels","title":"The First 90 Days: Critical Success Strategies for New Leaders at All Levels","text":"<p>Author: Watkins, Michael D.</p> <p>Published Date: 2003</p> <p>Pages: 248.0</p> <p>ISBN: 9781591391104</p> <p>Summary: Whether challenged with taking on a startup, turning a business around, or inheriting a high-performing unit, a new leader's success or failure is determined within the first 90 days on the job.</p> <p>In this hands-on guide, Michael Watkins, a noted expert on leadership transitions, offers proven strategies for moving successfully into a new role at any point in one's career. The First 90 Days provides a framework for transition acceleration that will help leaders diagnose their situations, craft winning transition strategies, and take charge quickly. </p> <p>Practical examples illustrate how to learn about new organizations, build teams, create coalitions, secure early wins, and lay the foundation for longer-term success. In addition, Watkins provides strategies for avoiding the most common pitfalls new leaders encounter, and shows how individuals can protect themselves-emotionally as well as professionally-during what is often an intense and vulnerable period.</p> <p>Concise and actionable, this is the survival guide no new leader should be without.</p> <p>Rating: \u2605\u2605\u2605\u2606\u2606</p>"},{"location":"General/MyBooks/IT_related_books/#the-healthy-programmer-get-fit-feel-better-and-keep-coding-pragmatic-programmers","title":"The Healthy Programmer: Get Fit, Feel Better, and Keep Coding (Pragmatic Programmers)","text":"<p>Author: Kutner, Joe</p> <p>Published Date: 2013-07-26</p> <p>Pages: 220.0</p> <p>ISBN: 9781937785314</p> <p>Summary: To keep doing what you love, you need to maintain your own systems, not just the ones you write code for. Regular exercise and proper nutrition help you learn, remember, concentrate, and be creative\u2014skills critical to doing your job well. Learn how to change your work habits, master exercises that make working at a computer more comfortable, and develop a plan to keep fit, healthy, and sharp for years to come.</p> <p>This book is intended only as an informative guide for those wishing to know more about health issues. In no way is this book intended to replace, countermand, or conflict with the advice given to you by your own healthcare provider including Physician, Nurse Practitioner, Physician Assistant, Registered Dietician, and other licensed professionals.</p> <p>Rating: \u2605\u2605\u2605\u2606\u2606</p>"},{"location":"General/MyBooks/IT_related_books/#the-ideas-book-60-ways-to-generate-ideas-visually-concise-advice-series","title":"The Ideas Book: 60 ways to generate ideas visually (Concise Advice Series)","text":"<p>Author: Duncan, Kevin</p> <p>Published Date: 2019-04-04</p> <p>Pages: 128.0</p> <p>ISBN: 9781912555260</p> <p>Summary: Ideas are the fuel of business - it only takes one good one to make a difference. Distilled into this single, handy-sized volume are 60 of the most useful diagrams and visual techniques, many of which are used by consultants, academics, MBA students, and smart managers globally to help them think of and create great ideas. Structured into five key parts (preparing to create ideas; generating ideas; generating more ideas; judging ideas; enacting ideas), the 60 diagrams are each visually presented and then explained in an accessible manner, including tips and advice on how you can apply them to your own situations.</p> <p>Rating: \u2605\u2605\u2605\u2606\u2606</p>"},{"location":"General/MyBooks/IT_related_books/#the-illustrated-network-how-tcpip-works-in-a-modern-network","title":"The Illustrated Network: How TCP/IP Works in a Modern Network","text":"<p>Author: Goralski, Walter</p> <p>Published Date: 2017-04-28</p> <p>Pages: 936.0</p> <p>ISBN: 9780128110270</p> <p>Summary: The Illustrated Network: How TCP/IP Works in a Modern Network, Second Edition presents an illustrated explanation on how TCP/IP works, using consistent examples from a working network configuration that includes servers, routers and workstations. Diagnostic traces allow the reader to follow the discussion with unprecedented clarity and precision. True to its title, there are 330+ diagrams and screenshots, as well as topology diagrams and a unique repeating chapter opening diagram. Illustrations are also used as end-of-chapter questions. Based on examples of a complete and modern network, all the material comes from real objects connected and running on the network.</p> <p>The book emphasizes the similarities across all networks, since all share similar components, from the smallest LAN to the global internet. Layered protocols are the rule, and all hosts attached to the Internet run certain core protocols to enable their applications to function properly.</p> <p>This second edition includes updates throughout, along with four completely new chapters that introduce developments that have occurred since the publication of the first edition, including optical networking, cloud concepts and VXLAN.</p> <p>Rating: \u2605\u2605\u2605\u2605\u2606</p>"},{"location":"General/MyBooks/IT_related_books/#the-infinite-game-from-the-bestselling-author-of-start-with-why","title":"The Infinite Game: From the bestselling author of Start With Why","text":"<p>Author: Sinek, Simon</p> <p>Published Date: 2020-10-15</p> <p>Pages: 272.0</p> <p>ISBN: 9780241385630</p> <p>Summary: NEW YORK TIMES BESTSELLER</p> <p>The New York Times-bestselling author of Start With Why, Leaders Eat Last, and Together Is Better offers a bold new approach to business strategy by asking one question: are you playing the finite game or the infinite game? </p> <p>In The Infinite Game, Sinek applies game theory to explore how great businesses achieve long-lasting success. He finds that building long-term value and healthy, enduring growth - that playing the infinite game - is the only thing that matters to your business.</p> <p>Rating: \u2605\u2605\u2605\u2605\u2606</p>"},{"location":"General/MyBooks/IT_related_books/#the-lazy-project-manager-how-to-be-twice-as-productive-and-still-leave-the-office-early","title":"The Lazy Project Manager: How to be twice as productive and still leave the office early","text":"<p>Author: Taylor, Peter</p> <p>Published Date: 2011-11-25</p> <p>Pages: 152.0</p> <p>ISBN: 9781906821678</p> <p>Summary: The Lazy Project Manager shows how adopting a more focused approach to life, projects and work can make us twice as productive. By concentrating project management to exercise effort where it really matters we will work smarter. The simple techniques of lazy project management can help us to work more effectively and improve our work\u2013life balance.</p> <p>Rating: \u2605\u2605\u2605\u2606\u2606</p>"},{"location":"General/MyBooks/IT_related_books/#the-object-oriented-thought-process-developers-library","title":"The Object-Oriented Thought Process (Developer's Library)","text":"<p>Author: Weisfeld, Matt</p> <p>Published Date: 2013-03-13</p> <p>Pages: 322.0</p> <p>ISBN: 9780321861276</p> <p>Summary: The Object-Oriented Thought Process, Fourth Edition An introduction to object-oriented concepts for developers looking to master modern application practices Object-oriented programming (OOP) is the foundation of modern programming languages, including C++, Java, C#, Visual Basic .NET, Ruby, and Objective-C. Objects also form the basis for many web technologies such as JavaScript, Python, and PHP. It is of vital importance to learn the fundamental concepts of object orientation before starting to use object-oriented development environments. OOP promotes good design practices, code portability, and reuse\u2013but it requires a shift in thinking to be fully understood. Programmers new to OOP should resist the temptation to jump directly into a particular programming language (such as Objective-C, VB .NET, C++, C# .NET, or Java) or a modeling language (such as UML), and instead first take the time to learn what author Matt Weisfeld calls \u201cthe object-oriented thought process.\u201d Written by a developer for developers who want to make the leap to object-oriented technologies, The Object-Oriented Thought Process provides a solutions-oriented approach to object-oriented programming. Readers will learn to understand the proper uses of inheritance and composition, the difference between aggregation and association, and the important distinction between interfaces and implementations. While programming technologies have been changing and evolving over the years, object-oriented concepts remain a constant\u2013no matter what the platform. This revised edition focuses on interoperability across programming technologies, whether you are using objects in traditional application design, in XML-based data transactions, in web page development, in mobile apps, or in any modern programming environment. \u201cProgrammers who aim to create high quality software\u2013as all programmers should\u2013must learn the varied subtleties of the familiar yet not so familiar beasts called objects and classes. Doing so entails careful study of books such as Matt Weisfeld\u2019s The Object-Oriented Thought Process.\u201d \u2013Bill McCarty, author of Java Distributed Objects, and Object-Oriented Design in Java Contents at a Glance 1 Introduction to Object-Oriented Concepts 2 How to Think in Terms of Objects 3 Advanced Object-Oriented Concepts 4 The Anatomy of a Class 5 Class Design Guidelines 6 Designing with Objects 7 Mastering Inheritance and Composition 8 Frameworks and Reuse: Designing with Interfaces and Abstract Classes 9 Building Objects and Object-Oriented Design 10 Creating Object Models 11 Objects and Portable Data: XML and JSON 12 Persistent Objects: Serialization, Marshaling, and Relational Databases 13 Objects in Web Services, Mobile Apps, and Hybrids 14 Objects and Client/Server Applications 15 Design Patterns</p> <p>Rating: \u2605\u2605\u2605\u2606\u2606</p>"},{"location":"General/MyBooks/IT_related_books/#the-official-raspberry-pi-beginners-guide-the-official-raspberry-pi-beginners-guide-how-to-use-your-new-computer","title":"The Official Raspberry Pi Beginner's Guide (The Official Raspberry Pi Beginner's Guide: How to use your new computer)","text":"<p>Author: Halfacree, Gareth</p> <p>Published Date: 2020-11-02</p> <p>Pages: 252.0</p> <p>ISBN: 9781912047734</p> <p>Summary: Fully updated for Raspberry Pi 400, Raspberry Pi 4, and the latest software, this 252-page official Raspberry Pi book is crammed with projects and beginner\u2019s guides containing all the information you need to get started using your new computer!</p> <p>Learn how to set up your Raspberry Pi, install an operating system, and start using it. Follow step-by-step guides to code your own animations and games, using both the Scratch 3 and Python languages. Create amazing projects by connecting electronic components to Raspberry Pi\u2019s GPIO pins. Plus much, much more!</p> <p>252 pages of essential information:</p> <ul> <li>Set up your Raspberry Pi, install its operating system, and start using this fully functional computer.</li> <li>Start coding projects, with step-by-step guides using the Scratch 3 and Python programming languages.</li> <li>Experiment with connecting electronic components and have fun creating amazing projects.</li> </ul> <p>Rating: \u2605\u2605\u2605\u2605\u2606</p>"},{"location":"General/MyBooks/IT_related_books/#the-passionate-programmer-creating-a-remarkable-career-in-software-development-pragmatic-life","title":"The Passionate Programmer: Creating a Remarkable Career in Software Development (Pragmatic Life)","text":"<p>Author: Fowler, Chad</p> <p>Published Date: 2009-05-28</p> <p>Pages: 219.0</p> <p>ISBN: 9781934356340</p> <p>Summary: Success in today's IT environment requires you to view your career as a business endeavor. In this book, you'll learn how to become an entrepreneur, driving your career in the direction of your choosing. You'll learn how to build your software development career step by step, following the same path that you would follow if you were building, marketing, and selling a product. After all, your skills themselves are a product. The choices you make about which technologies to focus on and which business domains to master have at least as much impact on your success as your technical knowledge itself--don't let those choices be accidental. We'll walk through all aspects of the decision-making process, so you can ensure that you're investing your time and energy in the right areas. You'll develop a structured plan for keeping your mind engaged and your skills fresh. You'll learn how to assess your skills in terms of where they fit on the value chain, driving you away from commodity skills and toward those that are in high demand. Through a mix of high-level, thought-provoking essays and tactical \"Act on It\" sections, you will come away with concrete plans you can put into action immediately. You'll also get a chance to read the perspectives of several highly successful members of our industry from a variety of career paths. As with any product or service, if nobody knows what you're selling, nobody will buy. We'll walk through the often-neglected world of marketing, and you'll create a plan to market yourself both inside your company and to the industry in general. Above all, you'll see how you can set the direction of your career, leading to a more fulfilling and remarkable professional life.</p> <p>Rating: \u2605\u2605\u2605\u2606\u2606</p>"},{"location":"General/MyBooks/IT_related_books/#the-pragmatic-programmer","title":"The Pragmatic Programmer","text":"<p>Author: Hunt, Andy; Thomas, Dave; Thomas, Dave; Hunt, Andrew</p> <p>Published Date: 1999-11-24</p> <p>Pages: 352.0</p> <p>ISBN: 9780201616224</p> <p>Summary: Straight from the programming trenches, The Pragmatic Programmer cuts through the increasing specialization and technicalities of modern software development to examine the core process--taking a requirement and producing working, maintainable code that delights its users. It covers topics ranging from personal responsibility and career development to architectural techniques for keeping your code flexible and easy to adapt and reuse. Read this book, and you'll learn how to</p> <p>Fight software rot; Avoid the trap of duplicating knowledge; Write flexible, dynamic, and adaptable code; Avoid programming by coincidence; Bullet-proof your code with contracts, assertions, and exceptions; Capture real requirements; Test ruthlessly and effectively; Delight your users; Build teams of pragmatic programmers; and Make your developments more precise with automation. Written as a series of self-contained sections and filled with entertaining anecdotes, thoughtful examples, and interesting analogies, The Pragmatic Programmer illustrates the best practices and major pitfalls of many different aspects of software development. Whether you're a new coder, an experienced programmer, or a manager responsible for software projects, use these lessons daily, and you'll quickly see improvements in personal productivity, accuracy, and job satisfaction. You'll learn skills and develop habits and attitudes that form the foundation for long-term success in your career. You'll become a Pragmatic Programmer.</p> <p>Rating: \u2605\u2605\u2605\u2605\u2606</p>"},{"location":"General/MyBooks/IT_related_books/#the-presentation-secrets-of-steve-jobs-how-to-be-insanely-great-in-front-of-any-audience-business-skills-and-development","title":"The Presentation Secrets of Steve Jobs: How to Be Insanely Great in Front of Any Audience (BUSINESS SKILLS AND DEVELOPMENT)","text":"<p>Author: Gallo, Carmine</p> <p>Published Date: 2009-10-16</p> <p>Pages: 272.0</p> <p>ISBN: 9780071636087</p> <p>Summary: The Wall Street Journal Bestseller!</p> <p>Updated to include Steve Jobs's iPad and iPad2 launch presentations</p> <p>\"The Presentation Secrets of Steve Jobs reveals the operating system behind any great presentation and provides you with a quick-start guide to design your own passionate interfaces with your audiences.\" --Cliff Atkinson, author of Beyond Bullet Points and The Activist Audience</p> <p>Former Apple CEO Steve Jobs's wildly popular presentations have set a new global gold standard--and now this step-by-step guide shows you exactly how to use his crowd-pleasing techniques in your own presentations.</p> <p>The Presentation Secrets of Steve Jobs is as close as you'll ever get to having the master presenter himself speak directly in your ear. Communications expert Carmine Gallo has studied and analyzed the very best of Jobs's performances, offering point-by-point examples, tried-and-true techniques, and proven presentation secrets in 18 \"scenes,\" including:</p> <p>Develop a messianic sense of purpose Reveal the Conquering hero Channel your inner Zen Stage your presentation with props Make it look effortless With this revolutionary approach, you'll be surprised at how easy it is to sell your ideas, share your enthusiasm, and wow your audience the Steve Jobs way.</p> <p>\"No other leader captures an audience like Steve Jobs does and, like no other book, The Presentation Secrets of Steve Jobs captures the formula Steve uses to enthrall audiences.\" --Rob Enderle, The Enderle Group</p> <p>\"Now you can learn from the best there is--both Jobs and Gallo. No matter whether you are a novice presenter or a professional speaker like me, you will read and reread this book with the same enthusiasm that people bring to their iPods.\" --David Meerman Scott, bestselling author of The New Rules of Marketing &amp; PR and World Wide Rave</p> <p>Rating: \u2605\u2605\u2605\u2605\u2606</p>"},{"location":"General/MyBooks/IT_related_books/#the-tcpip-guide-a-comprehensive-illustrated-internet-protocols-reference","title":"The TCP/IP Guide: A Comprehensive, Illustrated Internet Protocols Reference","text":"<p>Author: Kozierok, Charles</p> <p>Published Date: 2005-10-01</p> <p>Pages: 1618.0</p> <p>ISBN: 9781593270476</p> <p>Summary: The TCP/IP Guide is both an encyclopedic and comprehensible guide to the TCP/IP protocol suite that will appeal to newcomers and the seasoned professional. It details the core protocols that make TCP/IP internetworks function, and the most important classical TCP/IP applications. Its personal, easy-going writing style lets anyone understand the dozens of protocols and technologies that run the Internet, with full coverage of PPP, ARP, IP, IPv6, IP NAT, IPSec, Mobile IP, ICMP, RIP, BGP, TCP, UDP, DNS, DHCP, SNMP, FTP, SMTP, NNTP, HTTP, Telnet and much more. The author offers not only a detailed view of the TCP/IP protocol suite, but also describes networking fundamentals and the important OSI Reference Model.</p> <p>Rating: \u2605\u2605\u2605\u2605\u2606</p>"},{"location":"General/MyBooks/IT_related_books/#the-three-levels-of-leadership-how-to-develop-your-leadership-presence-knowhow-and-skill","title":"The Three Levels of Leadership: How to Develop Your Leadership Presence, Knowhow and Skill","text":"<p>Author: Scouller, James</p> <p>Published Date: 2011-05-24</p> <p>Pages: 317.0</p> <p>ISBN: 9781852526818</p> <p>Summary: In all the books on leadership skills, one key element is consistently missing \u2013 the leader's psychology. For the first time, this book sets out a compact, but complete model for successful leadership based on an understanding of the psychological challenges and hidden inner blocks faced by all leaders. Drawing on his experience as a CEO and then as an executive coach, the author has created two new groundbreaking models. The first outlines the three levels of leadership. The other explains the human mind and how to achieve self-mastery. Clearly written with no unnecessary padding, packed with practical tools and backed up by research, this book shows how all leaders can rise to the challenge.</p> <p>Rating: \u2605\u2605\u2605\u2606\u2606</p>"},{"location":"General/MyBooks/IT_related_books/#the-ten-day-mba-4th-ed-a-step-by-step-guide-to-mastering-the-skills-taught-in-america-s-top-business-schools","title":"the-ten-day-mba-4th-ed-a-step-by-step-guide-to-mastering-the-skills-taught-in-america-s-top-business-schools","text":"<p>Author: Silbiger, Steven</p> <p>Published Date: 2012-07-24</p> <p>Pages: 448.0</p> <p>ISBN: 9780062199577</p> <p>Summary: Revised and updated to answer the challenges of a rapidly changing business world, the 4th edition of The Ten-Day MBA includes the latest topics taught at America's top business schools, from corporate ethics and compliance to financial planning and real estate to leadership and negotiation. With more than 400,000 copies sold around the world, this internationally acclaimed guide distills the lessons of the most popular business school courses taught at Harvard, Stanford, the University of Pennsylvania, the University of Chicago, Northwestern, and the University of Virginia. Author Steven A. Silbiger delivers research straight from the notes of real MBA students attending these top programs today\u2014giving you the tools you need to get ahead in business and in life.</p> <p>Rating: \u2605\u2605\u2605\u2606\u2606</p>"},{"location":"General/MyBooks/IT_related_books/#uml-20-in-a-nutshell-a-desktop-quick-reference-in-a-nutshell-oreilly","title":"UML 2.0 in a Nutshell: A Desktop Quick Reference (In a Nutshell (O'Reilly))","text":"<p>Author: Pilone, Dan; Pitman, Neil</p> <p>Published Date: 2005-06-24</p> <p>Pages: 234.0</p> <p>ISBN: 9780596007959</p> <p>Summary: Model inference is often based on a single best models, despite modern computers easily can process many models concurrently. One reason is the manual labour involved. Managing model ensembles can become tedious when performed manually. This work presents the software design and a prototype that is concerned to facilitate that task. Requirements are discussed and examples given. Practitioners who do not shy away from interactive ensemble model management will certainly benefit from these ideas. Other readers are welcome to re-check with model ensembles and see the myth of tedious labour dissolving.</p> <p>Rating: \u2605\u2605\u2605\u2606\u2606</p>"},{"location":"General/MyBooks/IT_related_books/#uml-distilled-a-brief-guide-to-the-standard-object-modeling-language-addison-wesley-object-technology-series","title":"UML Distilled: A Brief Guide to the Standard Object Modeling Language (Addison-Wesley Object Technology Series)","text":"<p>Author: Fowler, Martin</p> <p>Published Date: 2003-09-15</p> <p>Pages: 208.0</p> <p>ISBN: 9780321193681</p> <p>Summary: A guidebook to UML computer programming language, covering version 2.0 OMG UML Standard.</p> <p>Rating: \u2605\u2605\u2605\u2606\u2606</p>"},{"location":"General/MyBooks/IT_related_books/#user-friendly","title":"User Friendly","text":"<p>Author: Illiad</p> <p>Published Date: 1999-10-09</p> <p>Pages: 132.0</p> <p>ISBN: 9781565926738</p> <p>Summary: User Friendly tells the story of Columbia Internet, \"the friendliest, hardest-working, and most neurotic little Internet Service Provider in the world.\" Take three techs, two salespeople, a designer, two executives, a couple of administrative staff, mix in a mischievous Artificial Intelligence and a \"dust puppy\" born from the innards of a mega server, put them all together in a crowded little office, and you have the makings of one of the most off-beat, original, and funny comic strips to come along in years.User Friendly reads like Dilbert for the open-source community. Already in syndication in The National Post, one of Canada's leading national newspapers, and with a massive online following, it provides outsiders a lighthearted look at the world of the hard- core geek, and allows those who make their living dwelling in this world a chance to laugh at themselves.</p> <p>Rating: \u2605\u2605\u2605\u2605\u2606</p>"},{"location":"General/MyBooks/IT_related_books/#vb-vba-in-a-nutshell-the-languages-in-a-nutshell-oreilly","title":"VB &amp; VBA in a Nutshell \u2013 The Languages (In a Nutshell (O'Reilly))","text":"<p>Author: Lomax, Paul</p> <p>Published Date: 1998-10-01</p> <p>Pages: 552.0</p> <p>ISBN: 9781565923584</p> <p>Summary: Collects and defines the programming languages' statements, procedures, and functions, covering syntax, standard code conventions, differences of operation, data type, undocumented behaviors, and practical applications</p> <p>Rating: \u2605\u2605\u2605\u2606\u2606</p>"},{"location":"General/MyBooks/IT_related_books/#visualizing-google-cloud-101-illustrated-references-for-cloud-engineers-and-architects","title":"Visualizing Google Cloud: 101 Illustrated References for Cloud Engineers and Architects","text":"<p>Author: Vergadia, Priyanka</p> <p>Published Date: 2022-05-06</p> <p>Pages: 256.0</p> <p>ISBN: 9781119816324</p> <p>Summary: Easy-to-follow visual walkthrough of every important part of the Google Cloud Platform The Google Cloud Platform incorporates dozens of specialized services that enable organizations to offload technological needs onto the cloud. From routine IT operations like storage to sophisticated new capabilities including artificial intelligence and machine learning, the Google Cloud Platform offers enterprises the opportunity to scale and grow efficiently. In Visualizing Google Cloud: Illustrated References for Cloud Engineers &amp; Architects, Google cloud expert Priyanka Vergadia delivers a fully illustrated, visual guide to matching the best Google Cloud Platform services to your own unique use cases. After a brief introduction to the major categories of cloud services offered by Google, the author offers approximately 100 solutions divided into eight categories of services included in Google Cloud Platform: Compute Storage Databases Data Analytics Data Science, Machine Learning and Artificial Intelligence Application Development and Modernization with Containers Networking Security You\u2019ll find richly illustrated flowcharts and decision diagrams with straightforward explanations in each category, making it easy to adopt and adapt Google\u2019s cloud services to your use cases. With coverage of the major categories of cloud models\u2014including infrastructure-, containers-, platforms-, functions-, and serverless\u2014and discussions of storage types, databases and Machine Learning choices, Visualizing Google Cloud: Illustrated References for Cloud Engineers &amp; Architects is perfect for Every Google Cloud enthusiast, of course. It is for anyone who is planning a cloud migration or new cloud deployment. It is for anyone preparing for cloud certification, and for anyone looking to make the most of Google Cloud. It is for cloud solutions architects, IT decision-makers, and cloud data and ML engineers. In short, this book is for YOU.</p> <p>Rating: \u2605\u2605\u2605\u2605\u2606</p>"},{"location":"General/MyBooks/IT_related_books/#waltzing-with-bears-managing-risk-on-software-projects","title":"Waltzing with Bears: Managing Risk on Software Projects","text":"<p>Author: DeMarco, Tom; Lister, Timothy</p> <p>Published Date: 2003-03-01</p> <p>Pages: 196.0</p> <p>ISBN: 9780932633606</p> <p>Summary: An introduction to Lean thinking Lean is a mindset rather than a methodology; it is a way of thinking based on practices, strategies, tools and methods that can be applied to maximise value and minimise waste while ensuring that processes achieve corporate goals. Lean helps organisations in all sectors achieve their objectives by facilitating a long-term culture shift focusing on three fundamental areas: waste , customer value and continuous incremental improvement. A good assurance review will ensure that resources are being applied efficiently and effectively to achieve these objectives. Product overview Fundamentals of Assurance for Lean Projects explains the fundamental concepts of Lean and how they can be applied to any project, including software development and organisational change. It explains the jargon and dispels the mystique that surrounds Lean, providing readers with guidance and tips on performing audits or assurance reviews for Lean projects. It also describes how Lean fits with Agile and Kanban, and how it can be combined with Six Sigma to create an efficient, high-quality approach. The book provides strong practical guidance for those tasked with providing assurance for Lean projects. Read this book to learn about the approach and principles of Lean, the governance of Lean projects, and Lean audit and review. Topics covered include: The five main Lean principles and their significance.Tools used for root-cause analysis (the five whys and fishbone analysis).Defining and modelling customer value, and innovative responses to customer needs (the Kano model).Common causes of waste and how to improve flow.Customer pull and Kanban mechanisms to manage the associated flow of processing and information.The pursuit of perfection (Kaikaku and Kaizen) and total quality management (TQM).The application of Lean principles to software development.Practical suggestions for approaches to auditing. As with all books in the Fundamentals Series, Fundamentals of Assurance for Lean Projects introduces the subject and includes references for those who would like to further investigate specific areas.</p> <p>Rating: \u2605\u2605\u2605\u2606\u2606</p>"},{"location":"General/MyBooks/IT_related_books/#why-does-software-cost-so-much-and-other-puzzles-of-the-information-age","title":"Why Does Software Cost So Much?: And Other Puzzles of the Information Age","text":"<p>Author: DeMarco, Tom</p> <p>Published Date: 2001-12-03</p> <p>Pages: 235.0</p> <p>ISBN: 9780932633347</p> <p>Summary: Known for his ability to find provocative answers to the most puzzling questions, Tom DeMarco explores a wide range of issues in twenty-four masterful essays.The offerings range from the wise to the kooky -- in fact, many of them defy categorization. But all are marked by the author's eye-opening perspectives on topics that demand your professional attention.Drawing together several essays published in such journals as IEEE Software and American Programmer, plus ten all-new papers never seen beyond his circle of colleagues, Tom DeMarco tackles a multitude of tough subjects and wrestles fresh insight out of them. Here's a compact, compelling edition of this acclaimed consultant's views on software engineering.Subjects include management-aided engineering, documentation, desktop video, productivity, software factories, teams, measurement, icons, and more!Essays Include Why Does Software Cost So Much? Mad About Measurement Software Productivity: The Covert Agenda The Choir and the Team Management-Aided Software Engineering (with Sheila Brady of Apple Computer) Lean and Mean Software Development: State of the Art vs. State of the Practice (with Tim Lister) Twenty Years of Software Engineering: Looking Forward, Looking Back* \"If We Did Only One Thing to Improve . . .\"-- plus fifteen more!</p> <p>Rating: \u2605\u2605\u2605\u2606\u2606</p>"},{"location":"General/MyBooks/IT_related_books/#writing-effective-use-cases-crystal-series-for-software-development-agile-software-development-series","title":"Writing Effective Use Cases (Crystal Series for Software Development) (Agile Software Development Series)","text":"<p>Author: Cockburn, Alistair</p> <p>Published Date: 2000-10-05</p> <p>Pages: 294.0</p> <p>ISBN: 9780201702255</p> <p>Summary: This guide will help readers learn how to employ the significant power of use cases to their software development efforts. It provides a practical methodology, presenting key use case concepts.</p> <p>Rating: \u2605\u2605\u2605\u2606\u2606</p>"},{"location":"General/MyBooks/IT_related_books/#writing-solid-code-microsoft-techniques-for-developing-bug-free-c-programs-microsoft-programming-series","title":"Writing Solid Code: Microsoft Techniques for Developing Bug-free C. Programs (Microsoft Programming Series)","text":"<p>Author: Maguire, Steve</p> <p>Published Date: 1993-01-01</p> <p>Pages: 288.0</p> <p>ISBN: 9781556155512</p> <p>Summary:  Fatbrain Review Explains Microsoft's techniques for developing bug free C programs and provides practical approaches to the prevention and automatic detection of errors. Focus is on an in-depth analysis and exposition of not-so-obvious coding errors in the sample code provided. The theme is to answer the questions 'How couild I have automatically detected this bug' and 'How could I have prevented this bug'? Chapters include programmer attitudes, techniques and debugging methodology. A particularly revealing chapter is \"Treacheries of the Trade\", should be required reading for all C maniacs. The author has been a professional programmer for seventeen years and draws heavily (and candidly) on actual coding problems and practices based on years of experience at Microsoft.</p> <p>Rating: \u2605\u2605\u2605\u2605\u2606</p>"},{"location":"General/MyBooks/Science_books/","title":"Science books","text":""},{"location":"General/MyBooks/Science_books/#table-of-contents","title":"Table of Contents","text":""},{"location":"General/MyBooks/Science_books/#0-9","title":"0-9","text":"<ul> <li>30-Second Anatomy: The 50 Most Important Structures and Systems in the Human Body, Each Explained in Half a Minute</li> <li>30-Second Astronomy: The 50 most mindblowing discoveries in astronomy, each explained in half a minute</li> <li>30-Second Physics: The 50 most fundamental concepts in physics, each explained in half a minute</li> <li>30-Second Quantum Theory: The 50 most thought-provoking quantum concepts, each explained in half a minute</li> <li>59 Seconds: Think a little, change a lot</li> </ul>"},{"location":"General/MyBooks/Science_books/#a","title":"A","text":"<ul> <li>A Brief History Of Time From The Big Bang To Black Holes</li> <li>A Practical Guide to Data Analysis for Physical Science Students</li> <li>An Introduction to Nuclear Physics</li> <li>AsapSCIENCE: answers to the world\u2019s weirdest questions, most persistent rumours, and unexplained phenomena</li> </ul>"},{"location":"General/MyBooks/Science_books/#b","title":"B","text":"<ul> <li>Before the Beginning: Our Universe and Others</li> <li>Big Bang: The Most Important Scientific Discovery of All Time and Why You Need to Know About It</li> <li>Black Holes And Baby Universes And Other Essays</li> <li>Black Holes and Time Warps: Einstein's Outrageous Legacy</li> </ul>"},{"location":"General/MyBooks/Science_books/#c","title":"C","text":"<ul> <li>Classical Mechanics: The Theoretical Minimum</li> <li>Collins Stargazing: Beginner\u2019s guide to astronomy</li> </ul>"},{"location":"General/MyBooks/Science_books/#e","title":"E","text":"<ul> <li>Electricity And Magnetism</li> </ul>"},{"location":"General/MyBooks/Science_books/#f","title":"F","text":"<ul> <li>Fermat\u2019s Last Theorem</li> </ul>"},{"location":"General/MyBooks/Science_books/#h","title":"H","text":"<ul> <li>High Energy Astrophysics v2 2ed: Volume 2</li> <li>How Did They Do That? Wonders of the Far and Recent Past Explained</li> <li>How to Do Just About Everything</li> <li>How To: Absurd Scientific Advice for Common Real-World Problems from Randall Munroe of xkcd</li> <li>Humble Pi: A Comedy of Maths Errors</li> </ul>"},{"location":"General/MyBooks/Science_books/#i","title":"I","text":"<ul> <li>It Must Be Beautiful: Great Equations Of Modern Science</li> </ul>"},{"location":"General/MyBooks/Science_books/#j","title":"J","text":"<ul> <li>Just Six Numbers (SCIENCE MASTERS)</li> </ul>"},{"location":"General/MyBooks/Science_books/#l","title":"L","text":"<ul> <li>Lectures on Physics: Commemorative Issue Vol 2: 002</li> <li>Lectures on Physics: Commemorative Issue Vol 3</li> </ul>"},{"location":"General/MyBooks/Science_books/#m","title":"M","text":"<ul> <li>Mathematical Methods in the Physical Sciences</li> <li>Moongazing: Beginner\u2019s guide to exploring the Moon</li> </ul>"},{"location":"General/MyBooks/Science_books/#p","title":"P","text":"<ul> <li>Physicist's Desk Reference 3rd (third) Edition published by Springer (2010)</li> </ul>"},{"location":"General/MyBooks/Science_books/#q","title":"Q","text":"<ul> <li>Quantum Mechanics,</li> <li>Quantum Mechanics: The Theoretical Minimum</li> </ul>"},{"location":"General/MyBooks/Science_books/#r","title":"R","text":"<ul> <li>Reality Is Not What It Seems: The Journey to Quantum Gravity</li> </ul>"},{"location":"General/MyBooks/Science_books/#s","title":"S","text":"<ul> <li>Seven Brief Lessons on Physics: Carlo Rovelli</li> <li>Special Relativity and Classical Field Theory: Theoretical Minimum</li> <li>Statistical Physics, 2nd Edition: 14 (Manchester Physics Series)</li> <li>Stellar Astrophysics Volume 3: 03 (Introduction to Stellar Astrophysics)</li> </ul>"},{"location":"General/MyBooks/Science_books/#t","title":"T","text":"<ul> <li>The Anthropic Cosmological Principle (Oxford Paperbacks)</li> <li>The Book Of Nothing</li> <li>The Case of the Missing Neutrinos: And Other Curious Phenomena of the U Niverse (Penguin Press Science S.)</li> <li>The Collapse of Chaos: Discovering Simplicity in a Complex World (Penguin Science)</li> <li>The Dancing Wu Li Masters: An Overview of the New Physics</li> <li>The Elegant Universe: Superstrings, Hidden Dimensions, and the Quest for the Ultimate Theory</li> <li>The Fabric of the Cosmos: Space, Time and the Texture of Reality</li> <li>The Feynman Lectures on Physics: Commemorative Issue Vol 1: Mainly Mechanics, Radiation, and Heat</li> <li>The Inflationary Universe: The Quest for a New Theory of Cosmic Origins</li> <li>The Music of the Primes: Why an Unsolved Problem in Mathematics Matters</li> <li>The Origin of Species by Means of Natural Selection: Or the Preservation of Favoured Races in the Struggle for Life (Penguin Classics)</li> <li>The Physics Quick Reference Guide</li> <li>The Road to Reality: A Complete Guide to the Laws of the Universe</li> <li>The Theoretical Minimum: What You Need to Know to Start Doing Physics</li> <li>The Whole Shebang: A State-of-the-Universe(s) Report</li> </ul>"},{"location":"General/MyBooks/Science_books/#w","title":"W","text":"<ul> <li>Was Einstein Right?: Putting General Relativity to the Test (Oxford Paperbacks)</li> <li>We Have No Idea: A Guide to the Unknown Universe</li> <li>What If?: Serious Scientific Answer to Absurd Hypothetical Questions: Serious Scientific Answers to Absurd Hypothetical Questions</li> <li>What If?: Serious Scientific Answer to Absurd Hypothetical Questions: Serious Scientific Answers to Absurd Hypothetical Questions</li> <li>What We Cannot Know: From consciousness to the cosmos, the cutting edge of science explained</li> <li>Windscale, 1957: Anatomy of a Nuclear Accident</li> </ul>"},{"location":"General/MyBooks/Science_books/#30-second-anatomy-the-50-most-important-structures-and-systems-in-the-human-body-each-explained-in-half-a-minute","title":"30-Second Anatomy: The 50 Most Important Structures and Systems in the Human Body, Each Explained in Half a Minute","text":"<p>Author: Finn, Gabrielle M.; Barbaro-Brown, Judith; Smith, Claire France</p> <p>Published Date: 2017-08-17</p> <p>Pages: 160.0</p> <p>ISBN: 9781782405139</p> <p>Summary: 30-Second Anatomy gets straight to the heart of the matter: how your body operates. Whether you are a student of medicine or biology, an artist, an athlete, or simply dying to know what your physician means when he mentions your plexus or your humerus, this is the quickest route to get under your own skin. Or, indeed, to understand exactly how your own skin works. Dissecting the detail of everything from your bones to your brain into 30-Second summaries, using no more than two pages, 300 words, and one picture, this is the hip way to understand the basic structures and systems that are you. Illustrated with gory graphics and supported by biographies of medical pioneers, time lines, and glossaries, it's the book of body parts that would have kept Burke and Hare in at nights.</p> <p>Rating: \u2605\u2605\u2605\u2605\u2606</p>"},{"location":"General/MyBooks/Science_books/#30-second-astronomy-the-50-most-mindblowing-discoveries-in-astronomy-each-explained-in-half-a-minute","title":"30-Second Astronomy: The 50 most mindblowing discoveries in astronomy, each explained in half a minute","text":"<p>Author: Fressin, Fran\u00e7ois; Rees, Martin J.</p> <p>Published Date: 2018-05-03</p> <p>Pages: 160.0</p> <p>ISBN: 9781785783593</p> <p>Summary: How hot is Venus? Can you distinguish between a pulsar and a quasar? Is there a universe or a multiverse? Where do we fit into the infinitely grand scheme of things? How do we map the Cosmic Microwave Background? Most tantalizing of all: Is there anyone out there? The answers to these and many other far-out questions lie in your hands. Everyone's gazing at the heavens, but a voyage through the star-studded contents of this book will blow your mind. Astronomy encapsulates the terrifying hugeness of the cosmos into bite-size particles that mere earthlings can understand: 50 incredible discoveries brought down to Earth using no more than two pages, 300 words, and a picture. This one small volume takes you on a cosmic tour, shedding light on the most awesome of objects and places, explaining some very big ideas, concepts, and discoveries, and presenting the scientists and observers who have done so much to crack Life, the Universe, and Everything. Welcome aboard.</p> <p>Rating: \u2605\u2605\u2605\u2605\u2606</p>"},{"location":"General/MyBooks/Science_books/#30-second-physics-the-50-most-fundamental-concepts-in-physics-each-explained-in-half-a-minute","title":"30-Second Physics: The 50 most fundamental concepts in physics, each explained in half a minute","text":"<p>Author: Clegg, Brian</p> <p>Published Date: 2017-08-17</p> <p>Pages: 160.0</p> <p>ISBN: 9781782405146</p> <p>Summary: The bestselling 30-Second series takes a revolutionary approach to learning about those subjects you feel you should really understand. Each title selects a popular topic and dissects it into the 50 most significant ideas at its heart. 30-Second Physics tackles the big ideas behind life as we know it, from electromagnetic waves that enable us to connect in an instant from opposite ends of the earth to the gravity that keeps our feet firmly on the ground. In a world where physics is an everyday essential and new quantum developments make headline news, you need to know your atoms from your anti-matter, and learn just enough to speak with fluidity about Fluid Dynamics and be certain about the Uncertainty Principle. Here is the fastest way to get up to speed with rocket science and the rest.</p> <p>Rating: \u2605\u2605\u2605\u2606\u2606</p>"},{"location":"General/MyBooks/Science_books/#30-second-quantum-theory-the-50-most-thought-provoking-quantum-concepts-each-explained-in-half-a-minute","title":"30-Second Quantum Theory: The 50 most thought-provoking quantum concepts, each explained in half a minute","text":"<p>Author: Clegg, Brian; Close, Frank; Clifford, Leon; Ball, Philip; Hebden, Sophie</p> <p>Published Date: 2017-11-02</p> <p>Pages: 160.0</p> <p>ISBN: 9781785782916</p> <p>Summary: The bestselling 30-Second\u2026 series takes a revolutionary approach to learning about those subjects you feel you should really understand.</p> <p>Each title selects a popular topic and dissects it into the 50 most significant ideas at its heart. Each idea, no matter how complex, is explained in 300 words and one picture, all digestible in 30 seconds.</p> <p>30-Second Quantum Theory tackles a mindbendingly mysterious area of physics, introducing the 50 most significant quantum quandaries and ideas. In a world where the quantum physics of electronics is an everyday essential and new quantum developments make headline news, you will visit Parallel Worlds, ride Wave Theory, and learn just enough to talk with certainty about Uncertainty Theory and to untangle the mysteries of quantum entanglement.</p> <p>Rating: \u2605\u2605\u2605\u2606\u2606</p>"},{"location":"General/MyBooks/Science_books/#59-seconds-think-a-little-change-a-lot","title":"59 Seconds: Think a little, change a lot","text":"<p>Author: Wiseman, Richard</p> <p>Published Date: 2010-04-02</p> <p>Pages: 368.0</p> <p>ISBN: 9780330511605</p> <p>Summary: Whether you're looking to be more decisive in your life, find a new job or simply be happier, the chances are that this book has the 'magic bullet' you need.</p> <p>Rating: \u2605\u2605\u2605\u2606\u2606</p>"},{"location":"General/MyBooks/Science_books/#a-brief-history-of-time-from-the-big-bang-to-black-holes","title":"A Brief History Of Time From The Big Bang To Black Holes","text":"<p>Author: Hawking, Stephen; Sagan, Carl; Miller, Ron</p> <p>Published Date: 1990</p> <p>Pages: 198.0</p> <p>ISBN: 9780593015186</p> <p>Summary: Stephen Hawking is one of the world's leading cosmologists and is widely regarded as the most brilliant theoretical physicist since Einstein. Although he has been widely published within his specialized field, A Brief History of Time is the first work he has written for the non-mathematical layman. In it he explores the outer reaches of our knowledge of astrophysics and the nature of time and the universe. The result is a revelation: a book that not only serves as an introduction to today's most important theories on the cosmos but affords a unique opportunity to experience one of the most imaginative and influential thinkers of our age.</p> <p>Confined to a wheelchair for the last twenty years by a motor-neurone disease, Professor Hawking is best known for his work on black holes. But here he turns his mind to the biggest question of all: the search for a unified theory that combines general relativity and quantum mechanics.</p> <p>Always in the clearest, most accessible terms, Stephen Hawking reviews the great theories of the cosmos. From Galileo and Newton to Einstein and Poincar\u00e9, and then moves on into deepest space for the greatest intellectual adventure of all. Could time run backwards? Will a \"no boundary\" universe replace the big bang theory? What happens in a universe with eleven dimensions? These are just some of the questions considered with devastating lucidity and brilliance in A Brief History of Time, a work that is bound to become a classic of its kind.</p> <p>Rating: \u2605\u2605\u2605\u2605\u2606</p>"},{"location":"General/MyBooks/Science_books/#a-practical-guide-to-data-analysis-for-physical-science-students","title":"A Practical Guide to Data Analysis for Physical Science Students","text":"<p>Author: Lyons, Louis; Louis, Lyons</p> <p>Published Date: 1991-11-29</p> <p>Pages: 116.0</p> <p>ISBN: N/A</p> <p>Summary: It is usually straightforward to calculate the result of a practical experiment in the laboratory. Estimating the accuracy of that result is often regarded by students as an obscure and tedious routine, involving much arithmetic. An estimate of the error is, however, an integral part of the presentation of the results of experiments. This textbook is intended for undergraduates who are carrying out laboratory experiments in the physical sciences for the first time. It is a practical guide on how to analyse data and estimate errors. The necessary formulas for performing calculations are given, and the ideas behind them are explained, although this is not a formal text on statistics. Specific examples are worked through step by step in the text. Emphasis is placed on the need to think about whether a calculated error is sensible. At first students should take this book with them to the laboratory, and the format is intended to make this convenient. The book will provide the necessary understanding of what is involved, should inspire confidence in the method of estimating errors, and enable numerical calculations without too much effort. The author's aim is to make practical classes more enjoyable. Students who use this book will be able to complete their calculations quickly and confidently, leaving time to appreciate the basic physical ideas involved in the experiments.</p> <p>Rating: \u2605\u2605\u2605\u2606\u2606</p>"},{"location":"General/MyBooks/Science_books/#an-introduction-to-nuclear-physics","title":"An Introduction to Nuclear Physics","text":"<p>Author: Cottingham, W.N.; Greenwood, Derek A.</p> <p>Published Date: 1986-07-31</p> <p>Pages: 228.0</p> <p>ISBN: 9780521319607</p> <p>Summary: A comprehensive account of the basic concepts of nuclear physics intended for use in a first course on the physics of the atomic nucleus. Assumes a knowledge of elementary quantum physics, but is supplemented by appendices on particularly relevant topics.</p> <p>Rating: \u2605\u2605\u2605\u2606\u2606</p>"},{"location":"General/MyBooks/Science_books/#asapscience-answers-to-the-worlds-weirdest-questions-most-persistent-rumours-and-unexplained-phenomena","title":"AsapSCIENCE: answers to the world\u2019s weirdest questions, most persistent rumours, and unexplained phenomena","text":"<p>Author: Moffit, Mitchell; Brown, Greg</p> <p>Published Date: 2015-07-02</p> <p>Pages: 256.0</p> <p>ISBN: 9781922247940</p> <p>Summary: From the creators of the wildly popular and seriously scientific YouTube channel, AsapSCIENCE, comes entertaining, irreverent, and totally accessible answers to the questions you never got to ask in science class. Why do we get hung over? What would happen if you stopped sleeping? Is binge-watching TV actually bad for you? Why should I take a power nap? In their first-ever book, Mitchell Moffit and Greg Brown, the geniuses behind YouTube channel AsapSCIENCE, explain the true science of how things work in their trademark hilarious and fascinating fashion. Applying the fun, illustrated format of their addictive videos to topics ranging from brain freeze to hiccups to the science of the snooze button, AsapSCIENCE takes the underpinnings of biology, chemistry, physics, and other hard sciences and applies them to everyday life through quirky and relatable examples that will appeal to both science nerds and those who didn\u2019t ace chemistry. This is the science that people actually want to learn, shared in a friendly, engaging style. And in the spirit of science, no subject is taboo. Amid the humor is great information and cocktail conversation fodder, all thoughtfully presented. Whether you\u2019re a total newbie or the next Albert Einstein, this guide is sure to educate and entertain...ASAP.</p> <p>Rating: \u2605\u2605\u2605\u2606\u2606</p>"},{"location":"General/MyBooks/Science_books/#before-the-beginning-our-universe-and-others","title":"Before the Beginning: Our Universe and Others","text":"<p>Author: martin-rees</p> <p>Published Date: 2002-09-02</p> <p>Pages: 288.0</p> <p>ISBN: 9780743230995</p> <p>Summary: nd its place within a grander scheme, one of the most creative and original of contemporary scientists draws together recent advances in astrophysics and up-to-the-minute research to cast a piercing light on man's place in the cosmos.</p> <p>Rating: \u2605\u2605\u2605\u2606\u2606</p>"},{"location":"General/MyBooks/Science_books/#big-bang-the-most-important-scientific-discovery-of-all-time-and-why-you-need-to-know-about-it","title":"Big Bang: The Most Important Scientific Discovery of All Time and Why You Need to Know About It","text":"<p>Author: Singh, Simon</p> <p>Published Date: 2005-04-27</p> <p>Pages: 562.0</p> <p>ISBN: 9780007152520</p> <p>Summary: Everybody has heard of the Big Bang theory, but how many of us can actually claim to understand it? Why do cosmologists believe the Big Bang to be an accurate description of the origin of the universe? Who were the scientists who fought to bring acceptance to this unorthodox theory? And what, exactly, does the Big Bang really mean?</p> <p>In this unprecedented book, Simon Singh, author of \"Fermat's Last Theorem\" and \"The Code Book\" explains the most famous and arguably the most significant idea in the history of science. With clarity and a narrative peppered with anecdotes, the author has written the astonishing story of the beginnings of the cosmos. It is a thrilling ride through the history of the universe itself.</p> <p>Rating: \u2605\u2605\u2605\u2605\u2606</p>"},{"location":"General/MyBooks/Science_books/#black-holes-and-baby-universes-and-other-essays","title":"Black Holes And Baby Universes And Other Essays","text":"<p>Author: Hawking, Stephen; Mlodinow, Leonard</p> <p>Published Date: 1994-09-08</p> <p>Pages: 173.0</p> <p>ISBN: 9780553406634</p> <p>Summary: Readers worldwide know the work of Stephen Hawking through his phenomenal bestseller A Brief History of Time.</p> <p>In this collection of essays and other pieces - on subjects that range from warmly personal to the wholly scientific- he is revealed variously as the scientist, the man, the concerned world citizen, and - as always - the rigorous and imaginative thinker. Whether remembering his first experience of nursery school; puncturing the arrogance of those who think science can best be understood only by other scientists and should be left to them; exploring the origins and the future of the universe; or reflecting on the phenomenon of A Brief History of Time, Stephen's wit, directness of style and absence of pomp are vital characteristics at all times.</p> <p>Rating: \u2605\u2605\u2605\u2605\u2606</p>"},{"location":"General/MyBooks/Science_books/#black-holes-and-time-warps-einsteins-outrageous-legacy","title":"Black Holes and Time Warps: Einstein's Outrageous Legacy","text":"<p>Author: Thorne, Kip S.; , illustrated</p> <p>Published Date: 1994-06-24</p> <p>Pages: 496.0</p> <p>ISBN: 9780330331623</p> <p>Summary: Ever since Albert Einstein's general theory of relativity burst upon the world in 1915 some of the most brilliant minds of our century have sought to decipher the mysteries bequeathed by that theory, a legacy so unthinkable in some respects that even Einstein himself rejected them.</p> <p>Which of these bizarre phenomena, if any, can really exist in our universe? Black holes, down which anything can fall but from which nothing can return; wormholes, short spacewarps connecting regions of the cosmos; singularities, where space and time are so violently warped that time ceases to exist and space becomes a kind of foam; gravitational waves, which carry symphonic accounts of collisions of black holes billions of years ago; and time machines, for traveling backward and forward in time.</p> <p>Kip Thorne, along with fellow theorists Stephen Hawking and Roger Penrose, a cadre of Russians, and earlier scientists such as Oppenheimer, Wheeler and Chandrasekhar, has been in the thick of the quest to secure answers. In this masterfully written and brilliantly informed work of scientific history and explanation, Dr. Thorne, the Feynman Professor of Theoretical Physics at Caltech, leads his readers through an elegant, always human, tapestry of interlocking themes, coming finally to a uniquely informed answer to the great question: what principles control our universe and why do physicists think they know the things they think they know? Stephen Hawking's A Brief History of Time has been one of the greatest best-sellers in publishing history. Anyone who struggled with that book will find here a more slowly paced but equally mind-stretching experience, with the added fascination of a rich historical and human component.</p> <p>Rating: \u2605\u2605\u2605\u2605\u2606</p>"},{"location":"General/MyBooks/Science_books/#classical-mechanics-the-theoretical-minimum","title":"Classical Mechanics: The Theoretical Minimum","text":"<p>Author: Susskind, Leonard; Hrabovsky, George</p> <p>Published Date: 2014-02-25</p> <p>Pages: 256.0</p> <p>ISBN: 9780141976228</p> <p>Summary: A Wall Street Journal Best Book of 2013</p> <p>A world-class physicist and a citizen scientist combine forces to teach Physics 101\u2014the DIY way</p> <p>The Theoretical Minimum is a book for anyone who has ever regretted not taking physics in college\u2014or who simply wants to know how to think like a physicist. In this unconventional introduction, physicist Leonard Susskind and hacker-scientist George Hrabovsky offer a first course in physics and associated math for the ardent amateur. Unlike most popular physics books\u2014which give readers a taste of what physicists know but shy away from equations or math\u2014Susskind and Hrabovsky actually teach the skills you need to do physics, beginning with classical mechanics, yourself. Based on Susskind's enormously popular Stanford University-based (and YouTube-featured) continuing-education course, the authors cover the minimum\u2014the theoretical minimum of the title\u2014that readers need to master to study more advanced topics.</p> <p>An alternative to the conventional go-to-college method, The Theoretical Minimum provides a tool kit for amateur scientists to learn physics at their own pace.</p> <p>Rating: \u2605\u2605\u2605\u2605\u2606</p>"},{"location":"General/MyBooks/Science_books/#collins-stargazing-beginners-guide-to-astronomy","title":"Collins Stargazing: Beginner\u2019s guide to astronomy","text":"<p>Author: Topalovic, Radmila; Kerss, Tom; Greenwich, Royal Observatory; Astronomy, Collins Collins</p> <p>Published Date: 2016-10-06</p> <p>Pages: 224.0</p> <p>ISBN: 9780008196271</p> <p>Summary: This is the perfect beginner\u2019s guide to astronomy for use in both the Northern and Southern Hemisphere. It discusses how to plan your stargazing and what you can see with your eyes, as well as how to choose binoculars and telescopes and what you can see using them. The book also offers seasonal star charts and constellation charts and gives readers specific objects to look for in the sky. This guide from Royal Observatory Greenwich provides all you need to know to get started in stargazing and discover the universe.</p> <p>Rating: \u2605\u2605\u2605\u2605\u2606</p>"},{"location":"General/MyBooks/Science_books/#electricity-and-magnetism","title":"Electricity And Magnetism","text":"<p>Author: Duffin, W.J.</p> <p>Published Date: 1990-04-16</p> <p>Pages: 496.0</p> <p>ISBN: 9780077072094</p> <p>Summary: nan</p> <p>Rating: \u2605\u2605\u2605\u2606\u2606</p>"},{"location":"General/MyBooks/Science_books/#fermats-last-theorem","title":"Fermat\u2019s Last Theorem","text":"<p>Author: Singh, Simon</p> <p>Published Date: 1998-05-07</p> <p>Pages: 384.0</p> <p>ISBN: 9781857026696</p> <p>Summary: In 1963, a schoolboy browsing in his local library stumbled across a great mathematical problem: Fermat's Last Theorem, a puzzle that every child can now understand, but which has baffled mathematicians for over 300 years. Aged just ten, Andrew Wiles dreamed he would crack it.</p> <p>Rating: \u2605\u2605\u2605\u2605\u2606</p>"},{"location":"General/MyBooks/Science_books/#high-energy-astrophysics-v2-2ed-volume-2","title":"High Energy Astrophysics v2 2ed: Volume 2","text":"<p>Author: Longair, Malcolm S.</p> <p>Published Date: 2008-08-21</p> <p>Pages: 412.0</p> <p>ISBN: 9780521435840</p> <p>Summary: What role does viscosity play in accretion discs? How do you calculate the 'glitch function' of a pulsar? And can strong shocks account for the energy spectrum of electrons in our Galaxy? These are just some of the exciting questions that Professor Longair uses to develop the physics needed by the astronomer and high energy astrophysicist. The highly acclaimed first edition of High Energy Astrophysics instantly established itself as a classic in the teaching of contemporary astronomy. Reflecting the immense interest and developments in the subject, Professor Longair has developed the second edition into three texts; in this second volume he provides a comprehensive discussion of the high energy astrophysics of stars, the Galaxy and the interstellar medium. He develops an understanding for the essential physics with an elegance and infectious enthusiasm for which his teaching is internationally renowned, illustrating the issues throughout with results from forefront research. This book takes the student with a knowledge of physics and mathematics at the undergraduate level - but not necessarily with training in astronomy - to the point where current astronomical research can be understood.</p> <p>Rating: \u2605\u2605\u2605\u2606\u2606</p>"},{"location":"General/MyBooks/Science_books/#how-did-they-do-that-wonders-of-the-far-and-recent-past-explained","title":"How Did They Do That? Wonders of the Far and Recent Past Explained","text":"<p>Author: Sutton, Caroline</p> <p>Published Date: 1985-08-01</p> <p>Pages: 332.0</p> <p>ISBN: 9780688059354</p> <p>Summary: A collection of 17 of Asimov's essays on science and other topics, ranging from the energy crisis to the organization of living matter.</p> <p>Rating: \u2605\u2605\u2605\u2606\u2606</p>"},{"location":"General/MyBooks/Science_books/#how-to-do-just-about-everything","title":"How to Do Just About Everything","text":"<p>Author: Rosen, Courtney</p> <p>Published Date: 2007-04-12</p> <p>Pages: 100.0</p> <p>ISBN: 9780007798148</p> <p>Summary: How to Do Just About Everything ROSEN</p> <p>Rating: \u2605\u2605\u2605\u2605\u2605</p>"},{"location":"General/MyBooks/Science_books/#how-to-absurd-scientific-advice-for-common-real-world-problems-from-randall-munroe-of-xkcd","title":"How To: Absurd Scientific Advice for Common Real-World Problems from Randall Munroe of xkcd","text":"<p>Author: Munroe, Randall; , Randall</p> <p>Published Date: 2019-09-03</p> <p>Pages: 320.0</p> <p>ISBN: 9781473680326</p> <p>Summary: The world's most entertaining and useless self-help guide, from the brilliant mind behind the wildly popular webcomic xkcd and the million-selling What If? and Thing Explainer </p> <p>For any task you might want to do, there's a right way, a wrong way, and a way so monumentally bad that no one would ever try it. How To is a guide to the third kind of approach. It's full of highly impractical advice for everything from landing a plane to digging a hole.</p> <p>Bestselling author and cartoonist Randall Munroe explains how to predict the weather by analyzing the pixels of your Facebook photos. He teaches you how to tell if you're a baby boomer or a millennial by measuring the radioactivity of your teeth. He offers tips for taking a selfie with a telescope, crossing a river by boiling it, and getting to your appointments on time by destroying the moon. And if you want to get rid of this book once you're done with it, he walks you through your options for proper disposal, including dissolving it in the ocean, converting it to a vapour, using tectonic plates to subduct it into the Earth's mantle, or launching it into the sun.</p> <p>By exploring the most complicated ways to do simple tasks, Munroe doesn't just make things difficult for himself and his readers. As he did so brilliantly in What If?, he invites us to explore the most absurd reaches of the possible. Full of clever infographics and amusing illustrations, How To is a delightfully mind-bending way to better understand the science and technology underlying the things we do every day.</p> <p>Rating: \u2605\u2605\u2605\u2605\u2606</p>"},{"location":"General/MyBooks/Science_books/#humble-pi-a-comedy-of-maths-errors","title":"Humble Pi: A Comedy of Maths Errors","text":"<p>Author: Parker, Matt</p> <p>Published Date: 2020-03-05</p> <p>Pages: 336.0</p> <p>ISBN: 9780141989143</p> <p>Summary: The First Ever Maths Book to be a No.1 Bestseller 'Wonderful ... superb' Daily Mail</p> <p>What makes a bridge wobble when it's not meant to? Billions of dollars mysteriously vanish into thin air? A building rock when its resonant frequency matches a gym class leaping to Snap's 1990 hit I've Got The Power? The answer is maths. Or, to be precise, what happens when maths goes wrong in the real world.</p> <p>As Matt Parker shows us, our modern lives are built on maths: computer programmes, finance, engineering. And most of the time this maths works quietly behind the scenes, until ... it doesn't. Exploring and explaining a litany of glitches, near-misses and mishaps involving the internet, big data, elections, street signs, lotteries, the Roman empire and a hapless Olympic shooting team, Matt Parker shows us the bizarre ways maths trips us up, and what this reveals about its essential place in our world.</p> <p>Mathematics doesn't have good 'people skills', but we would all be better off, he argues, if we saw it as a practical ally. This book shows how, by making maths our friend, we can learn from its pitfalls. It also contains puzzles, challenges, geometric socks, jokes about binary code and three deliberate mistakes. Getting it wrong has never been more fun.</p> <p>Rating: \u2605\u2605\u2605\u2605\u2606</p>"},{"location":"General/MyBooks/Science_books/#it-must-be-beautiful-great-equations-of-modern-science","title":"It Must Be Beautiful: Great Equations Of Modern Science","text":"<p>Author: Farmelo, Graham</p> <p>Published Date: 2003-02-06</p> <p>Pages: 304.0</p> <p>ISBN: 9781862075559</p> <p>Summary: A stunning and unique look at the great equations that lie at the heart of many of the most successful scientific theories.</p> <p>Rating: \u2605\u2605\u2605\u2606\u2606</p>"},{"location":"General/MyBooks/Science_books/#just-six-numbers-science-masters","title":"Just Six Numbers (SCIENCE MASTERS)","text":"<p>Author: Rees, Martin J.</p> <p>Published Date: 2001-08-16</p> <p>Pages: 208.0</p> <p>ISBN: 9780753810224</p> <p>Summary: The Astronomer Royal shows how the behaviour and origins of the universe can be explained by just six numbers</p> <p>Rating: \u2605\u2605\u2605\u2606\u2606</p>"},{"location":"General/MyBooks/Science_books/#lectures-on-physics-commemorative-issue-vol-2-002","title":"Lectures on Physics: Commemorative Issue Vol 2: 002","text":"<p>Author: Feynman, Richard P.; Leighton, Robert B.; Sands, Matthew</p> <p>Published Date: 1971-01-01</p> <p>Pages: 592.0</p> <p>ISBN: 9780201021172</p> <p>Summary: Paperback book in very good condition. Cover clean with slightly bent corners. Spine straight and binding tight. Pages clean without markings or highlights. Proceeds benefit our small rural Library in Oregon.</p> <p>Rating: \u2605\u2605\u2605\u2605\u2606</p>"},{"location":"General/MyBooks/Science_books/#lectures-on-physics-commemorative-issue-vol-3","title":"Lectures on Physics: Commemorative Issue Vol 3","text":"<p>Author: Feynman, Richard P.; Leighton, Robert B.; Sands, Matthew</p> <p>Published Date: 1971-01-01</p> <p>Pages: 400.0</p> <p>ISBN: 9780201021189</p> <p>Summary: This is a textbook that derives the fundamental theories of physics from symmetry. It starts by introducing, in a completely self-contained way, all mathematical tools needed to use symmetry ideas in physics. Thereafter, these tools are put into action and by using symmetry constraints, the fundamental equations of Quantum Mechanics, Quantum Field Theory, Electromagnetism, and Classical Mechanics are derived. As a result, the reader is able to understand the basic assumptions behind, and the connections between the modern theories of physics. The book concludes with first applications of the previously derived equations. Thanks to the input of readers from around the world, this second edition has been purged of typographical errors and also contains several revised sections with improved explanations.</p> <p>Rating: \u2605\u2605\u2605\u2605\u2606</p>"},{"location":"General/MyBooks/Science_books/#mathematical-methods-in-the-physical-sciences","title":"Mathematical Methods in the Physical Sciences","text":"<p>Author: Boas, Mary L.; Mazur, Barry</p> <p>Published Date: 2012-03-18</p> <p>Pages: 552.0</p> <p>ISBN: N/A</p> <p>Summary: Now in its third edition, Mathematical Concepts in the Physical Sciences, 3rd Edition provides a comprehensive introduction to the areas of mathematical physics. It combines all the essential math concepts into one compact, clearly written reference.</p> <p>This book is intended for students who have had a two-semester or three-semester introductory calculus course. Its purpose is to help students develop, in a short time, a basic competence in each of the many areas of mathematics needed in advanced courses in physics, chemistry, and engineering. Students are given sufficient depth to gain a solid foundation (this is not a recipe book). At the same time, they are not overwhelmed with detailed proofs that are more appropriate for students of mathematics. The emphasis is on mathematical methods rather than applications, but students are given some idea of how the methods will be used along with some simple applications.</p> <p>Rating: \u2605\u2605\u2605\u2605\u2606</p>"},{"location":"General/MyBooks/Science_books/#moongazing-beginners-guide-to-exploring-the-moon","title":"Moongazing: Beginner\u2019s guide to exploring the Moon","text":"<p>Author: Kerss, Tom; Kerss, Tom; Astronomy, Collins Collins</p> <p>Published Date: 2018-11-01</p> <p>Pages: 96.0</p> <p>ISBN: 9780008305000</p> <p>Summary: An in-depth guide for aspiring astronomers and Moon observers from the Royal Observatory Greenwich. Includes detailed Moon maps and covers the history of lunar observation and exploration, the properties of the Moon, its origin and orbit. This is the ideal book for Moon observers covering essential equipment, and the key events to look out for.</p> <p>Detailed advice is given on how to choose a telescope and how to capture the Moon in sketches.</p> <p>Discover all you need to know about eclipses, blue moons, supermoons, conjunctions and occultations.</p> <p>A comprehensive section covers astrophotography using lenses, telescopes, Smartphones, including video and how to process your images.</p> <p>Comes with a photographic atlas of lunar features with plates and annotated maps.</p> <p>A glossary of key terms, index of lunar features and software references are also provided.</p> <p>Rating: \u2605\u2605\u2605\u2605\u2606</p>"},{"location":"General/MyBooks/Science_books/#physicists-desk-reference-3rd-third-edition-published-by-springer-2010","title":"Physicist's Desk Reference 3rd (third) Edition published by Springer (2010)","text":"<p>Author: Cohen, Richard E.; Lide, David; Trigg, George</p> <p>Published Date: 2003-01-27</p> <p>Pages: 932.0</p> <p>ISBN: 9780387989730</p> <p>Summary: This is a major revision of a classic, best selling reference book. Originally published by the American Institute of Physics under the title \"Physics Vade Mecum\" in 1981, and then the second edition in 1989 with the new title \"A Physicist's Desk Reference\", this third edition has been completely updated and modernized to reflect current modern physics.The book is a concise compilation of the most frequently used physics data and formulae with their derivations. This revision has six more chapters than the second edition, outdated chapters dropped, and new chapters added on atmospheric physics, electricity and magnetism, elementary particle physics, fluid dynamics, geophysics, nonlinear physics, particle accelerators, polymer physics, and quantum theory. There is a new last chapter on practical laboratory data. The references and bibliographies have been updated.This book is an indispensable tool for the researcher, professional and student in physics as well as other scientists who use physics data. The editors of this volume are Richard Cohen, author of the first two chapters of PDR and the \"Physics Quick Reference Guide\"; David Lide, one of the editors of the previous two editions and the editor of the \"CRC Handbook of Physics and Chemistry\"; and George Trigg, editor of the \"Encyclopedia of Physics\" and the \"Encyclopedia of Applied Physics\" (VCH). The market for this classic reference book includes the practicing scientist, including engineers, chemists, and biologists; and students.</p> <p>Rating: \u2605\u2605\u2605\u2605\u2606</p>"},{"location":"General/MyBooks/Science_books/#quantum-mechanics","title":"Quantum Mechanics,","text":"<p>Author: Rae, Alastair I.M.</p> <p>Published Date: 1992-01-01</p> <p>Pages: 280.0</p> <p>ISBN: 9780750302173</p> <p>Summary: This text explains clearly and with the minimum of mathematical complexity the quantum mechanics needed by physics undergraduates. It is aimed at students who have finished the first year of their courses. It is widely recommended as a course text.</p> <p>Rating: \u2605\u2605\u2605\u2606\u2606</p>"},{"location":"General/MyBooks/Science_books/#quantum-mechanics-the-theoretical-minimum","title":"Quantum Mechanics: The Theoretical Minimum","text":"<p>Author: Susskind, Leonard; Friedman, Art</p> <p>Published Date: 2015-04-30</p> <p>Pages: 384.0</p> <p>ISBN: 9780141977812</p> <p>Summary: From the bestselling author of The Theoretical Minimum, a DIY introduction to the math and science of quantum physics</p> <p>First he taught you classical mechanics. Now, physicist Leonard Susskind has teamed up with data engineer Art Friedman to present the theory and associated mathematics of the strange world of quantum mechanics.</p> <p>In this follow-up to The Theoretical Minimum, Susskind and Friedman provide a lively introduction to this famously difficult field, which attempts to understand the behavior of sub-atomic objects through mathematical abstractions. Unlike other popularizations that shy away from quantum mechanics\u2019 weirdness, Quantum Mechanics embraces the utter strangeness of quantum logic. The authors offer crystal-clear explanations of the principles of quantum states, uncertainty and time dependence, entanglement, and particle and wave states, among other topics, and each chapter includes exercises to ensure mastery of each area. Like The Theoretical Minimum, this volume runs parallel to Susskind\u2019s eponymous Stanford University-hosted continuing education course.</p> <p>An approachable yet rigorous introduction to a famously difficult topic, Quantum Mechanics provides a tool kit for amateur scientists to learn physics at their own pace.</p> <p>Rating: \u2605\u2605\u2605\u2605\u2606</p>"},{"location":"General/MyBooks/Science_books/#reality-is-not-what-it-seems-the-journey-to-quantum-gravity","title":"Reality Is Not What It Seems: The Journey to Quantum Gravity","text":"<p>Author: Rovelli, Carlo; Segre, Erica; Carnell, Simon</p> <p>Published Date: 2017-06-01</p> <p>Pages: 272.0</p> <p>ISBN: 9780141983219</p> <p>Summary: Do space and time truly exist? What is reality made of? Can we understand its deep texture? Scientist Carlo Rovelli has spent his whole life exploring these questions and pushing the boundaries of what we know. In this mind-expanding book, he shows how our understanding of reality has changed throughout centuries, from Democritus to loop quantum gravity. Taking us on a wondrous journey, he invites us to imagine a whole new world where black holes are waiting to explode, spacetime is made up of grains, and infinity does not exist -- a vast universe still largely undiscovered.</p> <p>Translated by Simon Carnell and Erica Segre.</p> <p>Rating: \u2605\u2605\u2605\u2605\u2606</p>"},{"location":"General/MyBooks/Science_books/#seven-brief-lessons-on-physics-carlo-rovelli","title":"Seven Brief Lessons on Physics: Carlo Rovelli","text":"<p>Author: Rovelli, Carlo; Segre, Erica; Carnell, Simon</p> <p>Published Date: 2016-06-30</p> <p>Pages: 96.0</p> <p>ISBN: 9780141981727</p> <p>Summary: Everything you need to know about modern physics, the universe and our place in the world in seven enlightening lessons </p> <p>'Here, on the edge of what we know, in contact with the ocean of the unknown, shines the mystery and the beauty of the world. And it's breathtaking'</p> <p>These seven short lessons guide us, with simplicity and clarity, through the scientific revolution that shook physics in the twentieth century and still continues to shake us today. In this mind-bending introduction to modern physics, Carlo Rovelli explains Einstein's theory of general relativity, quantum mechanics, black holes, the complex architecture of the universe, elementary particles, gravity, and the nature of the mind. Not since Richard Feynman's celebrated Six Easy Pieces has physics been so vividly, intelligently and entertainingly revealed.</p> <p>Rating: \u2605\u2605\u2605\u2606\u2606</p>"},{"location":"General/MyBooks/Science_books/#special-relativity-and-classical-field-theory-theoretical-minimum","title":"Special Relativity and Classical Field Theory: Theoretical Minimum","text":"<p>Author: Susskind, Leonard; Friedman, Art</p> <p>Published Date: 2018-09-06</p> <p>Pages: 448.0</p> <p>ISBN: 9780141985015</p> <p>Summary: The third volume in the bestselling physics series cracks open Einstein's special relativity and field theory Physicist Leonard Susskind and data engineer Art Friedman are back. This time, they introduce readers to Einstein's special relativity and Maxwell's classical field theory. Using their typical brand of real math, enlightening drawings, and humor, Susskind and Friedman walk us through the complexities of waves, forces, and particles by exploring special relativity and electromagnetism. It's a must-read for both devotees of the series and any armchair physicist who wants to improve their knowledge of physics' deepest truths.</p> <p>Rating: \u2605\u2605\u2605\u2605\u2606</p>"},{"location":"General/MyBooks/Science_books/#statistical-physics-2nd-edition-14-manchester-physics-series","title":"Statistical Physics, 2nd Edition: 14 (Manchester Physics Series)","text":"<p>Author: Mandl, Franz</p> <p>Published Date: 1988-04-20</p> <p>Pages: 416.0</p> <p>ISBN: 9780471915331</p> <p>Summary: Never Highlight a Book Again! Just the FACTS101 study guides give the student the textbook outlines, highlights, practice quizzes and optional access to the full practice tests for their textbook.</p> <p>Rating: \u2605\u2605\u2605\u2606\u2606</p>"},{"location":"General/MyBooks/Science_books/#stellar-astrophysics-volume-3-03-introduction-to-stellar-astrophysics","title":"Stellar Astrophysics Volume 3: 03 (Introduction to Stellar Astrophysics)","text":"<p>Author: B\u00f6hm-Vitense, Erika</p> <p>Published Date: 2008-08-21</p> <p>Pages: 304.0</p> <p>ISBN: 9780521348713</p> <p>Summary: This book is the final one in a series of three texts which together provide a modern, complete and authoritative account of our present knowledge of the stars. It discusses the internal structure and the evolution of stars, and is completely self-contained. There is an emphasis on the basic physics governing stellar structure and the basic ideas on which our understanding of stellar structure is based. The book also provides a comprehensive discussion of stellar evolution. Careful comparison is made between theory and observation, and the author has thus provided a lucid and balanced introductory text for the student. As for volumes 1 and 2, volume 3 is self-contained and can be used as an independent textbook. The author has not only taught but has also published many original papers in this subject. Her clear and readable style should make this text a first choice for undergraduate and beginning graduate students taking courses in astronomy and particularly in stellar astrophysics.</p> <p>Rating: \u2605\u2605\u2605\u2606\u2606</p>"},{"location":"General/MyBooks/Science_books/#the-anthropic-cosmological-principle-oxford-paperbacks","title":"The Anthropic Cosmological Principle (Oxford Paperbacks)","text":"<p>Author: Barrow, John D.; Barrow, John D.; Tipler, Frank J.</p> <p>Published Date: 1988-08-25</p> <p>Pages: 738.0</p> <p>ISBN: 9780192821478</p> <p>Summary: nan</p> <p>Rating: \u2605\u2605\u2605\u2606\u2606</p>"},{"location":"General/MyBooks/Science_books/#the-book-of-nothing","title":"The Book Of Nothing","text":"<p>Author: Barrow, John D.</p> <p>Published Date: 2001-07-05</p> <p>Pages: 400.0</p> <p>ISBN: 9780099288459</p> <p>Summary: From the zeros of the mathematician to the void of the philosphers, from Shakespeare to the empty set, from the ether to the quantum vacuum, from being and nothingness to creatio ex nihilo, there is much ado about nothing at the heart of things. Discoveries in astronomy are shown to shed new light on the nature of the vacuum and its dramatic effect on the explanation of the Universe.</p> <p>Rating: \u2605\u2605\u2605\u2606\u2606</p>"},{"location":"General/MyBooks/Science_books/#the-case-of-the-missing-neutrinos-and-other-curious-phenomena-of-the-u-niverse-penguin-press-science-s","title":"The Case of the Missing Neutrinos: And Other Curious Phenomena of the U Niverse (Penguin Press Science S.)","text":"<p>Author: Gribbin, John</p> <p>Published Date: 2000-03-02</p> <p>Pages: 240.0</p> <p>ISBN: 9780140287349</p> <p>Summary: Is it true that the Sun is shrinking at such a rate that our Earth will disappear within a hundred thousand years? What happened to the Sun's neutrinos to make them disappear on their way to the Earth? Why does the fact that the sky is dark at night prove that our universe is changing and hasn't always been the way it is? What are the chances that, if ever we make contact with intelligent beings who evolved under conditions similar to those on Earth, they too will be upright, bipedal with two arms ending in five-fingered hands, with a head on top containing a pair of eyes, a nose, and a mouth? </p> <p>Questions like these are posed - and often answered - in this delightful excursion through the Universe with John Gribbin, the noted award-winning astronomer and science writer. Here he explores the topics of his passionate expertise - often some of the more outlandish aspects of astronomy frequently shunned in the sober pages of scientific journals - including supernova explosions. neutron stars, white holes, black holes, wormholes, and inflation. \"The Case of the Missing Neutrinos\" is very much a personal account of twenty years of watching the Universe by a man with a rare knack for turning complex science into plain, everyday language.</p> <p>Rating: \u2605\u2605\u2605\u2606\u2606</p>"},{"location":"General/MyBooks/Science_books/#the-collapse-of-chaos-discovering-simplicity-in-a-complex-world-penguin-science","title":"The Collapse of Chaos: Discovering Simplicity in a Complex World (Penguin Science)","text":"<p>Author: Cohen, Jack; Stewart, Ian</p> <p>Published Date: 2000-03-02</p> <p>Pages: 495.0</p> <p>ISBN: 9780140291254</p> <p>Summary: Traditional science tries to answer the question: How does complexity arise in nature? But, say Jack Cohen and Ian Stewart in their exhilarating book, the more interesting question is: Why is there any simplicity?</p> <p>Beginning with a guided tour of the Islands of Truth that tells us everything we need to know about science from Newton to the present, the authors dive into the Oceans of Ignorance that surround them - turning conventional science on its head and putting it in a larger context. Provocative and controversial, their approach enables us to look at the world in a startling new way.</p> <p>Rating: \u2605\u2605\u2605\u2605\u2606</p>"},{"location":"General/MyBooks/Science_books/#the-dancing-wu-li-masters-an-overview-of-the-new-physics","title":"The Dancing Wu Li Masters: An Overview of the New Physics","text":"<p>Author: Zukav, Gary</p> <p>Published Date: 1991-03-14</p> <p>Pages: 352.0</p> <p>ISBN: 9780712648721</p> <p>Summary: Gary Zukav has written \"the Bible\" for those who are curious about the mind-expanding discoveries of advanced physics, but who have no scientific background. Like a Wu Li Master who would teach us wonder for the falling petal before speaking of gravity, Zukav writes in beautifully clear language\u2014with no mathematical equations\u2014opening our minds to the exciting new theories that are beginning to embrace the ultimate nature of our universe...Quantum mechanics, relativity, and beyond to the Einstein-Podolsky-Rosen effect and Bell's theorem.</p> <p>At an Esalen Institute meeting in 1976, tai chi master Al Huang said that the Chinese word for physics is Wu Li, \"patterns of organic energy.\" Journalist Gary Zukav and the others present developed the idea of physics as the dance of the Wu Li Masters--the teachers of physical essence. Zukav explains the concept further: The Wu Li Master dances with his student. The Wu Li Master does not teach, but the student learns. The Wu Li Master always begins at the center, the heart of the matter.... This book deals not with knowledge, which is always past tense anyway, but with imagination, which is physics come alive, which is Wu Li.... Most people believe that physicists are explaining the world. Some physicists even believe that, but the Wu Li Masters know that they are only dancing with it. The \"new physics\" of Zukav's 1979 book comprises quantum theory, particle physics, and relativity. Even as these theories age they haven't percolated all that far into the collective consciousness; they're too far removed from mundane human experience not to need introduction. The Dancing Wu Li Masters remains an engaging, accessible way to meet the most profound and mind-altering insights of 20th-century science. --Mary Ellen Curtin</p> <p>Rating: \u2605\u2605\u2605\u2605\u2606</p>"},{"location":"General/MyBooks/Science_books/#the-elegant-universe-superstrings-hidden-dimensions-and-the-quest-for-the-ultimate-theory","title":"The Elegant Universe: Superstrings, Hidden Dimensions, and the Quest for the Ultimate Theory","text":"<p>Author: Greene, Brian</p> <p>Published Date: 2000-02-03</p> <p>Pages: 464.0</p> <p>ISBN: 9780099289920</p> <p>Summary: Brian Greene, one of the world's leading string theorists, peels away the layers of mystery surrounding string theory to reveal a universe that consists of eleven dimensions, where the fabric of space tears and repairs itself, and all matter, from the smallest quarks to the most gargantuan supernovas, is generated by the vibrations of microscopically tiny loops of energy.</p> <p>Today, physicists and mathematicians throughout the world are feverishly working on one of the most ambitious theories ever proposed: superstring theory. String theory, as it is often called, is the key to the Unified Field Theory that eluded Einstein for more than thirty years. Finally, the century-old antagonism between the large and the small--General Relativity and Quantum Theory--is resolved. String theory proclaims that all of the wondrous happenings in the universe, from the frantic dancing of subatomic quarks to the majestic swirling of heavenly galaxies, are reflections of one grand physical principle and manifestations of one single entity: microscopically tiny vibrating loops of energy, a billionth of a billionth the size of an atom. In this brilliantly articulated and refreshingly clear book, Greene relates the scientific story and the human struggle behind twentieth-century physics' search for a theory of everything.</p> <p>Through the masterful use of metaphor and analogy, The Elegant Universe makes some of the most sophisticated concepts ever contemplated viscerally accessible and thoroughly entertaining, bringing us closer than ever to understanding how the universe works.</p> <p>Rating: \u2605\u2605\u2605\u2605\u2606</p>"},{"location":"General/MyBooks/Science_books/#the-fabric-of-the-cosmos-space-time-and-the-texture-of-reality","title":"The Fabric of the Cosmos: Space, Time and the Texture of Reality","text":"<p>Author: Greene, Brian</p> <p>Published Date: 2005-02-24</p> <p>Pages: 592.0</p> <p>ISBN: 9780141011110</p> <p>Summary: From Brian Greene, one of the world\u2019s leading physicists and author the Pulitzer Prize finalist The Elegant Universe, comes a grand tour of the universe that makes us look at reality in a completely different way.</p> <p>Space and time form the very fabric of the cosmos. Yet they remain among the most mysterious of concepts. Is space an entity? Why does time have a direction? Could the universe exist without space and time? Can we travel to the past? Greene has set himself a daunting task: to explain non-intuitive, mathematical concepts like String Theory, the Heisenberg Uncertainty Principle, and Inflationary Cosmology with analogies drawn from common experience. From Newton\u2019s unchanging realm in which space and time are absolute, to Einstein\u2019s fluid conception of spacetime, to quantum mechanics\u2019 entangled arena where vastly distant objects can instantaneously coordinate their behavior, Greene takes us all, regardless of our scientific backgrounds, on an irresistible and revelatory journey to the new layers of reality that modern physics has discovered lying just beneath the surface of our everyday world.</p> <p>Rating: \u2605\u2605\u2605\u2605\u2606</p>"},{"location":"General/MyBooks/Science_books/#the-feynman-lectures-on-physics-commemorative-issue-vol-1-mainly-mechanics-radiation-and-heat","title":"The Feynman Lectures on Physics: Commemorative Issue Vol 1: Mainly Mechanics, Radiation, and Heat","text":"<p>Author: Feynman, Richard P.; Leighton, Robert B.; Sands, Matthew</p> <p>Published Date: 1971-01-01</p> <p>Pages: 560.0</p> <p>ISBN: 9780201021165</p> <p>Summary: New edition features improved typography, figures and tables, expanded indexes, and 885 new corrections.</p> <p>Rating: \u2605\u2605\u2605\u2605\u2606</p>"},{"location":"General/MyBooks/Science_books/#the-inflationary-universe-the-quest-for-a-new-theory-of-cosmic-origins","title":"The Inflationary Universe: The Quest for a New Theory of Cosmic Origins","text":"<p>Author: Guth, Alan</p> <p>Published Date: 1998-07-02</p> <p>Pages: 384.0</p> <p>ISBN: 9780099959502</p> <p>Summary: This classic Big Bang neatly describes what happened after the bang. Yet, until recently, particle physicists and cosmologists were stuck on many questions that the Big Bang Theory still couldn't answer, primarily: If matter can neither be created nor des</p> <p>Rating: \u2605\u2605\u2605\u2605\u2606</p>"},{"location":"General/MyBooks/Science_books/#the-music-of-the-primes-why-an-unsolved-problem-in-mathematics-matters","title":"The Music of the Primes: Why an Unsolved Problem in Mathematics Matters","text":"<p>Author: Sautoy, Marcus du</p> <p>Published Date: 2004-09-06</p> <p>Pages: 366.0</p> <p>ISBN: 9781841155807</p> <p>Summary: Recounts the history of prime numbers, (numbers divisible only by one and themselves), which has implications beyond pure mathematics. Euclid, Ramanujan, Odlyzko, and the formation of RSA encryption are discussed, as well as the state of contemporary research on the topic. Originally published: London: Fourth Estate, 2003.</p> <p>Rating: \u2605\u2605\u2605\u2605\u2606</p>"},{"location":"General/MyBooks/Science_books/#the-origin-of-species-by-means-of-natural-selection-or-the-preservation-of-favoured-races-in-the-struggle-for-life-penguin-classics","title":"The Origin of Species by Means of Natural Selection: Or the Preservation of Favoured Races in the Struggle for Life (Penguin Classics)","text":"<p>Author: Darwin, Charles; Burrow, J.W.</p> <p>Published Date: 1982-07-29</p> <p>Pages: 480.0</p> <p>ISBN: 9780140432053</p> <p>Summary: Darwin's theory of natural selection issued a profound challenge to orthodox thought and belief: no being or species has been specifically created; all are locked into a pitiless struggle for existence, with extinction looming for those not fitted for the task. </p> <p>Yet The Origin of Species (1859) is also a humane and inspirational vision of ecological interrelatedness, revealing the complex mutual interdependencies between animal and plant life, climate and physical environment, and\u2014by implication\u2014within the human world. </p> <p>Written for the general reader, in a style which combines the rigour of science with the subtlety of literature, The Origin of Species remains one of the founding documents of the modern age.</p> <p>Rating: \u2605\u2605\u2605\u2605\u2606</p>"},{"location":"General/MyBooks/Science_books/#the-physics-quick-reference-guide","title":"The Physics Quick Reference Guide","text":"<p>Author: Cohen, Richard</p> <p>Published Date: 2010</p> <p>Pages: 226.0</p> <p>ISBN: 9781563961434</p> <p>Summary: This book consists of material in the first chapter of A Physicist's Desk Reference, updated and supplemented by additional new data. It's a self-contained, quick reference guide to the most commonly used mathematical formulas, tables of data, symbols, units, standard nomenclature, and fundamental constants in physics. A useful bibliography to more complete sources of data is also included.</p> <p>Rating: \u2605\u2605\u2605\u2606\u2606</p>"},{"location":"General/MyBooks/Science_books/#the-road-to-reality-a-complete-guide-to-the-laws-of-the-universe","title":"The Road to Reality: A Complete Guide to the Laws of the Universe","text":"<p>Author: Penrose, Roger</p> <p>Published Date: 2004-07-29</p> <p>Pages: 1000.0</p> <p>ISBN: 9780224044479</p> <p>Summary: Roger Penrose, one of the most accomplished scientists of our time, presents the only comprehensive and comprehensible account of the physics of the universe. From the very first attempts by the Greeks to grapple with the complexities of our known world to the latest application of infinity in physics, The Road to Reality carefully explores the movement of the smallest atomic particles and reaches into the vastness of intergalactic space. Here, Penrose examines the mathematical foundations of the physical universe, exposing the underlying beauty of physics and giving us one the most important works in modern science writing.</p> <p>Rating: \u2605\u2605\u2605\u2605\u2606</p>"},{"location":"General/MyBooks/Science_books/#the-theoretical-minimum-what-you-need-to-know-to-start-doing-physics","title":"The Theoretical Minimum: What You Need to Know to Start Doing Physics","text":"<p>Author: Susskind, Leonard; Hrabovsky, George</p> <p>Published Date: 2014-04-22</p> <p>Pages: 256.0</p> <p>ISBN: 9780465075683</p> <p>Summary: A Wall Street Journal Best Book of 2013</p> <p>A world-class physicist and a citizen scientist combine forces to teach Physics 101\u2014the DIY way</p> <p>The Theoretical Minimum is a book for anyone who has ever regretted not taking physics in college\u2014or who simply wants to know how to think like a physicist. In this unconventional introduction, physicist Leonard Susskind and hacker-scientist George Hrabovsky offer a first course in physics and associated math for the ardent amateur. Unlike most popular physics books\u2014which give readers a taste of what physicists know but shy away from equations or math\u2014Susskind and Hrabovsky actually teach the skills you need to do physics, beginning with classical mechanics, yourself. Based on Susskind's enormously popular Stanford University-based (and YouTube-featured) continuing-education course, the authors cover the minimum\u2014the theoretical minimum of the title\u2014that readers need to master to study more advanced topics.</p> <p>An alternative to the conventional go-to-college method, The Theoretical Minimum provides a tool kit for amateur scientists to learn physics at their own pace.</p> <p>Rating: \u2605\u2605\u2605\u2605\u2606</p>"},{"location":"General/MyBooks/Science_books/#the-whole-shebang-a-state-of-the-universes-report","title":"The Whole Shebang: A State-of-the-Universe(s) Report","text":"<p>Author: Ferris, Timothy</p> <p>Published Date: 1998-07-06</p> <p>Pages: 400.0</p> <p>ISBN: 9780684838618</p> <p>Summary: From the prizewinning author who has been called \"the greatest science writer in the world\" comes this delightfully comprehensive and comprehensible report on how science today envisions the universe as a whole.  Timothy Ferris provides a clear, elegantly written overview of current research and a forecast of where cosmological theory is likely to go in the twenty-first century. He explores the questions that have occurred to even casual readers -- who are curious about nature on the largest scales: What does it mean to say that the universe is \"expanding,\" or that space is \"curved\"? -- and sheds light on the possibility that our universe is only one among many universes, each with its own physical laws and prospects for the emergence of life.</p> <p>Rating: N/A</p>"},{"location":"General/MyBooks/Science_books/#was-einstein-right-putting-general-relativity-to-the-test-oxford-paperbacks","title":"Was Einstein Right?: Putting General Relativity to the Test (Oxford Paperbacks)","text":"<p>Author: Will, Clifford M.</p> <p>Published Date: 1988-12-01</p> <p>Pages: 288.0</p> <p>ISBN: 9780192822031</p> <p>Summary: nan</p> <p>Rating: \u2605\u2605\u2605\u2606\u2606</p>"},{"location":"General/MyBooks/Science_books/#we-have-no-idea-a-guide-to-the-unknown-universe","title":"We Have No Idea: A Guide to the Unknown Universe","text":"<p>Author: Cham, Jorge; Whiteson, Daniel</p> <p>Published Date: 2018-05-17</p> <p>Pages: 368.0</p> <p>ISBN: 9781473660205</p> <p>Summary: BRAND NEW, Exactly same ISBN as listed, Please double check ISBN carefully before ordering.</p> <p>Rating: \u2605\u2605\u2605\u2605\u2606</p>"},{"location":"General/MyBooks/Science_books/#what-if-serious-scientific-answer-to-absurd-hypothetical-questions-serious-scientific-answers-to-absurd-hypothetical-questions","title":"What If?: Serious Scientific Answer to Absurd Hypothetical Questions: Serious Scientific Answers to Absurd Hypothetical Questions","text":"<p>Author: Munroe, Randall; Munroe, Randall</p> <p>Published Date: 2015-09-24</p> <p>Pages: 336.0</p> <p>ISBN: 9781848549562</p> <p>Summary: Randall Munroe left NASA in 2005 to start up his hugely popular site XKCD 'a web comic of romance, sarcasm, math and language' which offers a witty take on the world of science and geeks. It now has 600,000 to a million page hits daily. Every now and then, Munroe would get emails asking him to arbitrate a science debate. 'My friend and I were arguing about what would happen if a bullet got struck by lightning, and we agreed that you should resolve it . . . ' He liked these questions so much that he started up What If. </p> <p>If your cells suddenly lost the power to divide, how long would you survive?</p> <p>How dangerous is it, really, to be in a swimming pool in a thunderstorm?</p> <p>If we hooked turbines to people exercising in gyms, how much power could we produce?</p> <p>What if everyone only had one soulmate?</p> <p>When (if ever) did the sun go down on the British empire? </p> <p>How fast can you hit a speed bump while driving and live?</p> <p>What would happen if the moon went away?</p> <p>In pursuit of answers, Munroe runs computer simulations, pores over stacks of declassified military research memos, solves differential equations, and consults with nuclear reactor operators. His responses are masterpieces of clarity and hilarity, studded with memorable cartoons and infographics. They often predict the complete annihilation of humankind, or at least a really big explosion. Far more than a book for geeks, WHAT IF: Serious Scientific Answers to Absurd Hypothetical Questions explains the laws of science in operation in a way that every intelligent reader will enjoy and feel much the smarter for having read.</p> <p>Rating: \u2605\u2605\u2605\u2605\u2606</p>"},{"location":"General/MyBooks/Science_books/#what-if-serious-scientific-answer-to-absurd-hypothetical-questions-serious-scientific-answers-to-absurd-hypothetical-questions_1","title":"What If?: Serious Scientific Answer to Absurd Hypothetical Questions: Serious Scientific Answers to Absurd Hypothetical Questions","text":"<p>Author: Munroe, Randall; Munroe, Randall</p> <p>Published Date: 2015-09-24</p> <p>Pages: 336.0</p> <p>ISBN: 9781848549562</p> <p>Summary: Randall Munroe left NASA in 2005 to start up his hugely popular site XKCD 'a web comic of romance, sarcasm, math and language' which offers a witty take on the world of science and geeks. It now has 600,000 to a million page hits daily. Every now and then, Munroe would get emails asking him to arbitrate a science debate. 'My friend and I were arguing about what would happen if a bullet got struck by lightning, and we agreed that you should resolve it . . . ' He liked these questions so much that he started up What If. </p> <p>If your cells suddenly lost the power to divide, how long would you survive?</p> <p>How dangerous is it, really, to be in a swimming pool in a thunderstorm?</p> <p>If we hooked turbines to people exercising in gyms, how much power could we produce?</p> <p>What if everyone only had one soulmate?</p> <p>When (if ever) did the sun go down on the British empire? </p> <p>How fast can you hit a speed bump while driving and live?</p> <p>What would happen if the moon went away?</p> <p>In pursuit of answers, Munroe runs computer simulations, pores over stacks of declassified military research memos, solves differential equations, and consults with nuclear reactor operators. His responses are masterpieces of clarity and hilarity, studded with memorable cartoons and infographics. They often predict the complete annihilation of humankind, or at least a really big explosion. Far more than a book for geeks, WHAT IF: Serious Scientific Answers to Absurd Hypothetical Questions explains the laws of science in operation in a way that every intelligent reader will enjoy and feel much the smarter for having read.</p> <p>Rating: \u2605\u2605\u2605\u2605\u2606</p>"},{"location":"General/MyBooks/Science_books/#what-we-cannot-know-from-consciousness-to-the-cosmos-the-cutting-edge-of-science-explained","title":"What We Cannot Know: From consciousness to the cosmos, the cutting edge of science explained","text":"<p>Author: Sautoy, Marcus du</p> <p>Published Date: 2017-05-18</p> <p>Pages: 320.0</p> <p>ISBN: 9780007576593</p> <p>Summary: Britain\u2019s most famous mathematician takes us to the edge of knowledge to show us what we cannot know.</p> <p>Is the universe infinite?</p> <p>Do we know what happened before the Big Bang?</p> <p>Where is human consciousness located in the brain?</p> <p>And are there more undiscovered particles out there, beyond the Higgs boson?</p> <p>In the modern world, science is king: weekly headlines proclaim the latest scientific breakthroughs and numerous mathematical problems, once indecipherable, have now been solved. But are there limits to what we can discover about our physical universe?</p> <p>In this very personal journey to the edges of knowledge, Marcus du Sautoy investigates how leading experts in fields from quantum physics and cosmology, to sensory perception and neuroscience, have articulated the current lie of the land. In doing so, he travels to the very boundaries of understanding, questioning contradictory stories and consulting cutting edge data.</p> <p>Is it possible that we will one day know everything? Or are there fields of research that will always lie beyond the bounds of human comprehension? And if so, how do we cope with living in a universe where there are things that will forever transcend our understanding?</p> <p>In What We Cannot Know, Marcus du Sautoy leads us on a thought-provoking expedition to the furthest reaches of modern science. Prepare to be taken to the edge of knowledge to find out if there\u2019s anything we truly cannot know.</p> <p>Rating: \u2605\u2605\u2605\u2605\u2606</p>"},{"location":"General/MyBooks/Science_books/#windscale-1957-anatomy-of-a-nuclear-accident","title":"Windscale, 1957: Anatomy of a Nuclear Accident","text":"<p>Author: Arnold, Lorna</p> <p>Published Date: 1992-01-13</p> <p>Pages: 269.0</p> <p>ISBN: 9780717119295</p> <p>Summary: In 1957, one of the two reactors built at Windscale was destroyed by fire, in the world's first major nuclear accident. This book describes the fire and what followed, and considers its causes, effects and political importance. It throws a revealing new light on an important event of fifty years ago and on questions of secrecy and responsibility.</p> <p>Rating: \u2605\u2605\u2605\u2606\u2606</p>"},{"location":"General/MyBooks/updated_books/","title":"Updated books","text":""},{"location":"General/MyBooks/updated_books/#the-ideas-book","title":"The Ideas Book","text":"<p>Subtitle: 60 Ways to Generate Ideas More Effectively</p> <p>Author: Kevin Duncan</p> <p>Edition: N/A</p> <p>Description: Ideas are the fuel of business - it only takes one good one to make a difference. Distilled into this single, handy-sized volume are 60 of the most useful diagrams and visual techniques, many of which are used by consultants, academics, MBA students and smart managers globally to help them think of and create great ideas. Structured into five key parts (preparing to create ideas; generating ideas; generating more ideas; judging ideas; enacting ideas), the 60 diagrams are each visually presented and then explained in an accessible manner, including tips and advice on how you can apply them to your own situations</p> <p></p>"},{"location":"General/MyBooks/updated_books/#more-effective-agile","title":"More Effective Agile","text":"<p>Subtitle: A Roadmap for Software Leaders</p> <p>Author: Steve McConnell</p> <p>Edition: N/A</p> <p>Description: In this comprehensive yet accessible overview for software leaders, the author presents an impactful, action-oriented prescription-covering the practical considerations needed to ensure you reap the full benefits of effective Agile</p> <p></p>"},{"location":"General/Scrum/acceptance_criteria_template/","title":"Acceptance criteria template","text":"<p>Gherkin Reference</p> <p>Feature: Some terse yet descriptive text of what is desired   In order to realize a named business value   As an explicit system actor   I want to gain some beneficial outcome which furthers the goal</p> <p>Scenario: Some determinable business situation   Given some precondition   And some other precondition   When some action by the actor   And some other action   And yet another action   Then some testable outcome is achieved   And something else we can check happens too</p> <p>Scenario: A different situation   ...</p>"},{"location":"General/Scrum/scrum/","title":"scrum","text":""},{"location":"General/Scrum/sprint_goal_template/","title":"Sprint goal template","text":"<p>Our focus is on Outcome</p> <p>We believe it delivers Impact to Customer</p> <p>This will be confirmed when Event happens</p>"},{"location":"General/Scrum/user_story_template/","title":"User story template","text":"<ul> <li>As a (who wants to accomplish something)</li> <li>I want to (what they want to accomplish)</li> <li>So that (why they want to accomplish that thing)</li> </ul> <p>An example:</p> <ul> <li>As a bank customer</li> <li>I want to withdraw money from an ATM</li> <li>So that I\u2019m not constrained by opening hours or lines at the teller\u2019s</li> </ul>"}]}